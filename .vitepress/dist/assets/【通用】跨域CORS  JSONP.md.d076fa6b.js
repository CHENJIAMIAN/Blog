import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"【通用】跨域CORS  JSONP.md","filePath":"【通用】跨域CORS  JSONP.md"}'),p={name:"【通用】跨域CORS  JSONP.md"},o=l(`<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">跨域</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    只要是跨域请求 1Ajax </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> 2DOM </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> 3存储</span></span>
<span class="line"><span style="color:#A6ACCD;">    (协议、域名、端口不一致都是跨域行为)，浏览器一律不准</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#FFCB6B;">目的</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    是为了保证用户信息的安全，防止恶意的网站窃取数据。</span></span>
<span class="line"><span style="color:#FFCB6B;">没有会怎样</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">   恶意的网站直接套用iframe打开的真实的站点</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">在用户输入用户名和密码之后，如果没有同源策略限制DOM操作，那么恶意的网站就可以通过代码获取用户信息</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">为什么不让我跨域ajax</span></span>
<span class="line"><span style="color:#A6ACCD;">    因为不能保证请求是用户发出的</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 假如支付宝的转账操作是一个post请求，</span><span style="color:#FFCB6B;">大概是https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//alipay.com/api/withdraw/?to_user=kindJeff&amp;amout=1000</span></span>
<span class="line"><span style="color:#A6ACCD;">   我写了一段ajax的post请求代码，请求连接是上面的url。然后我把这段代码嵌入我的网站a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">com</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 刚好浏览器还有alipay</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">com域名的cookie的cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">   我让你访问a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">com，打开页面，于是在你不知情的情况下发出了post请求，你的钱就被转到我的账号里了</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">跨域通信的 5种 方式：</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、JSONP</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、WebSocket</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">、CORS</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">、Hash</span><span style="color:#676E95;font-style:italic;">//Hash的改变，页面不会刷新。这就是用 Hash 做跨域通信的基本原理。window.onhashchange=获取数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">、postMessage</span></span>
<span class="line"><span style="color:#A6ACCD;">        window1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">postMessage</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://B.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        window2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#89DDFF;">=()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">            或 </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MessageChannel</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#89DDFF;">=()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">CORS是一个W3C标准，全称是</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">跨域资源共享</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">（Cross</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">origin resource sharing）</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">用来解决跨域问题</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">    整个CORS通信过程，都是浏览器自动完成，实现CORS通信的关键是服务器实现了CORS接口。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    简单请求</span><span style="color:#676E95;font-style:italic;">//动词为get/post/head，</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//没有⾃定义请求头，或是表单/文本</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//Content-Type是application/x-wwwform-urlencoded，multipart/form-data或text/plain之⼀</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">客户端</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">Origin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//api.bob.com //关键字段在这, 声明请求来自哪个源（协议 + 域名 + 端口）,问服务器同不同意</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">服务器</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Allow</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Origin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//api.bob.com</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//浏览器发现，这个回应的头信息没有包含Access-Control-Allow-Origin字段（详见下文），就知道出错了，</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//从而抛出一个错误，被XMLHttpRequest的onerror回调函数捕获。注意，这种错误无法通过状态码识别，因为HTTP回应的状态码有可能是200。</span></span>
<span class="line"><span style="color:#A6ACCD;">                Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Allow</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Credentials</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//浏览器对跨域请求一版不会发送cookie, 改配置表示是否允许发送Cookie, xhr.withCredentials = true;</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//同时:Access-Control-Allow-Origin就不能设为星号，必须指定明确的、与请求网页一致的域名</span></span>
<span class="line"><span style="color:#A6ACCD;">                Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Expose</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> FooBar     </span><span style="color:#676E95;font-style:italic;">//本来只能拿六个字段 这么设置可以多拿       </span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//该字段可选。CORS请求时，XMLHttpRequest.getResponseHeader()方法只能拿到6个基本字段：</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//上面的例子指定，getResponseHeader(&#39;FooBar&#39;)可以返回FooBar字段的值。            </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//Content-Type: text/html; charset=utf-8</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">    非简单请求 </span><span style="color:#676E95;font-style:italic;">// 1.PUT 2.DELETE 3.json/xml 删改|结构数据</span></span>
<span class="line"><span style="color:#A6ACCD;">        1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">预检请求:</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#FFCB6B;">客户端</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//预检请求服务器询问能不能接受方法/头字段</span></span>
<span class="line"><span style="color:#A6ACCD;">                OPTIONS </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cors HTTP</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">OPTIONS，表示这个请求是用来询问的</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">Origin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//api.bob.com //关键字段</span></span>
<span class="line"><span style="color:#A6ACCD;">                Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Method</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> PUT </span><span style="color:#676E95;font-style:italic;">//必须</span></span>
<span class="line"><span style="color:#A6ACCD;">                Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Request</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> X</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Custom</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Header</span><span style="color:#676E95;font-style:italic;">//该字段是一个逗号分隔的字符串，指定浏览器CORS请求会额外发送的头信息字段  </span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#FFCB6B;">服务器</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Max</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 表示可以缓存</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">防止多次预检</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">预检通过</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">   服务器收到</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">预检</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">请求以后</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">预检不通过</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 如果浏览器否定了</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">预检</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">请求，会返回一个正常的HTTP回应，但是没有任何CORS相关的头信息字段。这时，浏览器就会认定，服务器不同意预检请求，</span></span>
<span class="line"><span style="color:#A6ACCD;">                           因此触发一个错误，被XMLHttpRequest对象的onerror回调函数捕获。控制台会打印出如下的报错信息。</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//HTTP/1.1 200 OK</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//Date: Mon, 01 Dec 2008 01:15:39 GMT</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//Server: Apache/2.0.61 (Unix)</span></span>
<span class="line"><span style="color:#A6ACCD;">                    Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Allow</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Origin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//api.bob.com //关键字段</span></span>
<span class="line"><span style="color:#A6ACCD;">                    Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Allow</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> GET</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> POST</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> PUT</span></span>
<span class="line"><span style="color:#A6ACCD;">                    Access</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Allow</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Headers</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> X</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Custom</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Header</span></span>
<span class="line"><span style="color:#A6ACCD;">        2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">一旦服务器通过了</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">预检</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">请求，以后每次浏览器正常的CORS请求，就都跟简单请求一样，会有一个Origin头信息字段。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    与JSONP的比较</span></span>
<span class="line"><span style="color:#A6ACCD;">        1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">JSONP只支持GET请求</span></span>
<span class="line"><span style="color:#A6ACCD;">        2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">JSONP支持老浏览器，以及可以向不支持CORS的网站请求数据。  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#82AAFF;">Jsonp</span><span style="color:#A6ACCD;">(JSON with Padding) :使用</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">元素作为Ajax传输的技术</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">解决跨域问题    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">原理</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 拥有</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">这个属性的标签都拥有跨域的能力，比如</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">、</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">img</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">、</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">iframe</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    缺点：JSONP只能发起GET请求</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">服务器根据客户端callback,返回该方法的参数和调用的json字符串</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    客户端（从跨域的服务器获取json数据）</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//声明</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    var getJSONP = function(json)</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">alert</span><span style="color:#A6ACCD;">(json</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data);    </span><span style="color:#676E95;font-style:italic;">////data={data:&#39;123&#39;},弹出 &#39;123&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#A6ACCD;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//调用</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://remoteserver.com/Myservelt? callback=getJSONP</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    跨域的服务器</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//Myservelt 获取到传入的callback为getJSONP,于是返回&quot;getJSONP({data:&#39;123&#39;});&quot; 该字符串作为js代码被客户端解析</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/javascript</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://remoteserver.com/Myservelt? callback=getJSONP</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//变成</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//&lt;script type=&quot;text/javascript&quot;&gt;getJSONP({data:&#39;123&#39;})&lt;/script&gt; /*于是getJSONP被调用，而且传进去的参数是服务器发来的*/</span></span></code></pre></div>`,2),t=[o];function e(c,r,D,y,F,C){return n(),a("div",null,t)}const E=s(p,[["render",e]]);export{i as __pageData,E as default};
