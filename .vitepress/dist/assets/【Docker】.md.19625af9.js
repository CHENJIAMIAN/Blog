import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const p="/assets/796DAD50E04D4B03810F6C73510AC893.dc6a0f07.png",d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"【Docker】.md","filePath":"【Docker】.md"}'),o={name:"【Docker】.md"},e=l('<h2 id="docker-属于-linux-容器的一种封装-提供简单易用的容器使用接口-相当于一个虚拟机进程" tabindex="-1">Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口, 相当于一个虚拟机进程 <a class="header-anchor" href="#docker-属于-linux-容器的一种封装-提供简单易用的容器使用接口-相当于一个虚拟机进程" aria-label="Permalink to &quot;Docker 属于 Linux 容器的一种封装，提供简单易用的容器使用接口, 相当于一个虚拟机进程&quot;">​</a></h2><p><img src="'+p+`" alt=""></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">win10专业版开启 Hyper</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">V安装 Docker Desktop for Windows即可</span></span>
<span class="line"><span style="color:#A6ACCD;">其他老的用docker toolbox工具集的docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">machine</span></span>
<span class="line"><span style="color:#82AAFF;">第一层是虚拟机linux</span><span style="color:#A6ACCD;">(有自己的网络</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">window通过docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">machine ssh进入去配置网络</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">镜像源等)</span><span style="color:#676E95;font-style:italic;">//2 无网络访问权限是正常的//docker-machine restart可以重启</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">第二层是image</span><span style="color:#A6ACCD;">(镜像) </span><span style="color:#676E95;font-style:italic;">//本地镜像存储于虚拟机的目录/var/lib/docker</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">第三层是container</span><span style="color:#A6ACCD;">(容器)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">docker run hello</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">world      #测试是否能用</span></span>
<span class="line"><span style="color:#A6ACCD;">docker </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">v       #版本c     </span></span>
<span class="line"><span style="color:#A6ACCD;">docker info     #查看有关docker安装的更多详细信息</span></span>
<span class="line"><span style="color:#A6ACCD;">docker version  #包括：docker server，docker client</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 详细信息</span></span>
<span class="line"><span style="color:#A6ACCD;">docker network ls #网络</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//有的win docker  会出现Failed to switch because your Windows version is not compatible.无法切换到linux,不知道怎么解决</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Docker debian apt</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">get更换国内源解决Dockerfile构建速度过慢 </span><span style="color:#89DDFF;">??</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//在Dockerfile中添加如下代码：       </span></span>
<span class="line"><span style="color:#A6ACCD;">    RUN mv </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">etc</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">apt</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">sources</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">list </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">etc</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">apt</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">sources</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">list</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bak</span><span style="color:#676E95;font-style:italic;">//#备份旧的配置文件    </span></span>
<span class="line"><span style="color:#A6ACCD;">    COPY sources</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">list </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">etc</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">apt</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//#替换为我们自定义的配置文件,自己网上找一份就可以        </span></span>
<span class="line"><span style="color:#A6ACCD;">    RUN npm config set registry </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//registry.npm.taobao.org //npm config set registry https://registry.npmjs.org</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">解决windows系统无法对docker容器进行端口映射的问题</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 明明3000</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">tcp </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">3333</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">访问了localhost</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">3333</span><span style="color:#FFCB6B;">却访问不到</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//因为服务中使用的localhost指的是这个Linux环境的地址，而不是我们的宿主环境Windows</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//所以docker-machine ip default   # 其中，default 是docker-machine的name，可以通过docker-machine -ls 查看找到这个Linux的ip地址是192.168.99.100    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//所以应该访问的是:http://192.168.99.100:3333/users/login</span></span></code></pre></div><h2 id="image-镜像-docker把应用程序及其依赖打包在-image-文件可以看作是容器的模板" tabindex="-1">image（镜像）: Docker把应用程序及其依赖打包在 image 文件可以看作是容器的模板 <a class="header-anchor" href="#image-镜像-docker把应用程序及其依赖打包在-image-文件可以看作是容器的模板" aria-label="Permalink to &quot;image（镜像）: Docker把应用程序及其依赖打包在 image 文件可以看作是容器的模板&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker images		</span><span style="color:#676E95;font-style:italic;">#列出所有镜像</span></span>
<span class="line"><span style="color:#A6ACCD;">daemon</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">json</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#配置镜像源的文件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#下载CentOS7 镜像</span></span>
<span class="line"><span style="color:#A6ACCD;">docker pull centos</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">7.2</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">1511</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">docker run </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ti centos bash	</span><span style="color:#676E95;font-style:italic;">#运行或安装centso</span></span>
<span class="line"><span style="color:#A6ACCD;">docker run </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ti ubuntu bash  </span><span style="color:#676E95;font-style:italic;">#拉取安装最新 Ubuntu镜像</span></span>
<span class="line"><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#退出</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> docker rmi IMAGEID 			</span><span style="color:#676E95;font-style:italic;">#删除镜像 docker rmi 镜像名称：label</span></span>
<span class="line"><span style="color:#A6ACCD;">docker tag IMAGEID REPOSITORY</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">TAG	 	</span><span style="color:#676E95;font-style:italic;">#重命名镜像的仓库和标签</span></span>
<span class="line"><span style="color:#A6ACCD;">docker commit 容器id REPOSITORY</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">TAG 	</span><span style="color:#676E95;font-style:italic;">#保存为新镜像</span></span>
<span class="line"><span style="color:#A6ACCD;">docker build </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">t </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">]/[</span><span style="color:#A6ACCD;">repository</span><span style="color:#89DDFF;">]:[</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">#构建一下 image 文件</span></span>
<span class="line"><span style="color:#A6ACCD;">docker push </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">]/[</span><span style="color:#A6ACCD;">repository</span><span style="color:#89DDFF;">]:[</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">#发布 image 文件到dockerhub</span></span></code></pre></div><h2 id="container-容器" tabindex="-1">container(容器) : <a class="header-anchor" href="#container-容器" aria-label="Permalink to &quot;container(容器) :&quot;">​</a></h2><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">docker ps		 </span><span style="color:#676E95;font-style:italic;">#列出正在运行的容器     &lt;==&gt;  docker container ls --all</span></span>
<span class="line"><span style="color:#A6ACCD;">docker ps </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">a 	 </span><span style="color:#676E95;font-style:italic;">#列出所有容器</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#运行容器</span></span>
<span class="line"><span style="color:#A6ACCD;">    docker start containerid  </span></span>
<span class="line"><span style="color:#A6ACCD;">    docker run 命令会从 image 文件生成容器。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#进入（执行）容器</span></span>
<span class="line"><span style="color:#A6ACCD;">    docker attach containerid     </span></span>
<span class="line"><span style="color:#A6ACCD;">    或</span></span>
<span class="line"><span style="color:#A6ACCD;">    docker </span><span style="color:#82AAFF;">exec</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ti containerid  </span><span style="color:#89DDFF;">/</span><span style="color:#82AAFF;">bin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">docker cp package</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">json</span><span style="color:#A6ACCD;"> ff524254</span><span style="color:#89DDFF;">:/</span><span style="color:#A6ACCD;">userauth </span><span style="color:#676E95;font-style:italic;">#复制文件到容器里</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#停止/kill中止，容器</span></span>
<span class="line"><span style="color:#A6ACCD;">    docker stop containerid </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#删除容器</span></span>
<span class="line"><span style="color:#A6ACCD;">    docker rm containerid </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#重命名容器</span></span>
<span class="line"><span style="color:#A6ACCD;">    docker rename a b</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#命令用于从正在运行的 Docker 容器里面，将文件拷贝到本机。下面是拷贝到当前目录的写法。</span></span>
<span class="line"><span style="color:#A6ACCD;">    docker container cp </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">containID</span><span style="color:#89DDFF;">]:[/</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">to</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">file</span><span style="color:#89DDFF;">]\\</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#F78C6C;">0.0</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">0</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">0</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">49155</span><span style="color:#A6ACCD;">-&gt;</span><span style="color:#F78C6C;">5000</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">tcp 表示本地主机的 </span><span style="color:#F78C6C;">49155</span><span style="color:#A6ACCD;"> 被映射到了容器的 </span><span style="color:#F78C6C;">5000</span><span style="color:#A6ACCD;"> 端口</span></span></code></pre></div><p>配置centos7解决 docker Failed to get D-Bus connection 报错</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 在创建docker容器时添加--privileged</span></span>
<span class="line"><span style="color:#A6ACCD;">docker run --privileged  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ti </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">container=docker</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">v </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">sys</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cgroup</span><span style="color:#89DDFF;">:/</span><span style="color:#A6ACCD;">sys</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cgroup  centos  </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">usr</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">sbin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">init</span></span>
<span class="line"><span style="color:#A6ACCD;">docker run --privileged</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">m 24576M </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">memory</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">swap </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">8020</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">8020</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">7180</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">7180</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">21050</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">21050</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">50070</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">50070</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">50075</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">50075</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">50010</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">50010</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">50020</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">50020</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">8890</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">8890</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">60010</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">60010</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">10002</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">10002</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">25010</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">25010</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">25020</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">25020</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">18088</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">18088</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">8088</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">8088</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">19888</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">19888</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">7187</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">7187</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">11000</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">11000</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">t </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">8888</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">8888</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">d --hostname</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">hadoop --name</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">linux_hadoop  镜像id</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#docker的linux镜像配置ssh，让win10的xshell连接</span></span>
<span class="line"><span style="color:#A6ACCD;">docker run --privileged  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ti </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">container=docker</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">v </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">sys</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cgroup</span><span style="color:#89DDFF;">:/</span><span style="color:#A6ACCD;">sys</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cgroup </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p </span><span style="color:#F78C6C;">50001</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">22</span><span style="color:#A6ACCD;">  a9db  </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">usr</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">sbin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">init</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#注意-p 50001:22这句，意思是将win10的50001端口和container的22端口绑定，这样win10访问127.0.0.1:50001等价于访问container的22端口</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#拉动并运行我们命名的Dockerized nginx Web服务器webserver</span></span>
<span class="line"><span style="color:#A6ACCD;">docker run --detach --publish </span><span style="color:#F78C6C;">50001</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">80</span><span style="color:#A6ACCD;"> --name webserver nginx</span></span></code></pre></div><p>取安装最新 Ubuntu镜像</p><div class="language-python"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ctrl</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">c   </span><span style="color:#676E95;font-style:italic;">#停止 Node 进程</span></span>
<span class="line"><span style="color:#A6ACCD;">ctrl</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">d   </span><span style="color:#676E95;font-style:italic;">#退出容器，等同于exit,  退出容器且关闭, docker ps 查看无 </span></span>
<span class="line"><span style="color:#A6ACCD;">ctrl</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">q </span><span style="color:#676E95;font-style:italic;">#退出容器但不关闭, docker ps 查看有</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">t                          </span><span style="color:#676E95;font-style:italic;">#终端界面。</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">i                          </span><span style="color:#676E95;font-style:italic;">#允许与终端界面交互。</span></span>
<span class="line"><span style="color:#A6ACCD;">--privileged		</span><span style="color:#676E95;font-style:italic;">#为此容器授予扩展权限</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">publish </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">p		</span><span style="color:#676E95;font-style:italic;">#将容器的端口发布到主机 -P随机生成</span></span>
<span class="line"><span style="color:#A6ACCD;">--memory </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">m		</span><span style="color:#676E95;font-style:italic;">#内存限制</span></span>
<span class="line"><span style="color:#A6ACCD;">--memory</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">swap		</span><span style="color:#676E95;font-style:italic;">#交换限制等于内存加交换：&#39; - 1以启用无限制交换</span></span>
<span class="line"><span style="color:#A6ACCD;">--hostname </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">h		</span><span style="color:#676E95;font-style:italic;">#容器主机名</span></span>
<span class="line"><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">d                          </span><span style="color:#676E95;font-style:italic;">#是--detach后台执行</span></span>
<span class="line"><span style="color:#A6ACCD;">--env </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">e		        </span><span style="color:#676E95;font-style:italic;">#设置环境变量</span></span>
<span class="line"><span style="color:#A6ACCD;">--volume </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">v		</span><span style="color:#676E95;font-style:italic;">#绑定一个卷 ，其实是在宿主的C:\\ProgramData\\Docker\\volumes Volume上创建一个directory, 在该目录放东西会在容器里同步地放东西,一个联动的目录</span></span>
<span class="line"><span style="color:#A6ACCD;">    --volume </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">tmp</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">data1</span><span style="color:#89DDFF;">:/</span><span style="color:#A6ACCD;">tmp</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">data2 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">#主机的/tmp/data1（可以是一个绝对路径，也可以是一个数据卷名如果数据卷不存在，docker会自动创建数据卷）目录</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">v </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">d</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">PycharmProjects</span><span style="color:#89DDFF;">:/</span><span style="color:#A6ACCD;">test</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">#与容器中的/tmp/data2（必须是绝对路径）目录一一对应 </span></span>
<span class="line"><span style="color:#A6ACCD;">--rm                        </span><span style="color:#676E95;font-style:italic;">#参数，在容器终止运行后自动删除容器文件</span></span></code></pre></div><blockquote><p>docker-compose</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">文件夹1</span><span style="color:#A6ACCD;">(包含Dockerfile)</span></span>
<span class="line"><span style="color:#82AAFF;">文件夹2</span><span style="color:#A6ACCD;">(包含Dockerfile)</span></span>
<span class="line"><span style="color:#82AAFF;">文件夹3</span><span style="color:#A6ACCD;">(包含docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">yml) </span><span style="color:#676E95;font-style:italic;">//docker-compose.yml里包含文件夹1和文件夹2 </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//docker-compose up--no-recreate的时候会逐个运行它们的Dockerfile</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Dockerfile </span><span style="color:#FFCB6B;">文件</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">用来定制镜像</span></span>
<span class="line"><span style="color:#A6ACCD;">        在Dockerfile文件这个目录下执行命令：</span></span>
<span class="line"><span style="color:#A6ACCD;">            docker build </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">t </span><span style="color:#FFCB6B;">imagename1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">v1 </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//.表示上下文的目录,v1是镜像标签</span></span>
<span class="line"><span style="color:#A6ACCD;">            docker build </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">t node</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">web</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">development</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">userauth </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">/*node-web-development/userauth是镜像名词*/</span></span>
<span class="line"><span style="color:#A6ACCD;">        FROM 告诉Docker使用哪个镜像源     </span></span>
<span class="line"><span style="color:#A6ACCD;">        ADD </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//移动当前目录下面的文件到app目录下 </span></span>
<span class="line"><span style="color:#A6ACCD;">        WORKDIR </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">app    </span><span style="color:#676E95;font-style:italic;">//进入到app目录下面，类似cd  </span></span>
<span class="line"><span style="color:#A6ACCD;">        RUN 是在 docker build 时运行 </span><span style="color:#676E95;font-style:italic;">//安装依赖 </span></span>
<span class="line"><span style="color:#A6ACCD;">        EXPOSE </span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">//对外暴露的端口</span></span>
<span class="line"><span style="color:#A6ACCD;">        CMD 是在 docker run   时运行 [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">//程序启动脚本</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//运行一行命令,就存档一下,失败时重新执行可以从存档开始 </span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">     </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">yml</span><span style="color:#676E95;font-style:italic;">//在包含它的目录下运行:</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//把很多命令搞在一起,一次就启动很多容器等，定义构成应用程序的服务，这样它们可以在隔离环境中一起运行</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose up</span><span style="color:#676E95;font-style:italic;">//目录下运行, -f，--file 指定docker-compose.yml//--force-recreate 强制重新创建 //--no-recreate 如果容器已经存在,不重新创建</span></span>
<span class="line"><span style="color:#A6ACCD;">            docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose up notes</span><span style="color:#676E95;font-style:italic;">//单纯启动容器,不会重新构建</span></span>
<span class="line"><span style="color:#A6ACCD;">            docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose build notes</span><span style="color:#676E95;font-style:italic;">//更新Dockerfile或其构建目录的内容的更改到容器里</span></span>
<span class="line"><span style="color:#A6ACCD;">                docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose up </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">build notes</span><span style="color:#676E95;font-style:italic;">//重新创建镜像，然后生成容器.        </span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose exec notes sh </span><span style="color:#676E95;font-style:italic;">//在正在运行的容器中执行命令</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose run notes bash</span><span style="color:#676E95;font-style:italic;">//启动web服务并bash作为其命令运行，运行一次性命令</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose start notes</span><span style="color:#676E95;font-style:italic;">// </span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose ps </span><span style="color:#676E95;font-style:italic;">//列出包含的容器们</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose images</span><span style="color:#676E95;font-style:italic;">//列出包含的镜像们 </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">常用命令</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose up </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">d 启动（修改docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">yml后需要使用此命令使更改生效）；</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose logs 打印日志；</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose logs </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">f 打印日志，</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">f表示跟随日志；</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker logs </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">f qinglong 和上面两条相比可以显示汉字；</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose pull 更新镜像；</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose stop 停止容器；</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose restart 重启容器；</span></span>
<span class="line"><span style="color:#A6ACCD;">        docker</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">compose down 停止并删除容器；        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8091</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">80</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//内部的80映射到外部是8091</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">./</span><span style="color:#FFCB6B;">backend</span><span style="color:#89DDFF;">:/</span><span style="color:#A6ACCD;">usr</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">src</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">app </span><span style="color:#676E95;font-style:italic;">//让/usr/src/app指向本地backend文件夹</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;">/lib/mysql </span><span style="color:#676E95;font-style:italic;">//只是指定一个路径，Docker 会自动在创建一个数据卷（这个路径是容器内部的</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">kitematic</span><span style="color:#676E95;font-style:italic;">//是docker推出的GUI工具,使操作docker的方式变得更简单直观</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Kubernetes </span><span style="color:#676E95;font-style:italic;">//是Google开源的一个容器编排引擎，它支持自动化部署、大规模可伸缩、应用容器化管理。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">是底层资源与容器的一个抽象层, 可以算是分布式时代的Linux</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    在Kubernetes中，我们可以创建多个容器，每个容器里面运行一个应用实例，然后通过内置的负载均衡策略，</span></span>
<span class="line"><span style="color:#A6ACCD;">        实现对这一组应用实例的管理、发现、访问，而这些细节都不需要运维人员去进行复杂的手工配置和处理。</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pm2</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">runtime 专为 Docker 容器设计，它将应用程序保持在前台，使容器保持运行，</span></span>
<span class="line"><span style="color:#A6ACCD;">pm2 专为在后台发送或运行应用程序的正常使用而设计。</span></span></code></pre></div>`,14),t=[e];function c(r,y,D,C,A,F){return n(),a("div",null,t)}const k=s(o,[["render",c]]);export{d as __pageData,k as default};
