import{_ as s,o as a,c as n,O as l}from"./chunks/framework.4afe7240.js";const p="/assets/AECA9D1EA33647C99D4A25A725166B5B.3e1bec33.png",o="/assets/969AD33FBF214276B7C464AE4082C7FF.f4236be1.png",e="/assets/BA0EA8F56EAE409FB3DEEA8B980C5318.ed1024c8.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ThreeJS.md","filePath":"ThreeJS.md"}'),t={name:"ThreeJS.md"},c=l(`<h2 id="blender" tabindex="-1">Blender <a class="header-anchor" href="#blender" aria-label="Permalink to &quot;Blender&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">模型  地编场景 ue交互开发</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">blender</span></span>
<span class="line"><span style="color:#A6ACCD;">    同时修改多个物体数据</span><span style="color:#676E95;font-style:italic;">//选中需要同时修改的物体,修改需要修改的数值,生效瞬间按住Alt即可</span></span>
<span class="line"><span style="color:#A6ACCD;">    坐标轴</span><span style="color:#676E95;font-style:italic;">//在中间顶部的工具图标按钮中切换坐标轴 </span></span>
<span class="line"><span style="color:#A6ACCD;">    添加新的三维视图</span><span style="color:#676E95;font-style:italic;">//在三维视图跟图层管理的 隔线 也即在三维视图的右上角 鼠标移上去 当鼠标形状变换时即可拖动 添加新的三维视图</span></span>
<span class="line"><span style="color:#A6ACCD;">    视图的切换</span><span style="color:#676E95;font-style:italic;">//通过波浪线进行视图的切换 比如切换为俯视图</span></span>
<span class="line"><span style="color:#A6ACCD;">    按x键删除物体 </span></span>
<span class="line"><span style="color:#A6ACCD;">    有的时候导入模型太小看不见。那么就全选按A键)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">然后放大20_30次n按S</span></span></code></pre></div><h2 id="_3d格式" tabindex="-1">3D格式 <a class="header-anchor" href="#_3d格式" aria-label="Permalink to &quot;3D格式&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">实际上有数百种 3D 文件类型可用，因为每个 3D 软件程序都有自己的文件类型，并针对该特定软件进行了优化。例如，Blender 有 BLEND，AutoCAD 有 DWG，Clo 有 </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">zprj，Browzwear 有 </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bw，仅举几例。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">那如何转换？</span><span style="color:#676E95;font-style:italic;">//用中性（或开源） 3D 文件格式或 FBX。虽然 FBX 是专有格式，但许多软件程序都将其用作交换格式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">中性 3D 格式</span><span style="color:#676E95;font-style:italic;">//如果您将 3D 文件转换太多次，就会出现问题。因此，您仍然需要从一开始就选择正确的中性 3d 格式，以避免不必要的转换</span></span>
<span class="line"><span style="color:#A6ACCD;">    gLTF</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">GLB</span><span style="color:#676E95;font-style:italic;">// gLTF/GLB 是一种中立的开源格式。Khronos Group为 3D 网络、AR、VR、游戏和 3D 广告创建了这种格式。这是第一个真正定义明确的 3D 标准。此文件格式支持几何、材料、纹理、颜色和动画。这包括PBR（基于物理的渲染），因此阴影和光线会显得更加逼真。    gLTF 基于 JSON，因此它将一些数据存储在外部文件中，例如纹理（JPEG 或 PNG）、着色器 (GLSL) 或几何和动画数据 (BIN)。GLB 文件在内部存储所有这些数据。Khronos 小组正在不断改进和更新这种文件格式。它正迅速成为 3D 购物的标准。</span></span>
<span class="line"><span style="color:#A6ACCD;">    FBX</span><span style="color:#676E95;font-style:italic;">// FBX方案是最好的互导方案,FBX 是专有的 3D 文件格式。Kardara 最初开发了这种格式。AutoDesk 随后于 2006 年购买了它们并继续支持 FBX。它广泛应用于电影和视频游戏行业。它支持几何、外观（颜色和纹理）以及动画（骨骼和变形）。FBX 最常用于动画，用作不同程序（如 Maya、3DSMax、AutoCAD、Roman&#39;s CAD 等）之间的交换格式。</span></span>
<span class="line"><span style="color:#A6ACCD;">    OBJ</span><span style="color:#676E95;font-style:italic;">//当用作 ASCII 变体时，OBJ 是一种中性 3D 格式。但是，当用作二进制变体时，它是专有的。3D 打印、图形和 3D 扫描都使用这种文件格式，部分原因是它能够存储几何图形以及颜色和纹理信息。此文件格式将颜色和纹理信息存储在扩展名为 .MTL 的单独文件中。OBJ 不支持动画，但它是最流行的 3D 图形交换格式之一。</span></span>
<span class="line"><span style="color:#A6ACCD;">    USDZ</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">USD</span><span style="color:#676E95;font-style:italic;">// Apple 和 Pixar 开发了 USDZ/USD。它是专有的 3D 文件格式，主要用于 iOS 设备上的增强现实。这种文件格式在 3D 商务中最为流行，因为您可以使用这种格式在 iPhone 上放置和试用 3D 模型。</span></span>
<span class="line"><span style="color:#A6ACCD;">    STL</span><span style="color:#676E95;font-style:italic;">// 这种 3D 文件格式最常用于 3D 打印。它是一种中性的 3D 文件格式。这种文件格式只存储几何信息。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">STEP</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">STP)</span><span style="color:#676E95;font-style:italic;">//工程和国防工业使用 STEP。它是一种中性的 3D 文件格式。这种文件格式可以存储所有几何形状，包括拓扑和几何公差、材料类型、纹理和其他复杂的产品数据。</span></span>
<span class="line"><span style="color:#A6ACCD;">   (</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dae)COLLADA</span><span style="color:#676E95;font-style:italic;">//Khronos 集团创建, 另一种中性 3D 文件格式。此文件格式存储几何、外观、场景和动画。它也是少数支持物理和运动学的格式之一。虽然曾经被大量使用，COLLADA由于未能跟上新技术，随着时间的推移变得越来越不受欢迎。Khronos Group 选择不更新此格式，而是创建了新格式 GLTF。</span></span></code></pre></div><h2 id="总结draco的压缩原理" tabindex="-1">总结Draco的压缩原理 <a class="header-anchor" href="#总结draco的压缩原理" aria-label="Permalink to &quot;总结Draco的压缩原理&quot;">​</a></h2><blockquote><p>Draco支持多种3D图形数据格式，包括点云、三角网络格式和多边形网络格式。</p></blockquote><h3 id="核心思想" tabindex="-1">核心思想 <a class="header-anchor" href="#核心思想" aria-label="Permalink to &quot;核心思想&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;">  去除冗余信息</span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#A6ACCD;">  利用数据本身的特征</span><span style="color:#676E95;font-style:italic;">//例如，如果数据中有连续的相同值，可以将这些值替换为一个值和一个计数器，从而减少数据的大小。哈夫曼编码</span></span></code></pre></div><h3 id="对不同3d图形数据格式的压缩有什么区别" tabindex="-1">对不同3D图形数据格式的压缩有什么区别 <a class="header-anchor" href="#对不同3d图形数据格式的压缩有什么区别" aria-label="Permalink to &quot;对不同3D图形数据格式的压缩有什么区别&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1. 对点云数据，压缩算法通常会对所有点进入顺序，然后利用点之间的相似性进入压缩。来说压缩的效果也比较好。</span></span>
<span class="line"><span style="color:#A6ACCD;">2. 对三角网数据，压缩算法会优先考量与边缘相近的三角形，因为它更有可能共享顶部点和法锥量。缩小效果也会提高。</span></span>
<span class="line"><span style="color:#A6ACCD;">3. 对多边形网络数据，压缩算法会优先考量相关的界面结构，以及界面之间的拓击关系，以方便更好地利用公共网络包容的点、边。数据通用工具有很高的分离率和复杂性，因此压缩算法需要更多的复杂和精细才能取得比较好的压缩效果。</span></span></code></pre></div><h3 id="三种3d图形数据格式的压缩原理" tabindex="-1">三种3D图形数据格式的压缩原理 <a class="header-anchor" href="#三种3d图形数据格式的压缩原理" aria-label="Permalink to &quot;三种3D图形数据格式的压缩原理&quot;">​</a></h3><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1. 点云数据的压缩原理</span></span>
<span class="line"><span style="color:#A6ACCD;">点云数据是一系列的点构成的数据结构，它的压缩通常是基于点的属性和几何形状的局部性，利用点之间的相似性进行压缩。它的原理如下：</span></span>
<span class="line"><span style="color:#A6ACCD;">（1）点云数据的排序：点云数据的每一个点都有3D坐标和颜色信息。在数据压缩前，需要对点进行排序，将相邻的点放在一起。排序算法一般采用哈希或BSP树等方法。</span></span>
<span class="line"><span style="color:#A6ACCD;">（2）点云数据的精简：由于点云数据本身就比较小，一般不需要精简。如果需要精简，则可以基于点之间的距离、几何形状和表面拓扑关系等进行压缩。常用的压缩方法有基于Octree的压缩和基于RANSAC的压缩。</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">2.三角网格数据的压缩原理</span></span>
<span class="line"><span style="color:#A6ACCD;">三角网格是由一系列三角形构成的数据结构，它的压缩需要考虑各个三角形的拓扑关系，利用共享的点和法矢量进行压缩，其原理如下：</span></span>
<span class="line"><span style="color:#A6ACCD;">（1）三角网格的划分：三角网格数据通常被分为许多小块，然后对每个小块进行压缩。</span></span>
<span class="line"><span style="color:#A6ACCD;">（2）表面重建：在压缩前，需要对三角网格进行表面重建。表面重建就是从离散的点云数据中还原表面的拓扑结构。表面重建的方法有Marching Cubes算法和Surface Reconstruction算法等。常用的表面重建工具包括CGAL和PCL等。</span></span>
<span class="line"><span style="color:#A6ACCD;">（3）三角网格的压缩：三角网格数据的压缩可以基于量化误差和哈夫曼编码等原理。常用的压缩方法有LZ77和LZ78等。</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">3.多边形网格数据的压缩原理</span></span>
<span class="line"><span style="color:#A6ACCD;">多边形网格是由一系列多边形（可以是任意形状）构成的数据结构，它的压缩需要考虑各个面之间的拓扑关系。多边形网格数据通常具有很高的分辨率和复杂性，因此压缩算法需要更加复杂和精细才能取得较好的压缩效果。其原理如下：</span></span>
<span class="line"><span style="color:#A6ACCD;">（1）网格数据的分解：将网格数据分解为多个小块，然后分别压缩。</span></span>
<span class="line"><span style="color:#A6ACCD;">（2）网格数据的离散化：对网格数据进行离散化，将连续的几何信息转化为离散的数值。一般来说，离散化是基于小块的局部信息进行的，可以选择基于边长、角度和曲率等进行离散化。</span></span>
<span class="line"><span style="color:#A6ACCD;">（3）网格数据的压缩：压缩算法可以利用网格数据之间的相似性进行压缩，例如共享的点、边和面等。常用的压缩方法有基于哈夫曼编码和基于小波变换的压缩方法等。</span></span></code></pre></div><h2 id="类图" tabindex="-1">类图 <a class="header-anchor" href="#类图" aria-label="Permalink to &quot;类图&quot;">​</a></h2><p><img src="`+p+`" alt=""></p><h2 id="web3d" tabindex="-1">Web3D <a class="header-anchor" href="#web3d" aria-label="Permalink to &quot;Web3D&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">HT for Web 提供了一套独特的 WebGL 层抽象，将 Model–View–</span><span style="color:#82AAFF;">Presenter</span><span style="color:#A6ACCD;"> (MVP) 的设计模型延伸应用到了 3D 图形领域</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//和类似的JavaScript库（如three.js）一样，包含ht的js库文件，即可使用ht js API开发。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//HT还支持导入IFC格式的BIM模型文件生成场景，此外还支持3D Tiles格式的倾斜摄影模型文件, Map Tiles</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//BIM模型文件一般较大较重，不利于直接在浏览器中运行。HT 提供了一项高级功能来轻量化 BIM 模型，从而更快地在 Web 上加载。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//发动机模型是设计师通过 3ds Max 建模，然后导出 obj 与 .MTL文件来定义材质，在 HT 中解析 obj 与 mtl 文件生成 3D 场景中可用的模型</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//该 3d 场景中所有的模型均为线段和六面体搭建，相比较通过 3d Max 建模然后通过 obj 导入来说场景中的三角面会少很多，更加的轻量化</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//HT 的 3d 编辑器进行搭建，场景中的模型有些是通过 HT 建模，有些通过 3dMax 建模，之后导入 HT 中，场景中的地面白色的灯光，是通过 HT 的 3d 编辑器进行地面贴图呈现出来的效果</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//我们建议客户提供卫星图像、设计草图、物业鸟瞰图、CAD图纸、现场照片等给设计师进行建模。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//以前只能靠 Unity3D/Unreal 游戏引擎实现的 3D/VR 项目，现在慢慢能让 Web 开发人员驾驭，更好的与其他 Web 业务系统融合，</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//毕竟用 Unity3D/Unreal 游戏引擎开发整个业务系统是比较反人类，相信 Web 承担越来越重度的渲染呈现应用是不可逆的趋势</span></span></code></pre></div><h2 id="three-js" tabindex="-1">three.js <a class="header-anchor" href="#three-js" aria-label="Permalink to &quot;three.js&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Three</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js中级封装做3D</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 万物皆三角形</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//Babylon.js高级封装做游戏</span></span>
<span class="line"><span style="color:#A6ACCD;">    相机</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">场景</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">网格都是THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Object3D的实例</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">有位置</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">有大小</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">坐标系</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 世界空间和局部空间</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">最小例子：</span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//github1s.com/johnson2heng/GitChat-Three.js/blob/master/01%E7%AC%AC%E4%B8%80%E8%8A%82%20helloWorld/index.html#L50</span></span></code></pre></div><h2 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">调试</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">three</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^0.115.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#676E95;font-style:italic;">//该版本支持vscode快速跳转定义, 最新版不支持..,换版本可能有兼容问题!!</span></span>
<span class="line"><span style="color:#A6ACCD;">    显示帧数</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Stats </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">three/examples/jsm/libs/stats.module</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        stats </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Stats</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(stats</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dom)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    滑块实时调参</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> dat </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">three/examples/jsm/libs/dat.gui.module</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">        2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">const gui </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> dat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GUI</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> datas</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">X</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">Y</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">Z</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//监听项</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> f1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> gui</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addFolder</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">柜子和门</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//分组</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//最简单  </span></span>
<span class="line"><span style="color:#A6ACCD;">                f1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(mesh</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//复杂</span></span>
<span class="line"><span style="color:#A6ACCD;">                f1 </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(datas</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">X</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">name</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">相机X</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onChange</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> mesh</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(datas</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">positionX</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> datas</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">positionY</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> datas</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">positionZ)  )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                f1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    辅助对象 Helper</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、ArrowHelper 箭头辅助对象        </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、AxesHelper </span><span style="color:#82AAFF;">轴坐标系辅助对象</span><span style="color:#A6ACCD;">(常用</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">看原点在哪里)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">、BoxHelper 包围盒辅助对象        </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">、Box3Helper 模拟3维包围盒辅助对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">、CameraHelper </span><span style="color:#82AAFF;">相机视锥体辅助对象</span><span style="color:#A6ACCD;">( camera : Camera被模拟的相机 )        </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">、DirectionalLightHelper 平行光的辅助对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;">、GridHelper 坐标网格辅助对象        </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">、PolarGridHelper 极坐标格辅助对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">、HemisphereLightHelper 半球形光源网格辅助对象        </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">、PlaneHelper 平面辅助对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;">、PointLightHelper 点光源菱形网格辅助对象        </span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">、SpotLightHelper 聚光灯锥形辅助对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">13</span><span style="color:#A6ACCD;">、RectAreaLightHelper 矩形光辅助对象        </span><span style="color:#F78C6C;">14</span><span style="color:#A6ACCD;">、Skeleton</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">helper 骨骼辅助对象</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">15</span><span style="color:#A6ACCD;">、VertexNormalsHelper 顶点的法线辅助对象        </span><span style="color:#F78C6C;">16</span><span style="color:#A6ACCD;">、VertexTangentsHelper 顶点切向量辅助对象</span></span></code></pre></div><h2 id="渲染器" tabindex="-1">渲染器 <a class="header-anchor" href="#渲染器" aria-label="Permalink to &quot;渲染器&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">渲染器</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> renderer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">WebGLRenderer</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//如何用到glsl们?     WebGLRenderer-&gt; initGLContext-&gt; new WebGLPrograms -&gt; ShaderChunk -&gt;./ShaderLib/**.glsl.js</span></span>
<span class="line"><span style="color:#A6ACCD;">    renderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setSize</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerWidth</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHeight)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domElement)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    动画循环调用renderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">(scene</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> camera)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="曲线" tabindex="-1">曲线 <a class="header-anchor" href="#曲线" aria-label="Permalink to &quot;曲线&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">曲线</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">LineCurve3</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 表示由两个3D点定义的线段。在路径动画（如先前示例中看到的盘旋）和粒子系统中常常使用。</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">QuadraticBezierCurve3</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 也称为单曲线轨迹，它由三个3D点（首位点以及一个控制点）构成，平滑地将起始点移动到结束点。 它们可以用于多用场景中，例如在动画时平滑地过渡模型位置。</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CubicBezierCurve3</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 类似与二次贝塞尔曲线，只是由四个点来定义。相比之下它们更加复杂，但也更加灵活，在创建更流畅的曲线上表现出色。比如让相机跟踪模型运动的时候，就可以使用CubicBezierCurve3来实现更自然的效果。</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">SplineCurve3</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 充当平滑路径的功能。它们由任意数量的点构成，三维空间中的坐标点可以随时间变化。常常用于建立弯曲的道路或特定动画中的精灵。</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">EllipseCurve</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 椭圆曲线由中心点、半径、起始角度和弧长角度定义。 它们比其他路径类型更受限制，但如果需要按预期方式围绕中心点旋转</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">移动物体，则非常有用。</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">ArcCurve</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 圆弧曲线表示圆形线段。其由圆心、半径、起始角度和弧度价值组成。这些曲线可以用于创建自定义3D几何体或建筑物，其中一个或多个曲线合并成一个形状。</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CatmullRomCurve3</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 经典样条曲线类型。可以连接任意数量的点，产生平滑、流畅的路径。它们经常用于动画和交互式可视化中。经常用来定义相机运动路径或者某些特效涉及到物体移动的路径</span></span></code></pre></div><h2 id="相机-控制器" tabindex="-1">相机/控制器 <a class="header-anchor" href="#相机-控制器" aria-label="Permalink to &quot;相机/控制器&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">相机</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">控制器</span></span>
<span class="line"><span style="color:#A6ACCD;">    target</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">lookAt</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">上下左右近远</span><span style="color:#89DDFF;">/</span><span style="color:#82AAFF;">updateProjectionMatrix</span><span style="color:#A6ACCD;">()更新相机</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">fov垂直视野角度</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">aspect宽高比</span></span>
<span class="line"><span style="color:#A6ACCD;">        camera</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">target </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mesh</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//或者 camera.lookAt(mesh.position);</span></span>
<span class="line"><span style="color:#A6ACCD;">    不断地盯住</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">跟踪一个目标</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> targetPosition </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vector3</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">获取变动目标方法1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> targetMesh</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWorldPosition</span><span style="color:#A6ACCD;">(targetPosition)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//存位置进去targetPosition</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">获取变动目标方法2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Curve</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPointAt</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">1的数</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">targetPosition) </span><span style="color:#676E95;font-style:italic;">//返回曲线上相对于曲线总长度的位置，就好像它是一条延伸成直线的线, 存位置进去targetPosition</span></span>
<span class="line"><span style="color:#A6ACCD;">        turretPivot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">lookAt</span><span style="color:#A6ACCD;">(targetPosition)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//盯住targetPosition    </span></span>
<span class="line"><span style="color:#A6ACCD;">    PerspectiveCamera透视</span><span style="color:#676E95;font-style:italic;">//模拟人眼,近大远小</span></span>
<span class="line"><span style="color:#A6ACCD;">    OrthographicCamera正交</span><span style="color:#676E95;font-style:italic;">//类似某一方向来个截图</span></span>
<span class="line"><span style="color:#A6ACCD;">    相机插件</span><span style="color:#676E95;font-style:italic;">//https://github.com/mrdoob/three.js/blob/master/examples/js/controls/OrbitControls.js</span></span>
<span class="line"><span style="color:#A6ACCD;">        OrbitControls 轨道控制器</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">让相机可以放近放远</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 可以360°绕着物体看</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 方便调试</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">没有它鼠标操作什么反应都没有</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        DeviceOrientationControls 陀螺仪相机控制器，实现移动端陀螺仪控制相机。</span></span>
<span class="line"><span style="color:#A6ACCD;">        DragControls 控制鼠标拖拽移动物体的功能。</span></span>
<span class="line"><span style="color:#A6ACCD;">        EditorControls 实现相机的旋转，缩放，平移功能，相对于OrbitControls的功能差不少，不建议使用</span></span>
<span class="line"><span style="color:#A6ACCD;">        FirstPersonControls 第一视角相机控制器</span></span>
<span class="line"><span style="color:#A6ACCD;">        FlyControls 飞行相机控制器        </span></span>
<span class="line"><span style="color:#A6ACCD;">        OrthographicTrackballControls 正交轨迹球控制器 正交相机使用的轨迹球控制器</span></span>
<span class="line"><span style="color:#A6ACCD;">        TrackballControls 轨迹球控制器 透视相机使用的轨迹球控制器</span></span>
<span class="line"><span style="color:#A6ACCD;">        PointerLockControls 鼠标锁定相机控制器</span></span>
<span class="line"><span style="color:#A6ACCD;">        TransformControls 控制模型位置，缩放，旋转的控制器</span></span>
<span class="line"><span style="color:#A6ACCD;">        VRControls 实现VR双屏相机控制器</span></span></code></pre></div><h2 id="layer-scene-object" tabindex="-1">Layer/scene/Object <a class="header-anchor" href="#layer-scene-object" aria-label="Permalink to &quot;Layer/scene/Object&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Layer</span></span>
<span class="line"><span style="color:#A6ACCD;">    配合camera</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">layers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#82AAFF;">分组渲染</span><span style="color:#A6ACCD;">(一组用composer渲染</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">一组正常渲染)或分组隐藏</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">默认的图层都是0和相机对象一样，都会被渲染到画布上，如果把其中一个网格模型的图层值设置为非0，比如3，因为和相机对象的图层0不一样，就不会被渲染出来。</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    layers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//删除图层对象已有的所有对应关系，增加与参数指定的图层的对应关系。.set()方法的参数可以理解为二进制中右侧1向左平移的位数，得到的值赋值给图层对象的.mask属性</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//比如设置.set(0)，.mask属性值是1，设置.set(1)，.mask属性值是2，设置.set(2)，.mask属性值是3，设置.set(2)，.mask属性值是4，设置.set(4)，.mask属性值是8</span></span>
<span class="line"><span style="color:#A6ACCD;">    layers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enable</span><span style="color:#A6ACCD;">(layer : Integer) </span><span style="color:#676E95;font-style:italic;">//增加图层对象与参数指定图层的对应关系。 layer - 一个 0 - 31 的整数。Layers 对象为 Object3D 分配 1个到 32 个图层,默认的，所有 Object3D 对象都存储在第 0 个图层上</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">增加图层对象与参数指定图层的对应关系。</span></span>
<span class="line"><span style="color:#82AAFF;">网格</span><span style="color:#A6ACCD;">(Mesh)代表物体的位置和方向</span></span>
<span class="line"><span style="color:#A6ACCD;">    position</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">scale</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">rotation</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">查找某个具体的模型</span></span>
<span class="line"><span style="color:#A6ACCD;">    1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">物体</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">眼睛</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2.1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scene</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getObjectByName</span><span style="color:#A6ACCD;"> ( </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">左腿</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2.2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">scene</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">traverse</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Group</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="材质" tabindex="-1">材质 <a class="header-anchor" href="#材质" aria-label="Permalink to &quot;材质&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">材质</span><span style="color:#A6ACCD;">(Material):</span></span>
<span class="line"><span style="color:#A6ACCD;">    color</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">map纹理</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">depthTest</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">被挡住还能看到</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">normalMap法线贴图是一种模拟凹凸处光照效果的技术</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">是凸凹贴图的一种实现</span></span>
<span class="line"><span style="color:#A6ACCD;">    MeshBasicMaterial不会受到光的影响</span><span style="color:#676E95;font-style:italic;">//由于MeshBasicMaterial不使用光照，如果物体显示不出来,材质设为它能显示,那物体就是出现在材质或光照了</span></span>
<span class="line"><span style="color:#A6ACCD;">    MeshPhongMaterial会受灯光影响的高光材质</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">油漆面，瓷瓦等光滑物体</span></span>
<span class="line"><span style="color:#A6ACCD;">        MeshToonMaterial是MeshPhongMaterial卡通着色的扩展</span></span>
<span class="line"><span style="color:#A6ACCD;">    MeshNormalMaterial法向材质</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">这种材质会根据面的方向不同自动改变颜色</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">不会受到光的影响</span></span>
<span class="line"><span style="color:#A6ACCD;">    MeshLambertMaterial 兰伯特材质，不会出现高光</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 粗糙的材质的物体，比如木头或者石头</span></span>
<span class="line"><span style="color:#A6ACCD;">    MeshDepthMaterial材质的物体，其外观不是由光照或某个材质属性决定的，二十有物体到摄像机的距离决定的。可以将这种材质与其他材质结合使用，从而很容易地创建出逐渐消失的效果</span></span>
<span class="line"><span style="color:#A6ACCD;">    Points </span><span style="color:#676E95;font-style:italic;">//默认不受光照影响</span></span>
<span class="line"><span style="color:#A6ACCD;">    RawShaderMaterial与ShaderMaterial类似，不同之处在于内置的uniforms和attributes的定义不会自动添加到GLSL shader代码中</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//注意使用物理材质的时候，一般需要设置环境贴图.envMap</span></span>
<span class="line"><span style="color:#A6ACCD;">    MeshStandardMaterial一种基于物理的标准材质</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">提供了比MeshLambertMaterial或MeshPhongMaterial更精确和逼真的结果，代价是计算成本更高</span></span>
<span class="line"><span style="color:#A6ACCD;">        MeshPhysicalMaterial是MeshStandardMaterial的扩展，MeshPhysicalMaterial可以更好地控制反射率</span></span>
<span class="line"><span style="color:#A6ACCD;">    MeshMatcapMaterial不对灯光作出反应</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">灯光和阴影是通过MatCap和Map贴上去的</span></span>
<span class="line"><span style="color:#A6ACCD;">    线条 </span><span style="color:#676E95;font-style:italic;">//在上一节我们讲几何体时，没有讲解如何画直线，是由于直线需要单独的材质进行实现</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">LineBasicMaterial</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">0x00ff00</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//线条材质</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">LineDashedMaterial</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">0xff0000</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//虚线 ,需要重新计算位置才能显示出虚线line.computeLineDistances()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">基本属性和方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    needsUpdate</span><span style="color:#676E95;font-style:italic;">//如果修改了Material内的内容，需要将此属性设置为true，然后Three.js会在下一帧里面将修改内容同步到WebGL的显存内</span></span>
<span class="line"><span style="color:#A6ACCD;">    map</span><span style="color:#676E95;font-style:italic;">//此属性可以配置当前材质的纹理贴图，是一个THREE.Texture对象, material.map = texture</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">纹理的重复方式</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> texture </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">TextureLoader</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">( </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">textures/water.jpg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        texture</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">wrapS </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RepeatWrapping</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//设置水平方向无限循环</span></span>
<span class="line"><span style="color:#A6ACCD;">        texture</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">wrapT </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RepeatWrapping</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//设置垂直方向无限循环</span></span>
<span class="line"><span style="color:#A6ACCD;">        texture</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">repeat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">( </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//水平方向和垂直方向都重复四次</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//UV坐标将被用于纹理映射</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">颜色</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Color</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> )</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//&quot;rgb(255, 0, 0)&quot; 0xff0000 &quot;#ff0000&quot;  &quot;rgb(100%, 0%, 0%)&quot;       &#39;skyblue&#39;    &quot;hsl(0, 100%, 50%)&quot;</span></span></code></pre></div><h2 id="scene的背景-hdr文件" tabindex="-1">scene的背景/.hdr文件 <a class="header-anchor" href="#scene的背景-hdr文件" aria-label="Permalink to &quot;scene的背景/.hdr文件&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hdr文件</span></span>
<span class="line"><span style="color:#A6ACCD;">    HDRI文件是一种文件，</span><span style="color:#89DDFF;">*.</span><span style="color:#A6ACCD;">hdr或</span><span style="color:#89DDFF;">*.</span><span style="color:#A6ACCD;">tif格式</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">记录了图片环境中的照明信息，因此我们可以使用这种图象来“照亮”场景</span></span>
<span class="line"><span style="color:#A6ACCD;">        可以用作scene的背景</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        scene</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">background </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">RGBELoader</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">	        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPath</span><span style="color:#A6ACCD;">( </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">textures/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> )</span></span>
<span class="line"><span style="color:#A6ACCD;">	        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">load</span><span style="color:#A6ACCD;">( </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">royal_esplanade_1k.hdr</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">			        </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">hdrEquirect</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mapping</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">EquirectangularReflectionMapping</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">				 )</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="精灵sprite-粒子points" tabindex="-1">精灵Sprite/粒子points <a class="header-anchor" href="#精灵sprite-粒子points" aria-label="Permalink to &quot;精灵Sprite/粒子points&quot;">​</a></h2><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">精灵Sprite //类似cesium的广告牌</span></span>
<span class="line"><span style="color:#A6ACCD;">粒子points //和精灵的效果是一样的，粒子的作用就是为解决很多精灵而出现的，我们可以使用粒子去模型数量很多的效果，比如下雨，下雪等</span></span></code></pre></div><h2 id="buffergeometry-高性能-和geometry-低性能" tabindex="-1">BufferGeometry(高性能)和Geometry(低性能) <a class="header-anchor" href="#buffergeometry-高性能-和geometry-低性能" aria-label="Permalink to &quot;BufferGeometry(高性能)和Geometry(低性能)&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">BufferGeometry</span><span style="color:#A6ACCD;">(高性能)</span><span style="color:#82AAFF;">和Geometry</span><span style="color:#A6ACCD;">(低性能)可通过自己的fromXX方法互转</span><span style="color:#676E95;font-style:italic;">//BufferGeometry存储的都是一些原始的数据，性能比Geometry的性能高，很适合存储一些放入场景内不需要再额外操作的模型</span></span>
<span class="line"><span style="color:#A6ACCD;">    BoxBufferGeometry 正方体</span></span>
<span class="line"><span style="color:#A6ACCD;">    CylinderBufferGeometry 圆柱</span></span>
<span class="line"><span style="color:#A6ACCD;">    SphereBufferGeometry 球</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    ConeGeometry 圆锥</span></span>
<span class="line"><span style="color:#A6ACCD;">    PlaneGeometry 平面</span></span>
<span class="line"><span style="color:#A6ACCD;">    TorusGeometry 圆环</span></span>
<span class="line"><span style="color:#A6ACCD;">    TorusKnotGeometry 圆环结几何</span></span>
<span class="line"><span style="color:#A6ACCD;">    ExtrudeGeometry拉伸成型</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 利用圆形配合直线轨迹线生成圆柱体</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">配合曲线轨迹生成弯曲的水管等</span></span>
<span class="line"><span style="color:#FFCB6B;">Geometry和BufferGeomety内置了一些常用的方法</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">center</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">// 此方法为居中方法，可以根据边界框居中几何图形</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">computeBoundingBox</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// 此方法可以可以计算几何的边界框，方法调用后，会更新Geometry.boundingBox属性，我们可以通过Geometry.boundingBox属性获取到一个包围几何体的立方体的每个轴向的最大值和最小值</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">dispose</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">// 将几何体从内存中删除，这个方法必须记得使用。如果频繁的删除模型，一定要记得将几何体从内存中删除掉。</span></span></code></pre></div><h2 id="光源-阴影" tabindex="-1">光源/阴影 <a class="header-anchor" href="#光源-阴影" aria-label="Permalink to &quot;光源/阴影&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">光源</span></span>
<span class="line"><span style="color:#A6ACCD;">    intensity</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">color</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">target朝向位置</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">shadow</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">castShadow是否接收投影</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">DirectionalLight</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> 阳光</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">DirectionalLight</span><span style="color:#A6ACCD;">( </span><span style="color:#F78C6C;">0xffffff</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.5</span><span style="color:#A6ACCD;"> )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//=&gt; 阳光</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shadow</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">camera</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">上下左右近远 </span><span style="color:#676E95;font-style:italic;">//限制阴影范围, 提高性能</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shadow</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mapSize</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">height</span><span style="color:#676E95;font-style:italic;">//阴影密度</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">PointLight</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> 灯泡</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">RectAreaLight</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> 条形照明或明亮的窗户</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;font-style:italic;">SpotLight</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> 聚光灯</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    AmbientLight从各个方向向每个对象添加恒定数量的光。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AmbientLight</span><span style="color:#A6ACCD;">( </span><span style="color:#F78C6C;">0x404040</span><span style="color:#A6ACCD;"> )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 创建一个灰色的环境光 </span></span>
<span class="line"><span style="color:#A6ACCD;">    HemisphereLight天空颜色和地面颜色之间的渐变 ，可用于模拟许多常见的照明场景。</span><span style="color:#676E95;font-style:italic;">//环境光会影响场景中的所有对象。因此，无需为场景添加多个环境光</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    阴影</span></span>
<span class="line"><span style="color:#A6ACCD;">        1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shadowMap</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">enabled </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">默认情况下，阴影是禁用的</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">产生阴影的物体</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">castShadow </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">接收阴影的物体物体</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">recieveShadow</span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//接收阴影 8:47-12:47</span></span></code></pre></div><h2 id="动画" tabindex="-1">动画 <a class="header-anchor" href="#动画" aria-label="Permalink to &quot;动画&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">动画</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">animate</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">requestAnimationFrame</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">animate</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//循环调用函数</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//改变物体位置</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">renderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">( </span><span style="color:#A6ACCD;">scene</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">camera</span><span style="color:#F07178;"> )</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//渲染界面</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">animate</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    变型动画 </span><span style="color:#676E95;font-style:italic;">//修改模型顶点的位置  morph targets的中文翻译是&quot;形变目标&quot;或&quot;融合形态&quot;。</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//在使用morph targets时，我们可以通过将基础网格和目标网格进行插值来得到一个中间状态的几何体。通过不断改变插值系数，我们可以平滑地将基础网格变形为任何一个目标网格，从而实现形变动画。</span></span>
<span class="line"><span style="color:#A6ACCD;">            geometry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">morphTargets[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">t1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">vertices</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">动画目标geometry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vertices</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            geometry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">computedMorphNormals</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//通知开启动画</span></span>
<span class="line"><span style="color:#A6ACCD;">            mesh </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Mesh</span><span style="color:#A6ACCD;">(geometry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">material)</span></span>
<span class="line"><span style="color:#A6ACCD;">            mesh</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">morphTargetsInfluences[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">1之间的数</span><span style="color:#676E95;font-style:italic;">//1则已经变化成了 目标动画目标geometry 了</span></span>
<span class="line"><span style="color:#A6ACCD;">    骨骼动画    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">通过导入模型显示动画 </span><span style="color:#676E95;font-style:italic;">//https://github.com/johnson2heng/GitChat-Three.js</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">模型动画组成</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        KeyframeTrack是基类，每种数据类型都有一个子类：</span></span>
<span class="line"><span style="color:#A6ACCD;">            NumberKeyframeTrack某秒数值如透明度</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">VectorKeyframeTrack某秒位置</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">QuaternionKeyframeTrack</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">BooleanKeyframeTrack</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">StringKeyframeTrack</span></span>
<span class="line"><span style="color:#A6ACCD;">        动画片段（AnimationClips）        </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//在我们成功导入模型以后，如果模型拥有相关的动画属性，会在返回的模型数据中产生一个名为animations的数组，数组的每一个子项都是一个AnimationClips对象</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">eg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">第一个AnimationClips对象有可能保存的是人物走动的动画，第二个AnimationClips对象用于跳跃，第三个用于攻击动画等等。</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">对象内部四个属性</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                name当前的动画的一个名称 </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> uuid一个不会重复的uuid </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> duration当前动画一个循环所需要的时间 </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> tracks轨迹当前动画每一次切换动作所需要的数据</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">        动画混合器（Animation Mixer）</span><span style="color:#676E95;font-style:italic;">//播放权力在动画混合器的手中。还可以同时控制几个动画，混合它们或者合并它们。        </span></span>
<span class="line"><span style="color:#A6ACCD;">        动画播放器（Animation Actions）</span><span style="color:#676E95;font-style:italic;">//动画播放器，暂停或者停止，加快或减慢, 是否使用淡入淡出效果。        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        动画对象组（Animation Object Groups）</span></span>
<span class="line"><span style="color:#A6ACCD;">            如果你希望一组模型对象共享当前的动画，我们可以使用动画对象组来实现</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">导入方法</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        变形动画</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//并将材质的morphTargets设置为ture，可以使用变形动画</span></span>
<span class="line"><span style="color:#A6ACCD;">            mesh </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Mesh</span><span style="color:#A6ACCD;">(geometry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">MeshLambertMaterial</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">morphTargets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//然后我们创建了一个针对于该模型的混合器        </span></span>
<span class="line"><span style="color:#A6ACCD;">            mixer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AnimationMixer</span><span style="color:#A6ACCD;">(mesh)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//接着使用变形目标数据创建一个动画片段</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> clip </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">AnimationClip</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">CreateFromMorphTargetSequence</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">gallop</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> geometry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">morphTargets</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> clip </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">AnimationClip</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">slowmove</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> length</span><span style="color:#89DDFF;">=-</span><span style="color:#A6ACCD;">1自动计算tracks长度</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">VectorKeyframeTrack</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.position</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> times</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> values)])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//使用混合器和动画片段创建一个动画播放器来播放：</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> action </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mixer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clipAction</span><span style="color:#A6ACCD;">(clip)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//创建动画播放器,   循环mixer.update(delta)</span></span>
<span class="line"><span style="color:#A6ACCD;">            action</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDuration</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//设置当前动画一秒为一个周期</span></span>
<span class="line"><span style="color:#A6ACCD;">            action</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">play</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//设置当前动画播放</span></span>
<span class="line"><span style="color:#A6ACCD;">        骨骼动画</span></span>
<span class="line"><span style="color:#A6ACCD;">            mixer </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">AnimationMixer</span><span style="color:#A6ACCD;">(obj)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//通过当前模型创建混合器</span></span>
<span class="line"><span style="color:#A6ACCD;">            action </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> mixer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clipAction</span><span style="color:#A6ACCD;">(gltf</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">animations[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//通过动画数据创建播放器</span></span>
<span class="line"><span style="color:#A6ACCD;">            action</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">play</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//直接调用播放器的播放事件让动画播放：</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//最后，我们还是需要在循环渲染中更新混合器，并将每一帧渲染的间隔时间传入        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">control</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">clock</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getDelta</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">mixer</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">mixer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span><span style="color:#676E95;font-style:italic;">////由于模型导入是异步的，所以我们再模型没有加载完之前是获取不到混合器的</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">renderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">scene</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">camera</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="场景交互" tabindex="-1">场景交互 <a class="header-anchor" href="#场景交互" aria-label="Permalink to &quot;场景交互&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">场景交互</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Raycaster</span><span style="color:#A6ACCD;">( origin</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> direction</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> near</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> far )</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//光线投射主要用于物体选择、碰撞检测以及图像成像等方面</span></span>
<span class="line"><span style="color:#A6ACCD;">        origin </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 光线投射的原点矢量。</span></span>
<span class="line"><span style="color:#A6ACCD;">        direction </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 光线投射的方向矢量，应该是被归一化的。</span></span>
<span class="line"><span style="color:#A6ACCD;">        near </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 投射近点，用来限定返回比near要远的结果。near不能为负数。缺省为0。</span></span>
<span class="line"><span style="color:#A6ACCD;">        far </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> 投射远点，用来限定返回比far要近的结果。far不能比near要小。缺省为无穷大。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">set（origin，direction）</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setFromCamera</span><span style="color:#A6ACCD;"> ( coords</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> camera )</span><span style="color:#676E95;font-style:italic;">//使用当前相机 和 界面的2d坐标 设置射线的位置和方向</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">intersectObject</span><span style="color:#A6ACCD;"> ( object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> recursive</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> optionalTarget)</span><span style="color:#676E95;font-style:italic;">//[ { distance, point, face, faceIndex相交的面的索引, indices组成相交面的顶点索引, object }, ... ]</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">intersectObjects</span><span style="color:#A6ACCD;"> ( array</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> recursive</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> optionalTarget)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">实现一个模型的点击事件</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//首先，我们通过点击事件回调的event获取到点击的位置：</span></span>
<span class="line"><span style="color:#A6ACCD;">        mouse</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ( event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientX </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerWidth ) </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        mouse</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> ( event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientY </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHeight ) </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        默认没有经过矩阵转换过的显示区域的宽和高分别是2，即中心点也是webgl场景的坐标原点，</span><span style="color:#82AAFF;">左上角的坐标是</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">)， </span><span style="color:#82AAFF;">右下角的坐标轴是</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1.0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.0</span><span style="color:#A6ACCD;">)。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//点击点的位置 -&gt; 没有矩阵转换过的平面坐标 -&gt; 场景内的原始坐标</span></span>
<span class="line"><span style="color:#A6ACCD;">        如果webgl的渲染区域不是占满窗口状态，我们还需要获取到显示区域距离窗口左上角的偏移量，再计算位置：    </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//通过dom的getBoundingClientRect方法获得当前显示区域距离左上角的偏移量</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> left </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBoundingClientRect</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> top </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBoundingClientRect</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">top</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//根据浏览器的设备类型来获取到当前点击的位置</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> clientX </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> dop</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">browserRedirect</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientX </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> left </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">touches[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientX </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> left</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> clientY </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> dop</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">browserRedirect</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientY </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> top </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">touches[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientY </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> top</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//计算出场景内的原始坐标</span></span>
<span class="line"><span style="color:#A6ACCD;">            mouse</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (clientX </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">offsetWidth) </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            mouse</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">(clientY </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domElement</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">offsetHeight) </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//获取到坐标以后，我们需要使用射线的setFromCamera()方法配合场景坐标和相机更新射线的位置：</span></span>
<span class="line"><span style="color:#A6ACCD;">    raycaster</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setFromCamera</span><span style="color:#A6ACCD;">( mouse</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> camera )</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//coords,camera     </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> intersects </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> raycaster</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">intersectObjects</span><span style="color:#A6ACCD;">( scene</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children )</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//if(intersects.length &gt; 0)    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 这里在提醒一句，很多小伙伴有时候发现点击了以后射线无法获取到相交的物体，那是因为为了节约性能，我们需要设置第二个参数为true，让Three.js遍历模型所有的子类去判断是否相交。</span></span></code></pre></div><h2 id="实现一个简单的框选案例" tabindex="-1">实现一个简单的框选案例 <a class="header-anchor" href="#实现一个简单的框选案例" aria-label="Permalink to &quot;实现一个简单的框选案例&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">实现一个简单的框选案例</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//在鼠标按下时，记录鼠标按下时的场景坐标：</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//获取到显示区域距离窗口左上角的偏移量</span></span>
<span class="line"><span style="color:#A6ACCD;">        domClient</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBoundingClientRect</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        domClient</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> renderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">domElement</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getBoundingClientRect</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">top</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//计算出当前鼠标距离显示区域左上角的距离</span></span>
<span class="line"><span style="color:#A6ACCD;">        down</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientX </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> domClient</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        down</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientY </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> domClient</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//使用之前学习到的box对象方法来计算出模型的包围盒中心位置，这样对多个复杂模型比较管用：    </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> group</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">box</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Box3</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">box</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">expandByObject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">group</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">                  </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//获取到平面的坐标</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vec3</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Vector3</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">box</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getCenter</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vec3</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vec</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vec3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">project</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">camera</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">modelsList</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    component</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">group</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                    position</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">half</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">width</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">half</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">width</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">   y</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">vec</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">half</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">height</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">half</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">height</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">                    normalMaterial</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">group</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">material</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//如果简单的几何体的话，可以直接使用mesh的位置来计算。通过相机将世界坐标的位置转换为平面坐标，并将模型放到一个数组内以便后期使用 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mousemove</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> movefun</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//鼠标移动事件是为了判断每个模型是否处于框内</span></span>
<span class="line"><span style="color:#A6ACCD;">    document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mouseup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> upfun</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//鼠标抬起事件将绑定的事件清除</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//在鼠标移动事件中，我们计算出当前四个边的位置，并且循环判断哪些模型的位置处于框内，处于框内的模型的材质将被修改为框选材质：</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> modelsList</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">position</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">modelsList</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//判断当前位置是否处于框内</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">min</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">max</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">min</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">position</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">max</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">modelsList</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">material</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">material</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">modelsList</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">material</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">modelsList</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">normalMaterial</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//在最后的鼠标抬起事件内，将框选框隐藏，并将所有材质修改为默认材质：</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">upfun</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//清除事件</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">div</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mousemove</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">movefun</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mouseup</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">upfun</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//将所有的模型修改为当前默认的材质</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">modelsList</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">modelsList</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">material</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">modelsList</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">normalMaterial</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="effectcomposer效果合成器" tabindex="-1">EffectComposer效果合成器 <a class="header-anchor" href="#effectcomposer效果合成器" aria-label="Permalink to &quot;EffectComposer效果合成器&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">EffectComposer（效果合成器）post</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">processing</span><span style="color:#676E95;font-style:italic;">//应用一个或多个图形效果，例如景深、发光、胶片微粒或是各种类型的抗锯齿</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//https://r105.threejsfundamentals.org/threejs/lessons/resources/images/threejs-postprocessing.svg</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">EffectComposer</span><span style="color:#A6ACCD;">(renderer)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addPass</span><span style="color:#A6ACCD;">( </span></span>
<span class="line"><span style="color:#A6ACCD;">                            </span><span style="color:#82AAFF;">RenderPass</span><span style="color:#A6ACCD;">(scene</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">camera) </span></span>
<span class="line"><span style="color:#A6ACCD;">                           )</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">                           </span><span style="color:#676E95;font-style:italic;">//bloomComposer用于生成辉光材质，finalComposer用于渲染整个场景</span></span>
<span class="line"><span style="color:#89DDFF;">                           </span><span style="color:#676E95;font-style:italic;">//为了区分辉光对象和非辉光对象，我们需要改变其图层编号。将需要变为辉光的对象的图层编号设为1，其余默认为0</span></span>
<span class="line"><span style="color:#89DDFF;">                           </span><span style="color:#676E95;font-style:italic;">//最后，我们把不需要辉光的部分转为黑色材质，使其辉光效果失效</span></span>
<span class="line"><span style="color:#89DDFF;">                           </span><span style="color:#676E95;font-style:italic;">//设置一个还原材质的方法，将转为黑色材质的物体进行还原</span></span>
<span class="line"><span style="color:#89DDFF;">                           </span><span style="color:#676E95;font-style:italic;">//在render方法中先转换材质，生成辉光效果，然后还原材质，最后渲染整个场景，从而实现部分辉光的效果</span></span>
<span class="line"><span style="color:#A6ACCD;">        renderToScreen</span><span style="color:#676E95;font-style:italic;">//是否将当前的内容渲染到画布上。通常来说你需要在你最后添加的pass设置这一项为true，true結果將會輸出到屏幕上</span></span>
<span class="line"><span style="color:#A6ACCD;">    Z</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">buffer的值越大，物体距离就越远</span></span>
<span class="line"><span style="color:#A6ACCD;">    renderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clearDepth</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">//Depth Buffer深度缓存, 物体之间总会存在前后的遮挡关系, Z-buffer的值越大，物体距离就越远</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">ShaderPass</span><span style="color:#A6ACCD;">( CopyShader ) </span><span style="color:#676E95;font-style:italic;">//CopyShader是为了能将结果输出，普通的通道一般都是不能输出的，要靠CopyShader进行输出</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//postprocessing pipeline在 2 个屏幕外缓冲区之间来回渲染。最后一遍完成后，需要将结果复制到实际屏幕上。这就是 CopyShader 所做的。</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//可以想象，您可以构建您的通道，以便最终通道直接渲染到可见屏幕，但在实践中，这会引入一些复杂性。</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">RenderPass根据scene和camera渲染出一个场景，和普通的webGLRenderer一样</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">简单说就是RenderPass用来生成第一张原始图，用来传给后面通道使用，所以一般RenderPass会作为第一个通道</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">BloomPass增强场景中的亮度</span><span style="color:#89DDFF;">,</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">必须renderer.autoClear = false;才能生效!!!</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OutlinePass其可为边缘添加发光效果</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//menGroup.layers.enable(1)无效, menMesh.layers.enable(1)才有效,因为raycaster 只与具有几何形状的东西相交</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">UnrealBloomPass通道可以在场景的物体中产生泛光</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">辉光效果</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FilmPass使用扫描线和失真来模拟电视屏幕效果</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">GlitchPass随机的在屏幕上显示电脉冲</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">MaskPass添加掩码，后续通道只会影响掩码区域，取消掩码需要加入THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ClearMaskPass通道</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//this.renderer.autoClear = false; // 要使用高级效果组合器MaskPass，必须设置为false</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TexturePass保存当前通道的输出，作为后续使用</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ShaderPass自定义的通道，一般在构造函数中指定相关的参数即可    </span></span>
<span class="line"><span style="color:#A6ACCD;">        THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FXAAShader:添加抗锯齿的效果</span></span>
<span class="line"><span style="color:#A6ACCD;">    THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">AdaptiveToneMappingPass:自适应色调映射</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">由模型生成模型边缘线框</span></span>
<span class="line"><span style="color:#A6ACCD;">    遍历模型的子obj们 </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">用一个group存生成的LineSegments们</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> edges </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">EdgesGeometry</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">geometry)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> lineBasematerial </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">LineBasicMaterial</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Color</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0.1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0.3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">side</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FrontSide</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">linecap</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">round</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">linejoin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">round</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> line </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> THREE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">LineSegments</span><span style="color:#A6ACCD;">(edges</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> lineBasematerial)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">性能</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    material</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">geometry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispose</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//删除材质/几何体</span></span>
<span class="line"><span style="color:#A6ACCD;">    使用merge方法合并不需要单独操作的模型</span></span>
<span class="line"><span style="color:#A6ACCD;">        几何体mesh</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">updateMatrix</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//提取位置.position、缩放.scale和四元数.quaternion的属性值 转化为 变换矩阵设置本地矩阵属性.matrix        </span></span>
<span class="line"><span style="color:#A6ACCD;">        geometry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">merge</span><span style="color:#A6ACCD;">(何体mesh</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">geometry</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 几何体mesh</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">matrix)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//将几何体合并</span></span>
<span class="line"><span style="color:#A6ACCD;">    在循环渲染中避免使用更新：</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//几何体：</span></span>
<span class="line"><span style="color:#A6ACCD;">        geometry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">verticesNeedUpdate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//顶点发生了修改</span></span>
<span class="line"><span style="color:#A6ACCD;">        geometry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">elementsNeedUpdate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//面发生了修改</span></span>
<span class="line"><span style="color:#A6ACCD;">        geometry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">morphTargetsNeedUpdate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//变形目标发生了修改</span></span>
<span class="line"><span style="color:#A6ACCD;">        geometry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">uvsNeedUpdate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//uv映射发生了修改</span></span>
<span class="line"><span style="color:#A6ACCD;">        geometry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">normalsNeedUpdate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//法向发生了修改</span></span>
<span class="line"><span style="color:#A6ACCD;">        geometry</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">colorsNeedUpdate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//顶点颜色发生的修改</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//材质</span></span>
<span class="line"><span style="color:#A6ACCD;">        material</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">needsUpdate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//纹理</span></span>
<span class="line"><span style="color:#A6ACCD;">        texture</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">needsUpdate </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="坐标图" tabindex="-1">坐标图 <a class="header-anchor" href="#坐标图" aria-label="Permalink to &quot;坐标图&quot;">​</a></h2><p><img src="`+o+'" alt=""></p><h2 id="加载器" tabindex="-1">加载器 <a class="header-anchor" href="#加载器" aria-label="Permalink to &quot;加载器&quot;">​</a></h2><p><img src="'+e+`" alt=""></p><h2 id="模型加载-重点" tabindex="-1">模型加载(重点) <a class="header-anchor" href="#模型加载-重点" aria-label="Permalink to &quot;模型加载(重点)&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">模型加载</span><span style="color:#A6ACCD;">(重点)</span><span style="color:#676E95;font-style:italic;">//常用的3d格式</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">问题</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 导入到场景内的模型无法查看，而且也没有报错</span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">        尝试放大一千倍或者缩小一千倍来查看效果</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 将模型居中到相机照射的焦点位置查看</span></span>
<span class="line"><span style="color:#A6ACCD;">    1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">GLTFLoader</span><span style="color:#A6ACCD;">(官方推荐)</span><span style="color:#676E95;font-style:italic;">//const loadedData = await loader.loadAsync(&#39;path/to/yourModel.glb&#39;);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//由于glTF专注于传输，因此它的传输和解析的速度都很快。glTF模型功能包括：网格，材质，纹理，蒙皮，骨骼，变形动画，骨骼动画，灯光以及相机。</span></span>
<span class="line"><span style="color:#A6ACCD;">        在传输到前端的过程中，通常可能传输gltf文件、附属的</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bin文件（存储二进制数据）、图片纹理文件（</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">jpg或</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">png格式）等</span></span>
<span class="line"><span style="color:#A6ACCD;">        glTF 导出格式有两种后缀格式可供选择：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.gltf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> 和 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.glb</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.bin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> 文件，以二进制流的方式存储顶点坐标、顶点法线坐标和贴图纹理坐标、贴图信息等模型基本数据信息；        </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.gltf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> 文件，本质是 json 文件，记录对bin文件中模型顶点基本数据的索引、材质索引等信息，方便编辑，可读性较好；  </span></span>
<span class="line"><span style="color:#A6ACCD;">                glTF</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Embedded是一种使用JSON格式存储模型数据的glTF版本，其中模型中的所有数据都是直接嵌入文件中的。</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//               </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.glb</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  文件格式只导出一个 </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">glb 文件，将所有数据都输出为二进制流，通常来说会更小一点，若不关心模型内的具体数据可直接选择此类型。</span></span>
<span class="line"><span style="color:#A6ACCD;">                glTF</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Binary是另一种glTF版本，其使用二进制文件存储模型数据，</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//Draco 是 Google 推出的一个用于 3D 模型压缩和解压缩的工具库    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//如果当前的首选不是glTF格式，那么推荐Three.js定期维护并且流行的格式FBX，OBJ或者COLLADA格式，Three.js也有自己独有的JSON格式</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ObjectLoader</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(obj) </span><span style="color:#676E95;font-style:italic;">//加载.json格式, 3d对象.toJSON()转成JSON</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">3.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.obj</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  OBJ格式模型导入      </span></span>
<span class="line"><span style="color:#A6ACCD;">        OBJ文件的导出通常会和MTL格式一同导出，MTL作为OBJ文件的附属文件，却有着OBJ文件需要贴图材质        </span></span>
<span class="line"><span style="color:#A6ACCD;">    4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">FBX模型导入        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">5.</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dae)COLLADA模型导入</span></span></code></pre></div><h2 id="canvas" tabindex="-1">canvas <a class="header-anchor" href="#canvas" aria-label="Permalink to &quot;canvas&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">canvas</span></span>
<span class="line"><span style="color:#A6ACCD;">    canvas</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toDataURL</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">image/png</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//转图片</span></span>
<span class="line"><span style="color:#A6ACCD;">    contextType</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 建立一个 CanvasRenderingContext2D 二维渲染上下文。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webgl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> (或</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">experimental-webgl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) 这将创建一个 WebGLRenderingContext 三维渲染上下文对象。只在实现WebGL 版本 </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">(OpenGL ES </span><span style="color:#F78C6C;">2.0</span><span style="color:#A6ACCD;">) 的浏览器上可用。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">webgl2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> (或 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">experimental-webgl2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">) 这将创建一个 WebGL2RenderingContext 三维渲染上下文对象。只在实现 WebGL 版本 </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> (OpenGL ES </span><span style="color:#F78C6C;">3.0</span><span style="color:#A6ACCD;">) 的浏览器上可用。Experimental</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bitmaprenderer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 这将创建一个只提供将 canvas 内容替换为指定ImageBitmap功能 的ImageBitmapRenderingContext  。</span></span></code></pre></div><h2 id="svg之viewbox" tabindex="-1">SVG之ViewBox <a class="header-anchor" href="#svg之viewbox" aria-label="Permalink to &quot;SVG之ViewBox&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">d3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js中级封装</span><span style="color:#676E95;font-style:italic;">//Data Driven Document 数据驱动文档</span></span>
<span class="line"><span style="color:#A6ACCD;">    类似echart高级封装</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">2D的数据可视化</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">g</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">//分组元素 ，是 SVG 画布中的元素，意思是 group。此元素是将其他元素进行组合的容器</span></span>
<span class="line"><span style="color:#A6ACCD;">    - 矩形 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">rect</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">    - 圆形 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">circle</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">    - 椭圆 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ellipse</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">    - 线 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">line</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">    - 折线 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">polyline</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">    - 多边形 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">polygon</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">    - 路径 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        下面的命令可用于路径数据：</span></span>
<span class="line"><span style="color:#A6ACCD;">        - M = moveto        - L = lineto        - H = horizontal lineto        - V = vertical lineto        - C = curveto</span></span>
<span class="line"><span style="color:#A6ACCD;">        - S = smooth curveto        - Q = quadratic Bézier curve        - T = smooth quadratic Bézier curveto</span></span>
<span class="line"><span style="color:#A6ACCD;">        - A = elliptical Arc        - Z = closepath</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">svg</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">xmlns</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.w3.org/2000/svg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">path</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">d</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">M150 0 L75 200 L225 200 Z</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">svg</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">//比例尺(键值映射器)</span></span>
<span class="line"><span style="color:#A6ACCD;">var linear = d3.scaleLinear().domain([0, max]).range([0, 300]);</span></span></code></pre></div><h2 id="高级的three-js" tabindex="-1">高级的Three.js <a class="header-anchor" href="#高级的three-js" aria-label="Permalink to &quot;高级的Three.js&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">src\\renderers\\WebGLRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">    src\\renderers\\webgl\\WebGLBackground</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#676E95;font-style:italic;">//同目录下一大堆</span></span>
<span class="line"><span style="color:#A6ACCD;">        src\\renderers\\shaders\\ShaderLib</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">            src\\renderers\\shaders\\ShaderChunk</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#676E95;font-style:italic;">//索引了src\\renderers\\shaders\\ShaderChunk目录下的好多</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//有的用到了src\\renderers\\shaders\\ShaderLib下的好多</span></span></code></pre></div><h2 id="posteffect" tabindex="-1">PostEffect <a class="header-anchor" href="#posteffect" aria-label="Permalink to &quot;PostEffect&quot;">​</a></h2><ol><li>MSAA：多重采样抗锯齿，用于平滑图像边缘并减少锯齿。</li><li>Color Correction：色彩校正，用于调整图像颜色、亮度和对比度等属性。</li><li>Bloom：泛光效果，用于模拟明亮物体周围的光晕效果。</li><li>SSAO：屏幕空间环境光遮蔽，用于模拟物体之间的阴影和光线反射效果。</li><li>SSR：屏幕空间反射，用于模拟物体表面的反射效果。</li><li>DOF：景深效果，用于模拟镜头聚焦和模糊效果。</li><li>FXAA：快速近似抗锯齿，用于平滑图像边缘并减少锯齿。</li><li>ChromaticAberration：色差，用于模拟镜头成像时不同颜色光线的折射效果。</li><li>Vignetting：暗角效果，用于在图像边缘添加暗影效果。</li><li>BlurEdge：边缘模糊，用于模拟镜头成像时边缘模糊效果。</li><li>Film：胶片效果，用于模拟老式胶片的颜色和质感。</li><li>Glow：发光效果，用于模拟物体周围的光晕效果。</li><li>Lensflare：镜头光晕，用于模拟镜头成像时光晕效果。</li></ol><h2 id="贴图" tabindex="-1">贴图 <a class="header-anchor" href="#贴图" aria-label="Permalink to &quot;贴图&quot;">​</a></h2><ol><li>贴图（Texture）：是将图像贴在3D模型表面的一种技术，可以为模型添加颜色、纹理、图案等效果。</li><li>自发光贴图（Emissive Map）：是一种特殊的贴图，可以模拟物体自身发光的效果，常用于制作发光字、灯光等。</li><li>透明贴图（Alpha Map）：是一种用于模拟物体透明效果的贴图，通常使用黑白图像表示透明度。</li><li>凹凸贴图（Bump Map）：是一种用于模拟物体表面凹凸不平的贴图，可以增加模型的真实感。</li><li>法线贴图（Normal Map）：是一种用于模拟物体表面凹凸不平的贴图，与凹凸贴图相比，法线贴图可以更加精细地模拟物体表面的细节。</li><li>置换贴图（Displacement Map）：是一种用于模拟物体表面凹凸不平的贴图，与凹凸贴图和法线贴图不同的是，置换贴图可以改变模型的几何形状。</li><li>粗糙贴图（Roughness Map）：是一种用于控制物体表面粗糙度的贴图，可以影响模型表面的反射和折射效果。</li><li>金属贴图（Metalness Map）：是一种用于控制物体表面金属程度的贴图，可以影响模型表面的反射和折射效果。</li><li>环境贴图（Environment Map）：是一种用于模拟物体周围环境的贴图，可以为模型添加反射和折射效果。</li><li>光照贴图（Light Map）：是一种用于模拟物体表面光照效果的贴图，可以为模型添加阴影和明暗效果。</li><li>环境光遮蔽贴图（Ambient Occlusion Map）：是一种用于模拟物体表面遮蔽效果的贴图，可以为模型添加阴影和明暗效果。</li></ol>`,64),r=[c];function D(y,C,A,F,i,d){return a(),n("div",null,r)}const u=s(t,[["render",D]]);export{m as __pageData,u as default};
