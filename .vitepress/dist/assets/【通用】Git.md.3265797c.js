import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const p="/assets/9D1276755ACB46B5BC945E124EEF0A16.15537004.jpeg",E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"【通用】Git.md","filePath":"【通用】Git.md"}'),o={name:"【通用】Git.md"},e=l(`<div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">GitHub</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">是git</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">分布式</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">的远端公共服务器</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">搜索技巧:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in:name</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">readme</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">description</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xxx</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#FFCB6B;">stars</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">forks:&gt;100</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#FFCB6B;">language:javascript</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#FFCB6B;">pushed:&gt;YYYY-MM-DD</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#FFCB6B;">Git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Workflow</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">是Git的工作流程,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">也就是描述一下在工作中是怎么使用Git的</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">注要讲分支与合并</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">当安装完</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">应该做的第一件事就是设置你的用户名称与邮件地址。</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">这样做很重要，因为每一个</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user.name</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">CJM</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user.email</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">571574085</span><span style="color:#C3E88D;">@qq.com</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">HEAD#可以视为“当前分支”,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">一个特殊的指针，它指向您当前所在的本地分支</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-l //命令查看自己的配置</span><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">#默认这些配置都在 ~/.gitconfig 文件下</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">C:\\Users\\123\\.gitconfig</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#当前用户全局配置文件</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">C:\\Program</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Files</span><span style="color:#A6ACCD;">\\G</span><span style="color:#C3E88D;">it</span><span style="color:#A6ACCD;">\\e</span><span style="color:#C3E88D;">tc</span><span style="color:#A6ACCD;">\\g</span><span style="color:#C3E88D;">itconfig#系统所有用户</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">E:\\GitLabRepository\\dkyDist\\.git\\config #项目级别的配置文件</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">免密码登录github</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">创建.git-credentials到用户目录</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">执行</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">config</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--global</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">credential.helper</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">store</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">,完成</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">两种登录方式可以选择：</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">https://username@github.com/username/projectname.git</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">ssh://git@github.com:username/projectname.git</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#先添加远程仓库：</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">https://github.com/stanbers/git-tutorial</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#再去把这个远程的仓库pull到本地：</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">master</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">master</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--allow-unrelated-histories</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">master</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#本地master分支强制推到远程github/master主机上</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">GitHub中Fork#</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">即是 服务端的代码仓库克隆（即</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">新克隆出来的代码仓库在远程服务端）</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fork</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">其实并不是</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">Git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">操作，而是一个</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">GitHub</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">操作</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">fork:归根结底还是克隆，只是一种可以</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">request</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">可以合并到原项目的一种克隆</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#为何要这么管理代码：项目负责人 fork 一份到自己仓库，项目成员上传到这个 fork 的仓库，最大限度对于原项目没有任何影响，</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#只要 (GitHub 的 Pull Request 和 GitLab 的 Merge Request ) 的时候小心就行。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#这样的代码管理方式，非常适合同一个大型项目下同时开发着好多个子项目，各个子项目又有着各自的项目成员</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">branch:则是一个项目仓库中的代码管理方式，一种方便多人协作的方式</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#fork 可以给你的，远比 branch 要大的多。fork 其实就是一个新的仓库，你可以为所欲为，可以随便开分支，只要最后不乱 pull request 乱合并到原项目就不会出事；</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#而 branch 其实只是一个分支，比一个仓库的范围要小得多，你实际上还是处于同一个项目仓库中。  </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#FFCB6B;">.gitattributes</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">问题:解决开发者使用不同的操作系统，默认的文件结尾行就会不同</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">解决:任何人从仓库获取代码后，创建以及修改文件时，git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">都会自动地设置好正确的文件结尾</span></span></code></pre></div><p><img src="`+p+`" alt=""></p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#FFCB6B;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">将产生一个额外的合并提交来保留两个分支以前的的提交记录</span></span>
<span class="line"><span style="color:#FFCB6B;">rebase</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">线性的,是在原有提交</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">第一个共同的commit祖先记录</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">的基础上将差异内容反映进去</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#区别在历史记录</span></span>
<span class="line"><span style="color:#FFCB6B;">revert</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">是撤销某一次,是放弃指定提交的修改，但是会生成一次新的提交，需要填写提交注释，以前的历史记录都在；</span></span>
<span class="line"><span style="color:#FFCB6B;">reset</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">是回退,是指将HEAD指针指到指定提交，历史记录中不会出现放弃的提交记录。#reset</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--soft：软回溯，回退</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">的同时保留修改内容。</span></span>
<span class="line"><span style="color:#FFCB6B;">reflog：记录了</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">的历史操作。#如果说 reset</span><span style="color:#A6ACCD;"> \\-</span><span style="color:#C3E88D;">-soft 是后悔药，那</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">reflog</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">就是强力后悔药。它记录了所有的</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">操作记录，便于错误操作后找回记录</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">到本地:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">clone</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-o</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">jQuery</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">https://github.com/jquery/jquery.git</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#会自动建立一种追踪关系</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">查看远端:</span><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#查看所有已提交的远程名字\\网址。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">show</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#查看已添加主机的详细信息。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#删除已添加主机</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#查看所有[已取得关联]的分支 *表示当前分支</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git@192.168.1.53:xxx/dkyDist.git</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rename</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">gitlab2</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-vv</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#查看追踪关系</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">建立追踪关系:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">推荐:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-u</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cjm</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#当前分支与gitlab/cjm建立追踪</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">不推荐:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">branch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--set-upstream-to=gitlab/cjm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cjm</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#FFCB6B;">更新:</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cherry-pick</span><span style="color:#A6ACCD;">           </span><span style="color:#676E95;font-style:italic;">#部分更新, 将某一次提交合入到本地当前分支上</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">newBranch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">github/master</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">#切换分支, checkout命令创建一个newBranch 分支。   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">checkout</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-b</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dev</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#创建新分支 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stash</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#暂存到本地,不参与提交 git stash apply#读取暂存</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#stash的好处是可以先将你的改动暂存到本地仓库中，随时可以取出来再用，但是不用担心下次push到服务器时，把不想提交的改动也push到服务器上，因为</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#Stash Changes的内容不参与commit和push。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--amend</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#撤销上次暂存,并提交</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">到本地:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">获取所有分支:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git pull --tags gitlab</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">推荐</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">fetch</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">develop</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#获取gitlab上的develop 分支 </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">diff</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cjm#来比较本地代码与刚刚从远程下载下来的代码的区别</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">merge</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab/develop#将gitlab上的develop分支合并到当前分支中</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">#与pull的区别: merge的结果像是一个新的合并的提交</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">#git rebase github/newsip #如果你想要一个干净的，没有merge commit的线性历史树，那么你应该选择git rebase,要在没人用的分支使用!!不在公共分支使用!!</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">#rebase看起来则像没有经历过任何合并一样   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">不推荐</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pull</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">develop:cjm</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#取回gitlab上的develop分支，与本地的cjm分支合并成新的分支 | 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。   </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">#与fetch的区别: git pull等同于 git fetch + git merge</span></span>
<span class="line"><span style="color:#A6ACCD;">                               </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">remote</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">prune</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">#删除不存在对应远程分支的本地分支</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#FFCB6B;">到远端:</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">develop:newsip</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">#将本地的develop分支推送到  gitlab主机的newsip分支。如果远端分支不存在，则会被新建。(如本地删除了文件,远程没有,则文件又会被拉取到本地)       </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">:newsip</span><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">#删除远端gitlab的newsip分支</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">#    将所有本地分支都推送到gitlab 主机。         </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">gitlab</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--tags</span><span style="color:#A6ACCD;">#    最后，git push不会推送标签（tag），除非使用--tags选项。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#FFCB6B;">同步:</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">git pull --tags origin test-bug</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">git push origin test-bug:test-bug</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">先拉:</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">git pull --tags origin dev</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">后推:</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">git push origin dev</span></span></code></pre></div><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">当我们需要删除暂存区或分支上的文件,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">同时工作区也不需要这个文件了,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">可以使用</span></span>
<span class="line"><span style="color:#FFCB6B;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">file_path</span></span>
<span class="line"><span style="color:#FFCB6B;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">delete somefile</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span></span>
<span class="line"><span style="color:#FFCB6B;">当我们需要删除暂存区或分支上的文件,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">但本地又需要使用,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">只是不希望这个文件被版本控制,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">可以使用</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--cached</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">file_path</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-m</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">delete remote somefile</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">push</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">有一些文件我们不想提交到git上去了，但是又被检测到有变化，显示Untracked</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">files，我们可以采用</span></span>
<span class="line"><span style="color:#FFCB6B;">git</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--cached</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">file来停止跟踪这些文件</span></span></code></pre></div><h2 id="技巧" tabindex="-1">技巧 <a class="header-anchor" href="#技巧" aria-label="Permalink to &quot;技巧&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">使用 </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">depth 参数来防止获取所有提交历史记录</span></span>
<span class="line"><span style="color:#A6ACCD;">git clone </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">depth</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">30</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//github.com/mrdoob/three.js.git</span></span></code></pre></div>`,6),t=[e];function c(C,r,y,A,D,i){return n(),a("div",null,t)}const B=s(o,[["render",c]]);export{E as __pageData,B as default};
