import{_ as s,o as n,c as a,O as e}from"./chunks/framework.4afe7240.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"WebGPU.md","filePath":"WebGPU.md"}'),l={name:"WebGPU.md"},p=e(`<p><a href="https://github1s.com/Orillusion/orillusion" target="_blank" rel="noreferrer">Orillusion/orillusion - GitHub1s</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">根据orillusion得出常用API</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createBindGroup</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createBindGroupLayout</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createBuffer</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createCommandEncoder</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createComputePipeline</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createPipelineLayout</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createRenderBundleEncoder</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createRenderPipeline</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createSampler</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createShaderModule</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">createTexture</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">importExternalTexture</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">copyExternalImageToTexture</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">submit</span></span>
<span class="line"><span style="color:#A6ACCD;">device</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">writeBuffer</span></span></code></pre></div>`,2),o=[p];function c(t,r,i,C,D,A){return n(),a("div",null,o)}const F=s(l,[["render",c]]);export{d as __pageData,F as default};
