import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const p="/assets/0ACB95E1FCA746BC9928D885604F3AAD.697fae01.png",u=JSON.parse('{"title":"基本数据响应式","description":"","frontmatter":{},"headers":[],"relativePath":"Vue3.md","filePath":"Vue3.md"}'),o={name:"Vue3.md"},e=l(`<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">技巧</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">模板重</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[name]</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sdf</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 或 </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">[name]</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;"> 动态属性</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">事件名</span></span>
<span class="line"><span style="color:#A6ACCD;">    fragment获取传进来的属性 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">frament1 属性1</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 属性2</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> :class=&quot;$attrs.属性1&quot;&gt;1&lt;/div&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        &lt;div :class=&quot;$attrs.属性2&quot;&gt;2&lt;/div&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        &lt;div </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$attrs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">3搞到所有属性</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">handleClick</span><span style="color:#A6ACCD;">(arg1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">$event)</span><span style="color:#676E95;font-style:italic;">//传原生事件 @clik.self点自己才触发  @click.stop不冒泡</span></span>
<span class="line"><span style="color:#A6ACCD;">    props</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">emits都能先校验的</span></span>
<span class="line"><span style="color:#A6ACCD;">    BREAKING：</span></span>
<span class="line"><span style="color:#A6ACCD;">        单个v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">model</span><span style="color:#676E95;font-style:italic;">//在自定义组件上使用时，v-model prop 和 event 默认名称会更改：</span></span>
<span class="line"><span style="color:#A6ACCD;">            道具：value</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> modelValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            事件：input</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">update</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">modelValue</span></span>
<span class="line"><span style="color:#A6ACCD;">        多个v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">model</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">value1</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sdfg</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">value2</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">asdf</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        自定义修饰符</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">父</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">model</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asdf</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">myText</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">子</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">modelValue</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">modelModifiers</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">     </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                   </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">modelModifiers</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">asdf) </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">做一些事情</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    生命周期多了onRenderTracked</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">onRenderTriggered</span></span></code></pre></div><h1 id="基本数据响应式" tabindex="-1">基本数据响应式 <a class="header-anchor" href="#基本数据响应式" aria-label="Permalink to &quot;基本数据响应式&quot;">​</a></h1><h2 id="用法1-setup函数用法" tabindex="-1">用法1: setup函数用法 <a class="header-anchor" href="#用法1-setup函数用法" aria-label="Permalink to &quot;用法1: setup函数用法&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue文件    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">   name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">components</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">(){</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/*里面的变量可以给template用*/</span><span style="color:#89DDFF;">}}}</span><span style="color:#A6ACCD;">  })</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;"> @click=&quot;onclick&quot;&gt;{{message}}&lt;/h1&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;p&gt;{{computedMsg}}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;p&gt;counter: {{</span><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">}}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;/div&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">     </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">const</span><span style="color:#89DDFF;"> {</span><span style="color:#A6ACCD;"> nextTick</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">effect</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">createApp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(69次)</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(36次)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onMounted</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> computed</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  toRefs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">watch</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onActivated</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onBeforeMount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">            onBeforeUpdate</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onDeactivated</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onErrorCaptured</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onMounted</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onBeforeUnmount</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">onUnmounted</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onUpdated</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">watchEffect </span><span style="color:#89DDFF;">} = </span><span style="color:#C792EA;">Vue</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//生命周期钩子用了setup函数,就基本用不到了</span></span>
<span class="line"><span style="color:#89DDFF;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#C792EA;">const</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">app</span><span style="color:#89DDFF;"> = createApp/defineComponent({        </span></span>
<span class="line"><span style="color:#89DDFF;">      setup(props, {</span><span style="color:#A6ACCD;"> attrs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> slots</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> emit </span><span style="color:#89DDFF;">}) {</span><span style="color:#676E95;font-style:italic;">//一个函数替代分散的生命周期和数据初始化函数   options API -&gt; composition API</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//可以返回 return ()=&gt;h(&#39;div&#39;,{},slots.default()});</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span></span>
<span class="line"><span style="color:#A6ACCD;">            const state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 数据响应式: 使对象响应化</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello, vue3!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">computedMsg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">!!!!!!!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 新的state);</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            现在列举一下我知道的响应式失去的几个情况：</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、解构 props 对象，因为它会失去响应式</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">不要用 let {message,computedMsg}= state;  去解构state出来用, 不然响应式会变得很奇怪</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">eg造成:在回调里给解构出来的值赋值会无效,message=&#39;1&#39;无效, state.message=&#39;1&#39;也无效了</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">解决: let { message, computedMsg } = toRefs</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">state</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">;  但message=&#39;1&#39;还是无效的, 引物ref是message.value=&#39;1&#39;才有效</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、 直接赋值reactive响应式对象</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">、 vuex中组合API赋值</span><span style="color:#676E95;font-style:italic;">//const store = useStore()</span></span>
<span class="line"><span style="color:#A6ACCD;">                    a</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">; </span><span style="color:#676E95;font-style:italic;">//a.count可能不是响应式</span></span>
<span class="line"><span style="color:#A6ACCD;">                    a</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">computed</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">;</span><span style="color:#676E95;font-style:italic;">//正确做法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//toRefs原理: proxy({name:&#39;asfd&#39;}) =&gt; { name: proxy({value:&#39;asfd&#39;}) }</span></span>
<span class="line"><span style="color:#A6ACCD;">            const message </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toRef</span><span style="color:#A6ACCD;">(state</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// 回调函数</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onclick</span><span style="color:#89DDFF;">(){</span><span style="color:#A6ACCD;">TypeScript</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">note</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">click me!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue3, hello!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// 生命周期钩子函数</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">onMounted</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#676E95;font-style:italic;">// do something</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mounted</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">              </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)            </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;"> 单值响应式, ref可以使单值作  !!!一层!!! 包装，得到一个Ref对象，它是响应式的</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">            const counter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;"> 修改Ref，需要访问value属性</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">counter</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#A6ACCD;">);            </span></span>
<span class="line"><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// 侦听一个 ref 或 reactive的getter</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(counter </span><span style="color:#82AAFF;">或</span><span style="color:#A6ACCD;"> () </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">newVal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//监听对象多个值变化</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">( [</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value1</span><span style="color:#89DDFF;">,()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value2)] </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">([</span><span style="color:#A6ACCD;font-style:italic;">newVal1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">newVal2</span><span style="color:#89DDFF;">],</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;font-style:italic;">oldVal1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">oldVal2</span><span style="color:#89DDFF;">])</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//非惰性,立即执行,无法获取之前的值</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(智能回调)</span><span style="color:#676E95;font-style:italic;">//适合放请求</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// 返回渲染函数上下文对象</span></span>
<span class="line"><span style="color:#A6ACCD;">            return </span><span style="color:#89DDFF;">{...</span><span style="color:#82AAFF;">toRefs</span><span style="color:#A6ACCD;">(state)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onclick</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> counter</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    app.mount(&#39;#app&#39;)</span></span></code></pre></div><h2 id="用法2-script-setup" tabindex="-1">用法2 <code>&lt;script setup&gt;</code> <a class="header-anchor" href="#用法2-script-setup" aria-label="Permalink to &quot;用法2 \`&lt;script setup&gt;\`&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">MyComponent</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">export let map = null;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">import MyComponent from &#39;./MyComponent.vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">defineProps 和 defineEmits 都是只能在 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 中使用的编译器宏。他们不需要导入，且会随着 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 的处理过程一同被编译掉</span></span>
<span class="line"><span style="color:#A6ACCD;">import </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">useSlots</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> useAttrs </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">const a = ref(1)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">const slots = useSlots()</span></span>
<span class="line"><span style="color:#A6ACCD;">const attrs = useAttrs()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">defineOptions(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">name: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ElForm</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,}</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">const props = defineProps(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  name: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Petter</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  userInfo: Object</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  tags: Array</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">const emit = defineEmits([&#39;change&#39;, &#39;delete&#39;])</span></span>
<span class="line"><span style="color:#A6ACCD;">provide( Key , reactive(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">) )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">defineExpose(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  a </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">map = new Map();</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">//await 代码会被编译成 async setup(),async setup() 必须与 Suspense 组合使用//https://juejin.cn/post/7028026616441733156</span></span>
<span class="line"><span style="color:#A6ACCD;">plotGETbyId(id).then(r =&gt; form = r.data);  /不会更新!!!/</span></span>
<span class="line"><span style="color:#A6ACCD;">await plotGETbyId(id).then(r =&gt; form = r.data); /可以更新✔, 但必须与 Suspense 组合使用/</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="usehook思想用法" tabindex="-1">useHook思想用法 <a class="header-anchor" href="#usehook思想用法" aria-label="Permalink to &quot;useHook思想用法&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> defineComponent</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> createApp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> reactive</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onMounted</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> onUnmounted</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> toRefs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">ref </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 鼠标位置侦听</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMouse</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">// 数据响应化</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> x</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> y</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">update</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pageX</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pageY</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">onMounted</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mousemove</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">update</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">onUnmounted</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mousemove</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">update</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)     </span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toRefs</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 转换所有key为响应式数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 事件监测</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useTime</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> time</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#676E95;font-style:italic;">//原data里的变量</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#82AAFF;">onMounted</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">toRefs</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;">)</span><span style="color:#676E95;font-style:italic;">// 转换所有key为响应式数据</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 逻辑组合, 组件使用useMouse,useTime两个hook</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> MyComp </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;div&gt;x: {{ x }} y: {{ y }}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">        &lt;p&gt;time: {{time}}&lt;/p&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">      </span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">attrs</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">slots</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">emit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 使用鼠标逻辑</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useMouse</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">比vue2的mixins来源更清晰,没有变量名冲突</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 使用时间逻辑</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useTime</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 返回使用</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(MyComp)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h1 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码&quot;">​</a></h1><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">响应式实现</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#82AAFF;">effect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">xxx)</span><span style="color:#676E95;font-style:italic;">//声明一个用了响应式对象的函数, 作用是放effectStack里(给track用完就拿掉)并且执行一次getter,做track收集依赖</span></span>
<span class="line"><span style="color:#A6ACCD;">         track</span><span style="color:#676E95;font-style:italic;">//依赖收集</span></span>
<span class="line"><span style="color:#A6ACCD;">         targetMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/*depsMap*/</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span><span style="color:#676E95;font-style:italic;">/*depsSet*/</span><span style="color:#A6ACCD;">cb1</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#A6ACCD;">     setter调用trigger</span><span style="color:#676E95;font-style:italic;">//触发更新         </span></span>
<span class="line"><span style="color:#A6ACCD;">     </span></span>
<span class="line"><span style="color:#A6ACCD;">ref存在是因为Proxy不支持代理原始类型</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">要把它包在</span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">值</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">里</span></span>
<span class="line"><span style="color:#A6ACCD;">    ref对象</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">值</span><span style="color:#676E95;font-style:italic;">//执行的是 this._object[this._key] = newVal; 进而触发Proxy的setter</span></span>
<span class="line"><span style="color:#A6ACCD;">    ref对象</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">push</span><span style="color:#676E95;font-style:italic;">//数组的push等方法在create getter的时候就被做了特殊处理了</span></span></code></pre></div><p><img src="`+p+'" alt=""></p>',11),t=[e];function c(r,D,y,F,A,C){return n(),a("div",null,t)}const d=s(o,[["render",c]]);export{u as __pageData,d as default};
