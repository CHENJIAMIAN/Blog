import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Node.js.md","filePath":"Node.js.md"}'),p={name:"Node.js.md"},o=l(`<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">使用Node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js V16</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">版本的话，启用ES6 import的支持很简单，正如上面错误中的提示那样，只需要在package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json里添加下面第二行：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> : </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">不用再加–experimental</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">modules参数来启用了</span><span style="color:#89DDFF;">,</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">从错误信息来看，在不做代码改动的情况下，我们是没法再用require的,  改成.cjs才可以, &quot;type&quot; : &quot;module&quot;适合比较新的项目</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">v16</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">指定 CommonJS 入口点 </span><span style="color:#676E95;font-style:italic;">//这使得 Node.js 能够运行 CommonJS 入口点，</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">指定 ES 模块入口点 </span><span style="color:#676E95;font-style:italic;">//而构建工具（如webpack）使用 ES 模块入口点</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">Node.js 忽略顶级&quot;module&quot;字段。</span><span style="color:#89DDFF;">/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">better</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">npm</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">run </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> 被cross</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">env替代</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">node使用使用 babel</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">node CLI命令，来运行含有 </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;">/export 语法的 js 代码</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">它不用单独安装，而是随babel-cli一起安装 </span></span>
<span class="line"><span style="color:#A6ACCD;">    Babel 6 中的babel-node命令是babel-cli包的一部分。</span></span>
<span class="line"><span style="color:#A6ACCD;">    Babel 7 中，这个命令已经被拆分成它自己的@babel/node包</span></span></code></pre></div><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">OpenAPI规范（以前称为Swagger规范）    </span></span>
<span class="line"><span style="color:#A6ACCD;">    v2叫做：Swaggerv2</span></span>
<span class="line"><span style="color:#A6ACCD;">    v3叫做：OpenAPIv3</span></span>
<span class="line"><span style="color:#A6ACCD;">API规范可以用YAML或JSON编写，</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">云上</span><span style="color:#A6ACCD;">(swaggerhub)可以直接把编写的文件编译成可访问的API</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//还可以导出js客户端sdk，它用superagent（类似axios）封装好了所有的请求，直接可用，就不用自己写前端了。eg: returnData=apiInstance.getUsers(opts, callback);</span></span>
<span class="line"><span style="color:#A6ACCD;">    本地也可以用swagger</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">routes</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">express库直接把编写的文件编译成可访问的API</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">FAT </span><span style="color:#676E95;font-style:italic;">//工厂验收测试</span></span>
<span class="line"><span style="color:#A6ACCD;">UAT </span><span style="color:#676E95;font-style:italic;">//User Acceptance Testing 用户验收测试, Beta测试</span></span>
<span class="line"><span style="color:#A6ACCD;">Browserslist  </span><span style="color:#676E95;font-style:italic;">//是一个前端项目配置工具，功能是在前端工具之间共享目标环境的浏览器信息。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//被 @babel/preset-env 和 Autoprefixer 用来确定需要转译的 JavaScript 特性和需要添加的 CSS 浏览器前缀。</span></span>
<span class="line"><span style="color:#A6ACCD;">Jest </span><span style="color:#676E95;font-style:italic;">//单元测试, 开箱即用，无需配置</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//默认测 tests/unit或__tests__目录下 , 的 js|jsx|ts|tsx文件</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//调试方法: node --inspect-brk ./node_modules/@vue/cli-service/bin/vue-cli-service.js test:unit --runInBand</span></span>
<span class="line"><span style="color:#A6ACCD;">Mocha </span><span style="color:#676E95;font-style:italic;">//单元测试, (配合 mocha-webpack) /vue-cli-service test:unit/通过 mocha-webpack + chai 运行单元测试</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//默认测 tests/unit目录下,  的 ts|js文件</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//注意，测试是在Node.js内运行的，并使用JSDOM模拟了浏览器环境。    </span></span>
<span class="line"><span style="color:#A6ACCD;">Cypress </span><span style="color:#676E95;font-style:italic;">//来E2E测试（模拟用户的操作去测试） //vue-cli-service test:e2e使用运行e2e测试cypress run</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Mock</span><span style="color:#676E95;font-style:italic;">//模拟后台接口 vue.config.js的devServer.before:require(&#39;./mock/mock-server.js&#39;) -&gt; mock/index.js -&gt; mock/目录下的各种模拟</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service lint </span><span style="color:#676E95;font-style:italic;">//没有装eslint则默认使用tslint//if (!api.hasPlugin(&#39;eslint&#39;))  require(&#39;./lib/tslint&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    vue add </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">typescript</span><span style="color:#676E95;font-style:italic;">//则默认TSLint</span></span>
<span class="line"><span style="color:#A6ACCD;">    vue add </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">eslint</span><span style="color:#676E95;font-style:italic;">//则是用的eslint</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">EditorConfig </span><span style="color:#676E95;font-style:italic;">//可以帮助开发者在不同的编辑器和IDE 之间定义和维护一致的代码风格</span></span>
<span class="line"><span style="color:#A6ACCD;">Plop</span><span style="color:#676E95;font-style:italic;">//根据模板生成文件,就不用自己新建了,npm run new-&gt; &quot;new&quot;: &quot;plop&quot; -&gt; ./plopfile.js -&gt; ./plop-templates/模板文件目录</span></span>
<span class="line"><span style="color:#A6ACCD;">Backbone</span><span style="color:#676E95;font-style:italic;">//一种流行的JavaScript库，使通过提供模型，集合和视图来构建Web应用程序的结构。Aurelia是类似库</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">JSON Web令牌（JWT）</span><span style="color:#676E95;font-style:italic;">//eg:用&#39;0e4253ef-5e4f-4d62-8eeb-c80e36a68c8a&#39;给A用户生成eyJhbGciOiJIUzI1Ni...U0NzcwOTg2NX0.ciS4MqQxxx8eCf2zX</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">SOLID原则</span></span>
<span class="line"><span style="color:#A6ACCD;">    1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">单一责任</span><span style="color:#676E95;font-style:italic;">//对象做一件事，做好,就行了        </span></span>
<span class="line"><span style="color:#A6ACCD;">    2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">开闭原则</span><span style="color:#676E95;font-style:italic;">//一旦为一个类设计了一个接口，则该接口随时间的变化应该通过继承而不是直接修改该接口来实现</span></span>
<span class="line"><span style="color:#A6ACCD;">    3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">里氏替换原则</span><span style="color:#676E95;font-style:italic;">//使用泛型时谨记,举个不满足的加深理解：基类—人，有个方法—生娃。子类有超人，机器人，蜘蛛人。</span></span>
<span class="line"><span style="color:#89DDFF;">                 </span><span style="color:#676E95;font-style:italic;">//看似都具有人的基本特征，但是其中机器人让他生娃，是无法做到的，所以不满足里氏替换</span></span>
<span class="line"><span style="color:#A6ACCD;">    4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">接口隔离</span><span style="color:#676E95;font-style:italic;">//接口做一件事，做好,就行了        </span></span>
<span class="line"><span style="color:#A6ACCD;">    5</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">依赖倒置</span><span style="color:#676E95;font-style:italic;">//我们应该依靠在抽象（或接口）上，而不是在具体对象的实例上</span></span></code></pre></div><h2 id="vscode调试配置-launch-json" tabindex="-1">VsCode调试配置：launch.json <a class="header-anchor" href="#vscode调试配置-launch-json" aria-label="Permalink to &quot;VsCode调试配置：launch.json&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">env</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">DEBUG</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">users:*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//node环境变量</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">PORT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3333</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">SEQUE1LIZE_CONNECT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sequelize-sqlite.yaml</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">runtimeArgs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">--experimental-modules</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//node的运行参数 </span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">args</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: [ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">serve</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> ]</span><span style="color:#676E95;font-style:italic;">//js的运行参数</span></span></code></pre></div><h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">gyp</span><span style="color:#676E95;font-style:italic;">//使用C或C ++编译器编译以构建相应的  .node 文件（该.node扩展名用于二进制本机代码模块）。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//libxslt 和  libxmljs 模块是同名C / C ++库的包装</span></span>
<span class="line"><span style="color:#A6ACCD;">node </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">v8</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">options </span><span style="color:#676E95;font-style:italic;">//Node.js是在V8之上构建的；它有自己的options，主要集中在字节码编译或垃圾回收和堆算法的细节上。</span></span>
<span class="line"><span style="color:#A6ACCD;">util</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">promisify </span><span style="color:#676E95;font-style:italic;">//我们可以转换任何面向回调的函数，使其返回Promise</span></span>
<span class="line"><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">argv[</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">//控制台输入的第二个参数</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">mjs </span><span style="color:#676E95;font-style:italic;">//扩展名为Node.js的ES6模块//node --experimental-modules simpledemo.mjs </span></span>
<span class="line"><span style="color:#A6ACCD;">EventEmitter </span><span style="color:#676E95;font-style:italic;">//自带的,默认require(&#39;events&#39;)作为它</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//订阅emitter.on(&quot;event1&quot;,function(message){ console.log(message);})</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//发布emitter.emit(&quot;event1&quot;,&quot;I&#39;m message&quot;);    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">cross</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">env库 </span><span style="color:#676E95;font-style:italic;">//在Windows cmd.exe命令行中设置环境变量</span></span>
<span class="line"><span style="color:#FFCB6B;">Internet邮件扩展</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">MIME</span><span style="color:#676E95;font-style:italic;">//MIME类型:multipart/form-data</span></span>
<span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">max_old_space_size </span><span style="color:#F78C6C;">5000</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//解决服务进程内存不足的问题</span></span>
<span class="line"><span style="color:#A6ACCD;">nodemon index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#676E95;font-style:italic;">//调试必备,支持热更新</span></span></code></pre></div><h2 id="变量" tabindex="-1">变量 <a class="header-anchor" href="#变量" aria-label="Permalink to &quot;变量&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">全局对象module</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//这些对象在所有模块中均可用。以下变量似乎是全局变量，但不是全局变量。它们仅存在于模块范围内，请参阅 模块系统文档：</span></span>
<span class="line"><span style="color:#A6ACCD;">    __dirname</span><span style="color:#676E95;font-style:italic;">//包含当前正在执行的文件的目录的绝对路径</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(__dirname)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// Prints: /Users/mjr</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dirname</span><span style="color:#A6ACCD;">(__filename))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// Prints: /Users/mjr</span></span>
<span class="line"><span style="color:#A6ACCD;">    __filename</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(__filename)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// Prints: /Users/mjr/example.js</span></span>
<span class="line"><span style="color:#A6ACCD;">        console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(__dirname)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// Prints: /Users/mjr</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">exports</span><span style="color:#676E95;font-style:italic;">//module.exports也可以通过exports模块全局访问</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">module</span><span style="color:#676E95;font-style:italic;">//module实际上不是全局的，而是每个模块的局部</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">module.exports.</span><span style="color:#A6ACCD;">hello </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Exported from require of module</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">//用于导入模块JSON，和本地文件,会把代码写的路径转为运行时的路径如:require(&quot;static/assets/img/admin.png&quot;)</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">process    </span></span>
<span class="line"><span style="color:#A6ACCD;">    process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#676E95;font-style:italic;">//所有环境变量</span></span>
<span class="line"><span style="color:#A6ACCD;">    process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cwd</span><span style="color:#A6ACCD;">() 方法返回Node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js 进程的当前工作目录</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">全局对象global</span><span style="color:#676E95;font-style:italic;">//类似于客户端 JavaScript 运行环境中的 window。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">全局函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">setInterval</span><span style="color:#A6ACCD;">(callback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> millisecond)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">clearInterval</span><span style="color:#A6ACCD;">(timer)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(callback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> millisecond)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#A6ACCD;">(timer)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Node 调试</span></span>
<span class="line"><span style="color:#A6ACCD;">    最方便也是最简单的调试：console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    Node 原生的调试</span><span style="color:#676E95;font-style:italic;">//网址：https://nodejs.org/api/debugger.html    </span></span>
<span class="line"><span style="color:#A6ACCD;">    第三方模块提供的调试工具</span></span>
<span class="line"><span style="color:#A6ACCD;">        $ npm install node</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">inspector –g   </span><span style="color:#676E95;font-style:italic;">//方式一</span></span>
<span class="line"><span style="color:#A6ACCD;">        $ npm install devtool </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">g          </span><span style="color:#676E95;font-style:italic;">//方式二</span></span>
<span class="line"><span style="color:#A6ACCD;">    开发工具的调试 Visual Studio Code</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">模块化结构</span></span>
<span class="line"><span style="color:#A6ACCD;">    1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Node 实现 CommonJS 规范，所以可以使用模块化的方式组织代码结构。    Node 采用的模块化结构是按照 CommonJS 规范。    </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//模块与文件是一一对应关系，即加载一个模块，实际上就是加载对应的一个模块文件。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//❌ 把exports等同module.exports给覆盖掉了</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//✔</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">CommonJS模块加载ES6模块</span><span style="color:#A6ACCD;"> 2</span><span style="color:#82AAFF;">种方法</span><span style="color:#A6ACCD;">：</span></span>
<span class="line"><span style="color:#A6ACCD;">            1.1.</span><span style="color:#82AAFF;">动态导入</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">import</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">异步加载</span></span>
<span class="line"><span style="color:#A6ACCD;">            1.2.@</span><span style="color:#82AAFF;">std</span><span style="color:#A6ACCD;">/</span><span style="color:#82AAFF;">esm</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">提供了一项require</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">异步加载</span></span>
<span class="line"><span style="color:#A6ACCD;">    2.</span><span style="color:#82AAFF;">Node</span><span style="color:#A6ACCD;">.</span><span style="color:#82AAFF;">js</span><span style="color:#A6ACCD;"> 10</span><span style="color:#82AAFF;">对ES2015模块支持</span><span style="color:#A6ACCD;">。</span><span style="color:#82AAFF;">可通过设置命令行标志来使用</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./foo?search</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//为了安全，Node.js接收且仅接受file:URL, 所以[ :，?，#，% ]都是有效的</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">harmony</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;">-meta 启用 i<wbr>mport.meta.url 代替 CommonJS 规范的 __dirname</span></span>
<span class="line"><span style="color:#A6ACCD;">            const __dirname = path.dirname(new URL(i<wbr>mport.meta.url</span><span style="color:#676E95;font-style:italic;">/*file:///../app.mjs*/</span><span style="color:#A6ACCD;">).pathname);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">常用内置模块    </span></span>
<span class="line"><span style="color:#A6ACCD;">    child_process：新建子进程。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    util：提供一系列实用小工具。</span></span>
<span class="line"><span style="color:#A6ACCD;">        util.inspect </span><span style="color:#676E95;font-style:italic;">//功能是一种以易于阅读的方式呈现对象的有用方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    http：提供 HTTP 服务器功能。</span></span>
<span class="line"><span style="color:#A6ACCD;">        const server = http.createServer();</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//处理请求</span></span>
<span class="line"><span style="color:#A6ACCD;">        server.on(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">request</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> (req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> res) =&gt; </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//req, res都是一个流</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">requrl</span><span style="color:#F07178;"> = </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">.</span><span style="color:#A6ACCD;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">req</span><span style="color:#F07178;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">true</span><span style="color:#F07178;">);</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">requrl</span><span style="color:#F07178;">.</span><span style="color:#A6ACCD;">pathname</span><span style="color:#F07178;"> === &#39;/&#39;) {</span></span>
<span class="line"><span style="color:#F07178;">                                </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">.</span><span style="color:#A6ACCD;">writeHead</span><span style="color:#F07178;">(200</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> {&#39;</span><span style="color:#A6ACCD;">Content</span><span style="color:#F07178;">-</span><span style="color:#A6ACCD;">Type</span><span style="color:#F07178;">&#39;: &#39;</span><span style="color:#A6ACCD;">text</span><span style="color:#F07178;">/</span><span style="color:#A6ACCD;">html</span><span style="color:#F07178;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                                res.end(html);</span><span style="color:#676E95;font-style:italic;">//返回内容</span></span>
<span class="line"><span style="color:#A6ACCD;">                    }</span></span>
<span class="line"><span style="color:#A6ACCD;">            })</span></span>
<span class="line"><span style="color:#A6ACCD;">        server.listen(8124);</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//发送请求</span></span>
<span class="line"><span style="color:#A6ACCD;">        var req = http.request(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">headerObj</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                                res =&gt; </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">.</span><span style="color:#A6ACCD;">on</span><span style="color:#F07178;">(&#39;</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">chunk</span><span style="color:#F07178;"> =&gt; { </span><span style="color:#A6ACCD;">console</span><span style="color:#F07178;">.</span><span style="color:#A6ACCD;">log</span><span style="color:#F07178;">(\`</span><span style="color:#A6ACCD;">打印响应内容</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BODY</span><span style="color:#F07178;">: </span><span style="color:#A6ACCD;">$</span><span style="color:#F07178;">{</span><span style="color:#A6ACCD;">chunk</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">);});</span></span>
<span class="line"><span style="color:#C3E88D;">                              });</span></span>
<span class="line"><span style="color:#C3E88D;">            req.end();</span></span>
<span class="line"><span style="color:#C3E88D;">    url：用于解析 URL。</span></span>
<span class="line"><span style="color:#C3E88D;">    querystring：解析 URL 中的查询字符串。</span></span>
<span class="line"><span style="color:#C3E88D;">    crypto：提供加密和解密功能。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">文件系统操作相关模块</span></span>
<span class="line"><span style="color:#C3E88D;">    fs：基础的文件操作 API //fs-extra更改为返回Promise而不是回调函数</span></span>
<span class="line"><span style="color:#C3E88D;">        fs.readdirSync</span></span>
<span class="line"><span style="color:#C3E88D;">        fs.statSync(loc).isDirectory() | isFile()</span></span>
<span class="line"><span style="color:#C3E88D;">        dirList = fs.readdirSync(target)</span></span>
<span class="line"><span style="color:#C3E88D;">        fs.unlink 删除文件</span></span>
<span class="line"><span style="color:#C3E88D;">        fs-extra（第三方）：https://www.npmjs.com/package/fs-extra</span></span>
<span class="line"><span style="color:#C3E88D;">        用流复制文件:</span></span>
<span class="line"><span style="color:#C3E88D;">            const img2 = fs.createWriteStream(&#39;./img2.png&#39;)//只是声明</span></span>
<span class="line"><span style="color:#C3E88D;">            const img1 = fs.createReadStream(&#39;./img1.png&#39;).pipe(ws)//复制到声明</span></span>
<span class="line"><span style="color:#C3E88D;">    Buffer：//一个用于处理二进制数据的缓冲区对象</span></span>
<span class="line"><span style="color:#C3E88D;">    path//：提供和路径相关的操作 API</span></span>
<span class="line"><span style="color:#C3E88D;">        path.join(&#39;/foo&#39;, &#39;bar&#39;, &#39;baz/asdf&#39;,&#39;quux&#39;);//    &#39;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">foo</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">bar</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">baz</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">asdf</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">quux&#39;</span></span>
<span class="line"><span style="color:#C3E88D;">        path.join(&#39;/foo&#39;, &#39;bar&#39;, &#39;baz/asdf&#39;, &#39;quux&#39;, &#39;..&#39;,&#39;..&#39;);//    &#39;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">foo</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">bar</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">baz&#39; ..表示上一级目录 两次..就是上上一级</span></span>
<span class="line"><span style="color:#C3E88D;">        path.resolve() //将返回当前工作目录的绝对路径</span></span>
<span class="line"><span style="color:#C3E88D;">        path.resolve(&#39;wwwroot&#39;, &#39;static_files/png/&#39;, &#39;../gif/image.gif&#39;);//&#39;C:</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">Users</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">123</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">wwwroot</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">static_files</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">gif</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">image.gif&#39;</span></span>
<span class="line"><span style="color:#C3E88D;">        </span></span>
<span class="line"><span style="color:#C3E88D;">    readline：用于读取大文本文件，一行一行读</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">    </span></span>
<span class="line"><span style="color:#C3E88D;">技巧:</span></span>
<span class="line"><span style="color:#C3E88D;">    const req = require.context(路径,is递归,后缀匹配规则)</span></span>
<span class="line"><span style="color:#C3E88D;">    req.keys()//返回路径下所有文件名</span></span></code></pre></div><h2 id="express服务器库" tabindex="-1">express服务器库： <a class="header-anchor" href="#express服务器库" aria-label="Permalink to &quot;express服务器库：&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">用户控制 1个express服务器</span></span>
<span class="line"><span style="color:#A6ACCD;">页面内容 1</span><span style="color:#FFCB6B;">个express服务器</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">express</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    模板：</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">路径映射</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/assets/vendor/jquery/jquery.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//   /assets/vendor/jquery 映射到 node_modules/jquery</span></span>
<span class="line"><span style="color:#A6ACCD;">        app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/assets/vendor/jquery</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> express</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">static</span><span style="color:#A6ACCD;">(path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jquery</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">中间件</span><span style="color:#A6ACCD;">(拦截处理):</span></span>
<span class="line"><span style="color:#A6ACCD;">        app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/*[可选匹配url]:&#39;/user/profile/:id&#39;*/</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//&lt;==&gt; Node.js HTTP的request(WritableStream)和response(EventEmitter)            </span></span>
<span class="line"><span style="color:#F07178;">                :</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//值将落入req.params.id</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  n</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">params</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">     result</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#F07178;">   </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//返回JSON</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">next是回调函数</span><span style="color:#F07178;">，</span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Error</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Not found</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">则传给带有err参数的中间件</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">否则调用next</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">传数据给下一个中间件</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">如果既不调用next也不res.send调用，则请求永远不会得到响应</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">        app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">get  匹配GET方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">post 匹配POST方法</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> router </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> express</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Router</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//router等同app</span></span>
<span class="line"><span style="color:#A6ACCD;">            router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//但它的&#39;/&#39;如果放在user.js就相当于&#39;/users&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//错误处理:  </span></span>
<span class="line"><span style="color:#A6ACCD;">            app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">next</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//带有err参数的中间件</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">status</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">500</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;">/*模板名，对应error.hbs*/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">err</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> error</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}}</span><span style="color:#676E95;font-style:italic;">/*模板body里可取到的值*/</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">passport</span><span style="color:#A6ACCD;">(国外的验证登录中间件)</span></span>
<span class="line"><span style="color:#A6ACCD;">        Socket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">IO</span><span style="color:#A6ACCD;">(实时):   </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">服务器</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> io </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">socketio</span><span style="color:#A6ACCD;">(server)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                io</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(passportSocketIo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">authorize</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//事件通过路由变动知道实时信息改变后,让Socket.IO通知所有浏览器</span></span>
<span class="line"><span style="color:#A6ACCD;">                io.of(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">/home</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#676E95;font-style:italic;">/*限制作用范围*/</span><span style="color:#F07178;">.emit(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">notetitles</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">notelist</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">);  </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">浏览器网页</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                 var socket </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">io</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/home</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">); </span></span>
<span class="line"><span style="color:#A6ACCD;">                 socket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">notetitles</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">notelist</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">notelist</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;">); </span></span>
<span class="line"><span style="color:#A6ACCD;">    数据库:</span></span>
<span class="line"><span style="color:#A6ACCD;">        普通:</span></span>
<span class="line"><span style="color:#A6ACCD;">            LevelUP</span><span style="color:#676E95;font-style:italic;">//这是Google开发的LevelDB引擎的Node.js版, 不支持从多个实例同时访问数据库!!</span></span>
<span class="line"><span style="color:#A6ACCD;">            SQLite3</span><span style="color:#676E95;font-style:italic;">//的主要优点是它不需要服务器；它是一个独立的，无需设置的SQL数据库。</span></span>
<span class="line"><span style="color:#A6ACCD;">                创建: $ sqlite3 dataBase1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sqlite3 </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">init beExecute</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sql </span><span style="color:#676E95;font-style:italic;">//执行sql文件beExecute.sql创建表到dataBase1数据库</span></span>
<span class="line"><span style="color:#A6ACCD;">                使用: db </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> sqlite3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Database</span><span style="color:#A6ACCD;">(dataBase1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sqlite3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> sqlite3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OPEN_READWRITE </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> sqlite3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OPEN_CREATE</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">                执行: db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">(sql</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">替换值</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">})</span></span>
<span class="line"><span style="color:#A6ACCD;">                      db</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(sql</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [替换值]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">row</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                      db</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">all  函数检索结果集的所有行</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        对象关系映射（ORM）(需要先安装数据库): </span><span style="color:#676E95;font-style:italic;">//DB沦为数据服务</span></span>
<span class="line"><span style="color:#A6ACCD;">            Mongoose: 是MongoDB（http:</span><span style="color:#676E95;font-style:italic;">//mongoosejs.com/）上流行的ORM  </span></span>
<span class="line"><span style="color:#A6ACCD;">                 Schema </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> (模型</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">表结构</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">数据结构)</span></span>
<span class="line"><span style="color:#A6ACCD;">                 Collection类型 </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> 整个表</span></span>
<span class="line"><span style="color:#A6ACCD;">                     Model </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> 整个表的一部分 </span><span style="color:#676E95;font-style:italic;">//哪一部分? 由Schema约束</span></span>
<span class="line"><span style="color:#A6ACCD;">                 Document类型 </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> 一行</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">一条数据 </span></span>
<span class="line"><span style="color:#A6ACCD;">                     </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Model </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> 表中的具体一行</span></span>
<span class="line"><span style="color:#A6ACCD;">                 Field </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> 列 </span><span style="color:#676E95;font-style:italic;">//Embedded Documents === 表连接</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                 </span></span>
<span class="line"><span style="color:#A6ACCD;">                 </span><span style="color:#82AAFF;">populate</span><span style="color:#A6ACCD;">() 可以连表查询，即在另外的集合中引用其文档。可以自动替换 document 中的指定字段，替换内容从其他 collection 中获取。</span></span>
<span class="line"><span style="color:#A6ACCD;">                     通过virtual查询出来的数据，如果不对结果进行操作，那么返回到前端的数据就是</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">_doc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 但是如果要对查询的结果进行操作，此时操作的数据不是</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">_doc</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">， </span></span>
<span class="line"><span style="color:#F07178;">                     而是整个对象, 因此需要过滤一次(const docs = results.map(x =&gt; x._doc))</span></span>
<span class="line"><span style="color:#F07178;">                 aggregate聚合管道可以对集合中的文档进行变换和组合,如多表关联查询、数据的统计</span></span>
<span class="line"><span style="color:#F07178;">                 Getters与 Setters 修饰符,通过 set 修饰符在增加数据的时候对数据进行格式化</span></span>
<span class="line"><span style="color:#F07178;">                 </span></span>
<span class="line"><span style="color:#F07178;">                 mongoose.Schema({   name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> String</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">trim</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                                     </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                                     </span><span style="color:#F07178;">status</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Number</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">                 </span></span>
<span class="line"><span style="color:#A6ACCD;">                                                 unique: </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//唯一索引 index: true//普通索引</span></span>
<span class="line"><span style="color:#A6ACCD;">                                                 min: [</span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Too few eggs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//max: 12 , required: [true, &#39;Why no bacon?&#39;], enum: [&#39;Coffee&#39;, &#39;Tea&#39;],</span></span>
<span class="line"><span style="color:#A6ACCD;">                                                 </span><span style="color:#82AAFF;">required</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">status</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                                                 </span><span style="color:#F07178;">validate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">validator</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">v</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">\\d</span><span style="color:#89DDFF;">{3}</span><span style="color:#C3E88D;">-\\d</span><span style="color:#89DDFF;">{3}</span><span style="color:#C3E88D;">-\\d</span><span style="color:#89DDFF;">{4}/</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 自定义的验证器，如果通过验证返回 true，没有通过则返回 false </span></span>
<span class="line"><span style="color:#A6ACCD;">                                                 </span><span style="color:#F07178;">message</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">{VALUE} is not a valid phone number!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                                             </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                                  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                                 </span></span>
<span class="line"><span style="color:#A6ACCD;">            Sequelize:</span></span>
<span class="line"><span style="color:#A6ACCD;">                创建:</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Sequelize</span><span style="color:#A6ACCD;">(params</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dbname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> params</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">username</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> params</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">password</span></span>
<span class="line"><span style="color:#A6ACCD;">                            </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> jsyaml</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">safeLoad</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">config_file.yaml</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">params)</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">define</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Note</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">notekey</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Sequelize</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">STRING</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">primaryKey</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">unique</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">},</span><span style="color:#F07178;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Sequelize</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">STRING</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Sequelize</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">TEXT</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">); </span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">where</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">notekey</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">notekey </span></span>
<span class="line"><span style="color:#A6ACCD;">                         或  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findAll</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">attributes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">notekey</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">note</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> note</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">notekey)</span></span>
<span class="line"><span style="color:#A6ACCD;">                         或  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">username</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> username</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#A6ACCD;">();</span></span>
<span class="line"><span style="color:#A6ACCD;">                配置:config_file</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">yaml:</span></span>
<span class="line"><span style="color:#A6ACCD;">                        dbname: notes </span></span>
<span class="line"><span style="color:#A6ACCD;">                        username: </span><span style="color:#89DDFF;">..</span><span style="color:#A6ACCD;"> user name </span></span>
<span class="line"><span style="color:#A6ACCD;">                        password: </span><span style="color:#89DDFF;">..</span><span style="color:#A6ACCD;"> password </span></span>
<span class="line"><span style="color:#A6ACCD;">                        params: </span></span>
<span class="line"><span style="color:#A6ACCD;">                            host: localhost </span></span>
<span class="line"><span style="color:#A6ACCD;">                            port: </span><span style="color:#F78C6C;">3306</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                            dialect: mysql  #电脑上安装了mysql </span><span style="color:#676E95;font-style:italic;">//也可以是SQLite3</span></span>
<span class="line"><span style="color:#A6ACCD;">     身份验证:  </span></span>
<span class="line"><span style="color:#A6ACCD;">         express</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">session中间件</span></span>
<span class="line"><span style="color:#A6ACCD;">         使用Restify，实现REST接口 </span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span></span>
<span class="line"><span style="color:#A6ACCD;">     部署:</span></span>
<span class="line"><span style="color:#A6ACCD;">         linux方式：</span></span>
<span class="line"><span style="color:#A6ACCD;">             PM2：代替node </span><span style="color:#676E95;font-style:italic;">//它针对Node.js流程进行了优化。它捆绑流程管理并监视到一个应用程序   </span></span>
<span class="line"><span style="color:#A6ACCD;">                 pm2 start configfile</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json </span><span style="color:#676E95;font-style:italic;">//来启动服务</span></span>
<span class="line"><span style="color:#A6ACCD;">         docker方式（更简单）：</span></span>
<span class="line"><span style="color:#A6ACCD;">             容器间通信：通过docker网桥</span></span>
<span class="line"><span style="color:#A6ACCD;">             云托管:</span></span>
<span class="line"><span style="color:#A6ACCD;">     安全:</span></span>
<span class="line"><span style="color:#A6ACCD;">         certbot: </span><span style="color:#676E95;font-style:italic;">//容器的目的是管理“让我们加密SSL”证书</span></span>
<span class="line"><span style="color:#A6ACCD;">         Helmet: </span><span style="color:#676E95;font-style:italic;">//用于设置各种安全性 标头</span></span>
<span class="line"><span style="color:#A6ACCD;">         express</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">force</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">ssl: </span><span style="color:#676E95;font-style:italic;">//http重定向到https</span></span>
<span class="line"><span style="color:#A6ACCD;">         csurf </span><span style="color:#676E95;font-style:italic;">//解决跨站请求伪造</span></span>
<span class="line"><span style="color:#A6ACCD;">         sql</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">injection</span></span>
<span class="line"><span style="color:#A6ACCD;">     测试：</span></span>
<span class="line"><span style="color:#A6ACCD;">         Puppeteer </span><span style="color:#676E95;font-style:italic;">//前端无头浏览器UI测试</span></span>
<span class="line"><span style="color:#A6ACCD;">         Mocha单元测试框架和Chai断言库</span></span></code></pre></div><h2 id="koa-web框架" tabindex="-1">koa, web框架 <a class="header-anchor" href="#koa-web框架" aria-label="Permalink to &quot;koa, web框架&quot;">​</a></h2><p>//Koa 是一个非常优秀的框架，然而对于企业级应用来说，它还比较基础。</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//Koa 的中间件和 Express 不同，Koa 选择了洋葱圈模型,所有的请求经过一个中间件的时候都会执行两次</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//对比 Express 形式的中间件，Koa 的模型可以非常方便的实现后置处理逻辑</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//和 Express 只有 Request 和 Response 两个对象不同，Koa 增加了一个 Context 的对象</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Koa </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">koa</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Koa</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> main </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">ctx</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">ctx</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//上下文，包括HTTP请求和HTTP回复</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(main)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="egg-js" tabindex="-1">egg.js <a class="header-anchor" href="#egg-js" aria-label="Permalink to &quot;egg.js&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">egg</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">    Express 适合个人项目</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">但框架本身缺少约定，标准的 MVC 模型会有各种千奇百怪的写法。</span></span>
<span class="line"><span style="color:#A6ACCD;">    Egg     适合团队项目</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">按照约定进行开发，奉行『约定优于配置』，团队协作成本低</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//Egg 继承于 Koa</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">worker agent 进程 </span><span style="color:#676E95;font-style:italic;">//worker是进程1,2,3,4是集群 agent是特殊用来处理整个集群的公共功能如记录日志</span></span></code></pre></div><h2 id="多线程" tabindex="-1">多线程 <a class="header-anchor" href="#多线程" aria-label="Permalink to &quot;多线程&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> numCPUs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> os</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cpus</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> cluster </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">cluster</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    cluster</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">exit</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">worker</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">signal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">工作进程 %d 关闭 (%s). 重启中...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">worker</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">process</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pid</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">signal</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  worker = cluster.fork() //根据numCPUs去fork多个线程</span></span></code></pre></div><h2 id="pnpm" tabindex="-1">PNPM <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;PNPM&quot;">​</a></h2><div class="language-JS"><button title="Copy Code" class="copy"></button><span class="lang">JS</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">pnpm i </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">shamefully</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">hoist 出现奇怪的问题时执行它</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//创建一个平面node_modules结构，类似于npm or yarn。 警告：这是非常不鼓励的。</span></span></code></pre></div><h2 id="npm" tabindex="-1">NPM <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;NPM&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">使用淘宝镜像</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">目录下放</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">npmrc文件</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">每次npm命令会自动读取它的配置</span><span style="color:#676E95;font-style:italic;">//可设置淘宝镜像等</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// registry=https://registry.npmmirror.com</span></span>
<span class="line"><span style="color:#A6ACCD;">    w</span></span>
<span class="line"><span style="color:#A6ACCD;">    2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">持久使用：            </span></span>
<span class="line"><span style="color:#A6ACCD;">            npm config set registry </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//registry.npmmirror.com</span></span>
<span class="line"><span style="color:#A6ACCD;">            npm config set registry </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//registry.npmjs.org//恢复默认</span></span>
<span class="line"><span style="color:#A6ACCD;">            pnpm config set registry </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//registry.npmmirror.com</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">不要使用cnpm，因为cnpm，是不支持依赖版本锁定的</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    cnpm i xxx@xxx不会更新到package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">lock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json中去。</span></span>
<span class="line"><span style="color:#A6ACCD;">    cnpm i不受package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">lock</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json影响，只会根据package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json进行下载</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">当我们使用最新的Node运行‘npm instal </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">save xxx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">，的时候，他会优先考虑使用插入符号（^）而不是波浪符号（~）了</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//docs.npmjs.com/cli/v7/using-npm/config#save-prefix 有说到</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">版本号详解</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;">和</span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">区别)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">^</span><span style="color:#A6ACCD;">限制第一位3</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">3.4</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &gt;=3.3.4 &lt;4.0.0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">~</span><span style="color:#A6ACCD;">限制第二位1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">15.2</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// &gt;=1.15.2 &lt;1.16.0     </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">nvm		node version manager 用来管理node版本</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">切换node版本 </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">nvm install v12</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">14.1</span><span style="color:#A6ACCD;">  nvm use v12</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">14.1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">npm config ls 	#查看默认全局路径等</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">npm i 前删除package</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">locked</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json可以避免npm i后还找不到库的错误</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">npm cache clean </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">f </span><span style="color:#676E95;font-style:italic;">//npm清理缓存  清的是 ~/.npm/_cacache 文件夹中的数据</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">npm config list </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">l </span><span style="color:#676E95;font-style:italic;">//列出详细配置     </span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">node</span><span style="color:#A6ACCD;">(主要读取main入口) 和 npm 都使用这个文件</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">dependencies字段，devDependencies字段</span></span>
<span class="line"><span style="color:#A6ACCD;">    devDependencies是仅在开发期间需要的模块，而dependencies是在运行时也需要的模块</span></span>
<span class="line"><span style="color:#A6ACCD;">    如果我们只是单纯的做项目，那么我们可简单地认为生产环境和开发环境做为一种友善的提示，实质没有什么区别；</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">但是，如果在发布npm包的时候，两种环境安装方式是有很大区别的！！！</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">npm i 包名</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">只有dependencies下会被安装</span></span>
<span class="line"><span style="color:#A6ACCD;">        平时项目</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">npm i</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">则都会被安装</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">devDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">karma-browserify</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">~5.0.1</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">npm:vue@3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//别名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">peerDependencies</span></span>
<span class="line"><span style="color:#A6ACCD;">    有时，你的项目和所依赖的模块，都会同时依赖另一个模块，但是所依赖的版本不一样。比如，你的项目依赖A模块和B模块的1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0版，而A模块本身又依赖B模块的2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0版。</span></span>
<span class="line"><span style="color:#A6ACCD;">    大多数情况下，这不构成问题，B模块的两个版本可以并存，同时运行。但是，有一种情况，会出现问题，就是这种依赖关系将暴露给用户。</span></span>
<span class="line"><span style="color:#A6ACCD;">    最典型的场景就是插件，比如A模块是B模块的插件。用户安装的B模块是1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0版本，但是A插件只能和2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0版本的B模块一起使用。这时，用户要是将1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0版本的B的实例传给A，就会出现问题。因此，需要一种机制，在模板安装的时候提醒用户，如果A和B一起安装，那么B必须是2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0模块。</span></span>
<span class="line"><span style="color:#A6ACCD;">    peerDependencies字段，就是用来供插件指定其所需要的主工具的版本。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">chai-as-promised</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">peerDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">chai</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1.x</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    上面代码指定，安装chai</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">as</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">promised模块时，主程序chai必须一起安装，而且chai的版本必须是1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x。如果你的项目指定的依赖是chai的2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0版本，就会报错。</span></span>
<span class="line"><span style="color:#A6ACCD;">    注意，从npm 3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0版开始，peerDependencies不再会默认安装了。</span></span></code></pre></div>`,22),e=[o];function t(c,r,y,D,C,A){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{i as __pageData,u as default};
