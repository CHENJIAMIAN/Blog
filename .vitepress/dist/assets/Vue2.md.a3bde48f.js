import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const p="/assets/F1B2E79267AC44809D3915D034775E6F.c657e32b.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Vue2.md","filePath":"Vue2.md"}'),o={name:"Vue2.md"},e=l(`<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SSG </span><span style="color:#82AAFF;">静态生成</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">80</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">使用): </span><span style="color:#676E95;font-style:italic;">//(Static Site Generate) //如:HTML在build时生成, 用户请求前的服务器渲染</span></span>
<span class="line"><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SSR </span><span style="color:#82AAFF;">服务端渲染</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">使用): </span><span style="color:#676E95;font-style:italic;">//首屏渲染+客户端交互激活, 用户请求后的服务器渲染</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//HTML在request时生成</span></span>
<span class="line"><span style="color:#A6ACCD;">    1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">更好的 SEO </span></span>
<span class="line"><span style="color:#A6ACCD;">    2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">首屏加载更快 </span></span>
<span class="line"><span style="color:#A6ACCD;">    3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">更多的服务器负载</span></span>
<span class="line"><span style="color:#A6ACCD;">    4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">只支持 beforCreate 和 created</span></span></code></pre></div><blockquote><p>VueCli</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vue inspect </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> outputwebpackconfig</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service serve   是怎么运行typescript去把</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts转为</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js的 </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">    node_modules</span><span style="color:#89DDFF;">/.</span><span style="color:#A6ACCD;">bin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service </span><span style="color:#676E95;font-style:italic;">//传进参数serve</span></span>
<span class="line"><span style="color:#A6ACCD;">    node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">@vue</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">bin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#676E95;font-style:italic;">//传进参数serve</span></span>
<span class="line"><span style="color:#A6ACCD;">    node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">@vue</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">lib</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">Service</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#676E95;font-style:italic;">//调用vue.config.js, 再利用正则从devDependencies依赖里加载vue的插件,包括&quot;@vue/cli-plugin-typescript&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    node_modules</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">@vue</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">lib</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">commands</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">serve</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#676E95;font-style:italic;">//这里会根据加载的插件来生成和执行webpack的配置,因为&quot;@vue/cli-plugin-typescript&quot;,ts-loader被组织进去了</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">为什么当我打开localhost</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">8080可以打开首页。</span><span style="color:#FFCB6B;">当我打开localhost</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">8080</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">xxxxxx的时候还是可以打开首页</span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">    因为vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service serve就是起了一个WebpackDevServer实例</span></span>
<span class="line"><span style="color:#A6ACCD;">    它的devServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">historyApiFallback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">rewrites</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">genHistoryApiFallbackRewrites</span><span style="color:#A6ACCD;">(options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">publicPath</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pages)</span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">这样配置开启了</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">任意的 </span><span style="color:#F78C6C;">404</span><span style="color:#A6ACCD;"> 响应都可能需要被替代为 index</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">html </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service build </span><span style="color:#FFCB6B;">出错</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> Path variable [contenthash:</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">] not implemented </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">context</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> static</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">[name]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">[contenthash:</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#A6ACCD;">    node_modules</span><span style="color:#89DDFF;">/@</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">lib</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js 里找到static</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">[name]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">[contenthash:</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js的定义 </span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">发现</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">static/js/[name].js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//dev,可以运行</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">static/js/[name].[contenthash:8].js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//prod,运行出错</span></span>
<span class="line"><span style="color:#A6ACCD;">    估计是因为mini</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">css</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">extract</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">plugin不支持contenthash</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service build 后</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 部署静态资源dist文件夹后</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">访问的页面是空白的</span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">    原模板有没有同样的问题</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> 有，说明配置本身存在问题</span></span>
<span class="line"><span style="color:#A6ACCD;">    存在什么问题？ 只要</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">mode development就可以，为prod就不可以</span></span>
<span class="line"><span style="color:#A6ACCD;">    NODE_ENV</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">BABEL_ENV</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">development估计对vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli不影响，所以应该是影响了vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span></span>
<span class="line"><span style="color:#A6ACCD;">    注释掉vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js 所有NODE_ENV部分，有内容，但存在错误   </span></span>
<span class="line"><span style="color:#A6ACCD;">    最终找到原因：  optimization</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">splitChunks</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">   </span><span style="color:#F07178;">cacheGroups</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                                    </span><span style="color:#F07178;">demo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">chunk-demo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                                            </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//不可以,demo.html和index.html都不可以</span></span>
<span class="line"><span style="color:#A6ACCD;">                                            </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">pages</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//不可以,demo.html和index.html都不可以</span></span>
<span class="line"><span style="color:#A6ACCD;">                                            </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">src</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">pages</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">demo</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]/</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//demo.html不可以访问,index.html可以</span></span>
<span class="line"><span style="color:#89DDFF;">                                            </span><span style="color:#676E95;font-style:italic;">//暂未发现造成问题的正则的规律</span></span>
<span class="line"><span style="color:#A6ACCD;">    所以最终原因是</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">配置了splitChunks</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">造成相关资源被splitChunks抽走了</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 所以/dist/js/index.73eb22e6.js缺了被抽走的部分</span></span></code></pre></div><hr><blockquote><p>Vue</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">: </span><span style="color:#676E95;font-style:italic;">//相当于v-bind:href=&#39;js代码/变量&#39; eg：  :href=&#39;js代码/变量&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ id: someProp, &#39;other-attr&#39;: otherProp }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//绑定一个对象, 该对象的属性都作为绑定属性 /内外引号不能都是双引号或都是单引号/    </span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//相当于 v-on:    eg:	@click=&#39;vue方法&#39;	用于绑定事件到vue</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">model自动添加</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">value和@input</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 会被转换成 </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">input</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">message=$event.target.value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> :value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//@change=&quot;处理方法(arguments,&#39;其他参数&#39;)&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">sync自动添加@</span><span style="color:#FFCB6B;">update</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">visible</span></span>
<span class="line"><span style="color:#FFCB6B;">父组件</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  :visibleXXX</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sync</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ishow</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">//让ishow的值可以由子组件的$emit(&#39;update:visibleXXX&#39;)控制</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//等价于:visible=&quot;ishow&quot;  @update:visible= 接收子组件的$emit(&#39;update:visible&#39;)改变ishow&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//子组件:  this.$emit(&#39;update:visible&#39;, false);   </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">条件渲染</span><span style="color:#A6ACCD;">(满足条件才渲染):		v</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue数据 &gt; 0</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> 		v</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;"> 		v</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#82AAFF;">列表渲染</span><span style="color:#A6ACCD;">(遍历输出来渲染):</span></span>
<span class="line"><span style="color:#A6ACCD;">    v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(i, index) in [1,2,3,4]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//v-for 还支持一个可选的第二个参数，即当前项的索引</span></span>
<span class="line"><span style="color:#A6ACCD;">    v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">for</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">(value, name, index) in object</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">样式</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    :class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{class3:条件}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 或 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[&#39;class1&#39;,&#39;class2&#39;]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 或  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[editing? &#39;class4&#39;:&#39;class5&#39;]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 或 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[{ active: isActive }]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//满足条件时才启用</span></span>
<span class="line"><span style="color:#A6ACCD;">    :style </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ color: activeColor}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 或 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">[{ color: activeColor}, { color: activeColor2}]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 或 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ &#39;opacity&#39;: !editableCheckNum ? 0.5 : 1 }</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myEvent</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//接收处理事件</span></span>
<span class="line"><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$emit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">myEvent</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">args)</span><span style="color:#676E95;font-style:italic;">//触发事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">click</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">native</span><span style="color:#89DDFF;">/</span><span style="color:#82AAFF;">添加原生事件</span><span style="color:#A6ACCD;">(给浏览器的事件，回调的函数的参数是浏览器事件)</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">click</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">stop阻止冒泡</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">@click</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prevent阻止默认行为</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">@click</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">self 只有当事件在该元素本身（而不是子元素）触发时，才会触发回调。</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">keyup</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">113</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//F2键盘码为113</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">data</span><span style="color:#A6ACCD;">())  </span><span style="color:#676E95;font-style:italic;">//data重置，恢复默认值</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$forceUpdate</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//强制重新渲染，在组件内部中进行强制刷新</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Child</span><span style="color:#89DDFF;">  @hook:mounted=&quot;ParentdoSomething&quot;/&gt; </span><span style="color:#676E95;font-style:italic;">//监听子组件的mounted事件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">wocao</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> | guolvqi}} </span><span style="color:#676E95;font-style:italic;">//guolvqi称为过滤器函数,用于格式化&quot;wocao&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">v-html</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//字符串按html解析</span></span>
<span class="line"><span style="color:#A6ACCD;">    rawHtml</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;span style=&quot;color: red&quot;&gt;内容&lt;/span&gt;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> rawHtml </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">//输出: &lt;span style=&quot;color: red&quot;&gt;内容&lt;/span&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-html</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rawHtml</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//输出:  内容</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">show v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">if 无效 </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//console.log(typeof this.val)可以看到控制台中一直输出的都是string</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">if </span><span style="color:#676E95;font-style:italic;">//销毁重建,可以用来刷新整个子组件</span></span>
<span class="line"><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">show </span><span style="color:#676E95;font-style:italic;">//隐藏</span></span>
<span class="line"><span style="color:#A6ACCD;">    1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">for 遍历必须为 item 添加 key</span><span style="color:#676E95;font-style:italic;">//key尽量加上，不然item的key都是undefined会，因为key相同所以被复用，状态就乱了</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">存在增删改</span><span style="color:#A6ACCD;">(排序)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">用index作为key就可能出渲染问题</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">key被胡乱判断相当旧vdom被胡乱复用</span></span>
<span class="line"><span style="color:#A6ACCD;">    2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">for 遍历避免同时使用 v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">if </span><span style="color:#676E95;font-style:italic;">//因为 v-for 比 v-if 具有更高的优先级, 所以不管v-if是什么都会被遍历一遍,效率低</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">不用变化的数据,用 Object.freeze 冻住,防修改，不让vue劫持它,以提高效率</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$refs[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$el </span><span style="color:#676E95;font-style:italic;">//取得元素dom</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">//refs是作为渲染结果被创建的，如果想要真正地在DOM加载完成后拿到数据，就需要调用VUE的全局api ： </span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$nextTick</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">下次 DOM 更新循环之后执行,用来获取更改</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#A6ACCD;">    子组件：</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">input type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">input1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">input1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    父组件：</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$refs</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">input1</span><span style="color:#676E95;font-style:italic;">//&lt;input type=&quot;text&quot; id=&quot;input1&quot;&gt; ref 被用来给元素或子组件注册引用信息。引用信息将会注册在父组件的 $refs 对象上</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//updated阶段则是完成了数据更新到DOM的阶段(对加载回来的数据进行处理)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//此时，ref、数据等等全部都挂载到DOM结构上去，在update阶段使用this.$refs.xxx，就100%能找到该DOM节点。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">由于 JavaScript 的限制,Vue 不能检测到以下变动</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ： </span></span>
<span class="line"><span style="color:#A6ACCD;">    对象</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> _ 或 $ 开头的属性不会被 Vue 实例代理，因为它们可能和 Vue 内置的属性、API 方法冲突。</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//Vue 无法检测属性的添加或移除。由于 Vue 会在初始化实例时对属性执行 getter/setter 转化，所以属性必须在 data 对象上存在才能让 Vue 将它转换为响应式的</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">1个属性: Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">对象</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// this.$set</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">watch时 , deep要为true!!</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">更改对象数组中某一个对象的属性  Vue.set</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">this.对象数组</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">index</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">, &#39;属性名&#39;,属性值</span><span style="color:#89DDFF;">)/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">n个属性: </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">对象 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">对象</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">新增属性们</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    数组</span></span>
<span class="line"><span style="color:#A6ACCD;">        1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">arr[index] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> newValue</span></span>
<span class="line"><span style="color:#A6ACCD;">                vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$set</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> newValue)</span><span style="color:#676E95;font-style:italic;">// vm.$set，Vue.set的一个别名            </span></span>
<span class="line"><span style="color:#A6ACCD;">                vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> newValue)</span><span style="color:#676E95;font-style:italic;">// Array.prototype.splice</span></span>
<span class="line"><span style="color:#A6ACCD;">        2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> newLength</span></span>
<span class="line"><span style="color:#A6ACCD;">                vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(newLength)</span><span style="color:#676E95;font-style:italic;">// Array.prototype.splice</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">keep-alive</span><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">include</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a,b,c</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> | </span><span style="color:#C792EA;">exclude</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#A6ACCD;"> //使被包含的组件保留状态，避免重新渲染,对应两个钩子函数 activated 和 deactivated</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">new Vue(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          el: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          router</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          store</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件,子组件能通过 this.$store 访问到</span></span>
<span class="line"><span style="color:#A6ACCD;">          render: </span><span style="color:#A6ACCD;font-style:italic;">h</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(App)</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">//render: h =&gt; h(App) 是下面内容的缩写：</span></span>
<span class="line"><span style="color:#89DDFF;">                      </span><span style="color:#676E95;font-style:italic;">//render: function (createElement) {  return createElement(App); /*返回VNode*/}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">//vue的属性</span></span>
<span class="line"><span style="color:#A6ACCD;">    components: </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-component</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./my-async-component</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">/*异步组件*/</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    data     存放&#39;vue数据</span></span>
<span class="line"><span style="color:#A6ACCD;">             data 为什么必须是函数?    防止两个实例组件修改同一份.prototype.data的内容</span></span>
<span class="line"><span style="color:#A6ACCD;">    methods  存放&#39;vue方法</span></span>
<span class="line"><span style="color:#A6ACCD;">    mounted  vue挂载完成时执行</span></span>
<span class="line"><span style="color:#A6ACCD;">    watch    获取变量变化的前后值, 常用来(监听页面路由) </span></span>
<span class="line"><span style="color:#A6ACCD;">            &#39;$route&#39;: &#39;fetchData&#39; //最简单写法</span></span>
<span class="line"><span style="color:#A6ACCD;">             b: function (val, oldVal) </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//只有值发生改变才会执行 },</span></span>
<span class="line"><span style="color:#A6ACCD;">             c: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#82AAFF;">handler</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* ... */</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//该回调会在任何被侦听的对象的 property 改变时被调用，不论其被嵌套多深</span></span>
<span class="line"><span style="color:#A6ACCD;">                          </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">注意:在变更(不是替换)对象或数组时,旧值将与新值相同,因为它们的引用指向同一个对象/数组。Vue 不会保留变更之前值的副本。</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">                  </span></span>
<span class="line"><span style="color:#F07178;">                  immediate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#676E95;font-style:italic;">// 如果组件是v-if控制,v-if为true时并不会进入watch回调, 而immediate: true可以立即触发回调,即初始化赋值时就捕获到</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//对于只观察一下的也可以这样定义</span></span>
<span class="line"><span style="color:#A6ACCD;">                let unwatchFn </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">count 新值：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">newVal</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">immediate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//{string | Function} source, {Function | Object} callback, {Object} [options]</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">unwatchFn</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    computed  有缓存性</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">定义在它里面就不用再data里定义了</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">作用:</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">当且仅当计算属性依赖的 data 改变时才会自动计算</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">并可在调用变量前</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">用函数处理变量的值     </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">//计算属性默认会帮我定义好 getter，并未定义 setter    </span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">return this.nameFromStore</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">               </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(newVal)</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">return newVal</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                                                                </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> //scoped 只作用于当前组件中的元素</span></span>
<span class="line"><span style="color:#A6ACCD;">    scoped css 没有生效 ? </span></span>
<span class="line"><span style="color:#A6ACCD;">        原因: 使用 scoped 后，父组件的样式将不会渗透到子组件中</span></span>
<span class="line"><span style="color:#A6ACCD;">        解决:  /deep/ input </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">    vue-loader支持&#39;&gt;&gt;&gt; 和 /deep/&#39;, </span></span>
<span class="line"><span style="color:#A6ACCD;">        Sass 之类的预处理器可能无法正确解析 &#39;&gt;&gt;&gt;&#39;, 可以用 &#39;/deep/ 和 ::v-deep空格&#39;  ,/换句话说::v-deep只在scoped时有效/</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">scoped</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> .a &gt;&gt;&gt; .b </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* ... */</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 将被编译成：.a[data-v-f3f3eg9] .b </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* ... */</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    vue2.7开始,用vue-loader15.10.0,改为  :deep() .</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">//*.vue (单文件组件) </span></span>
<span class="line"><span style="color:#A6ACCD;">    vue-loader将.vue文件自动预编译成js </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">//注册或获取全局过滤器。    </span></span>
<span class="line"><span style="color:#A6ACCD;">    Vue.filter(&#39;my-filter&#39;, function (value) </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// 返回处理后的值    })    // 注册</span></span>
<span class="line"><span style="color:#A6ACCD;">    var myFilter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-filter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)    </span><span style="color:#676E95;font-style:italic;">//返回已注册的过滤器</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//注册或获取全局组件。注册还会自动使用给定的id设置组件的名称</span></span>
<span class="line"><span style="color:#A6ACCD;">    用select</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">tree</span><span style="color:#A6ACCD;">(必须带一个</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">不用SelectTree</span><span style="color:#676E95;font-style:italic;">//防止将来新html规范出了个SelectTree标签,防止肯定不会出一个加-符号的新标签</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">使用Vue.extend方法定义组件，使用 Vue.component方法注册组件</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    const 组件构造函数 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">extend</span><span style="color:#A6ACCD;">(vue文件);</span></span>
<span class="line"><span style="color:#A6ACCD;">    Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-component</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">extend</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/* 传入一个扩展过的构造器 */</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#A6ACCD;">    Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-component</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*传入一个选项对象 (自动调用 Vue.extend)*/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//Vue.component(&#39;MyComponentName&#39;, { })// (首字母大写命名) 定义一个组件时，&lt;my-component-name&gt; 和 &lt;MyComponentName&gt; 都是可接受的</span></span>
<span class="line"><span style="color:#A6ACCD;">    var MyComponent </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-component</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)  </span><span style="color:#676E95;font-style:italic;">// 获取注册的组件 (始终返回构造器)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">currentTabComponent</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//使用 is attribute 来切换不同的组件</span></span>
<span class="line"><span style="color:#A6ACCD;">    eg:currentTabComponent</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">admin-dashboard</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">的话</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">就加载 AdminDashboard</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> //元素 —是 Web Components 技术套件的一部分，是Web组件内的一个占位符，是对组件的扩展，通过slot插槽向组件内部指定位置传递内容，通过slot可以父子传参；</span></span>
<span class="line"><span style="color:#A6ACCD;">    this.$scopedSlots.header//不用</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">标签的,直接代码渲染</span></span>
<span class="line"><span style="color:#A6ACCD;">    2.6新语法 #header //相当于 v-slot:header= 可以被重写为 #header= //是slot + slot-scope的简写</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    /一个不带 name 的 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 出口会带有隐含的名字“default”/</span></span>
<span class="line"><span style="color:#A6ACCD;">    普通slot(父中替换子的占位符)：</span></span>
<span class="line"><span style="color:#A6ACCD;">        	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> （作为父) 			</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">slot</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uioiu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">这是页脚</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  //替换掉slot uioiu</span></span>
<span class="line"><span style="color:#A6ACCD;">        	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 插槽 （作为子）</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">uioiu</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    作用域插槽scopedSlot()//作用: 数据来自子组件的slot占位符</span></span>
<span class="line"><span style="color:#A6ACCD;">        //slot-scope是传过来的属性</span></span>
<span class="line"><span style="color:#A6ACCD;">        /用slot-scope属性来访问子组件的属性 slot-scope=&quot;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">子组件的属性们</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">&quot;/</span></span>
<span class="line"><span style="color:#A6ACCD;">        //定义:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">todo-list</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                           </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">slot</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SLOT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">变量1</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">变量2</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">变量3</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> :变量4=&quot;给子组件&quot;&gt; </span></span>
<span class="line"><span style="color:#89DDFF;">                              </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">后备默认内容template为空时才会被渲染</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> {{</span><span style="color:#A6ACCD;">给子组件</span><span style="color:#676E95;font-style:italic;">/*打印 卧槽*/</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">                           &lt;/slot&gt; /1/</span></span>
<span class="line"><span style="color:#89DDFF;">        &lt;/todo-list&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//使用1 (用不到slot的数据)</span></span>
<span class="line"><span style="color:#89DDFF;">        &lt;todo-list </span><span style="color:#C792EA;">给子组件</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">卧槽</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">slot</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SLOT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">todo-list</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        //使用2 (用到slot的数据)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">todo-list</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">给子组件</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">卧槽</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">slot</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">SLOT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">slot-scope</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ 变量1,变量2,变量3}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">或</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">slot-scope</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">变量1,变量2,变量3</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">                  //等价于v2.6新语法  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-slot</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">SLOT</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ 变量1,变量2,变量3}</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                           </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> 变量1</span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">h1</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">  /*会替换掉*/ /1/</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">todo-list</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">//函数式组件   无状态data/无声明周期/无this，渲染开销低!</span></span>
<span class="line"><span style="color:#A6ACCD;">    Vue.component(&#39;my-component&#39;, </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      functional: </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">      props: </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">hasFence</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [Boolean</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">String</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">Number]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">required</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Props 是可选的, 通过 Prop 向子组件传递数据</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 为了弥补缺少的实例 // 提供第二个参数作为上下文</span></span>
<span class="line"><span style="color:#A6ACCD;">      render: </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">createElement</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// ...      }    })           </span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">父子通信</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">重点</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">、</span><span style="color:#A6ACCD;">provide</span><span style="color:#89DDFF;">/</span><span style="color:#82AAFF;">inject</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">跨多多代</span><span style="color:#F07178;">)  </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">甲组件提供</span><span style="color:#F07178;">： </span><span style="color:#82AAFF;">provide</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> 变量名</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">变量</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">乙组件</span><span style="color:#F07178;">： </span><span style="color:#FFCB6B;">inject</span><span style="color:#89DDFF;">:{</span><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">变量别名</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">from</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> 变量名</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//即可通过this.变量别名 获得变量, 如果没有人provide,则this.变量别名 为默认值1</span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$attrs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">：</span><span style="color:#82AAFF;">穿透所有属性</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">data里的数据</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">给子子孙孙</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//祖孙传参 $attrs </span></span>
<span class="line"><span style="color:#F07178;">           </span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">on</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">$listeners</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">穿透所有方法给子子孙孙</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//祖孙传事件 $listeners</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">、</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">|</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">$emit</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">$on</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">、</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$children</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">$parent</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">、</span><span style="color:#A6ACCD;">ref</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">、</span><span style="color:#A6ACCD;">vuex</span></span></code></pre></div><hr><blockquote><p>自定义指令directive eg:注册一个全局自定义指令 <code>v-focus</code></p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">全局注册</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">directive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">focus</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">     </span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">inserted</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">el</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 当被绑定的元素插入到 DOM 中时……        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">focus</span><span style="color:#F07178;">()</span><span style="color:#676E95;font-style:italic;">// 聚焦元素</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">局部注册</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">directives</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#FFCB6B;">focus</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//  &lt;input v-focus&gt; 指令的定义      </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">inserted</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">el</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">binding</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">focus</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">binding</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#676E95;font-style:italic;">//调用指令时传入的值(可选)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><hr><blockquote><p>VueX: 用于状态管理, 引用它的vue组件都可以用它的方法和数据</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">用</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">对象   </span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">用commit还是直接修改this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">val </span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//使用commit提交到mutation修改state的优点： vuex能够记录每一次state的变化记录，保存状态快照，实现时间漫游/回滚之类的操作。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//所以没以上需求的话直接修改this.$store.state.对象, 即可</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#A6ACCD;">(Vuex)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">use实际执行的是Vuex.install</span><span style="color:#89DDFF;">()/</span></span>
<span class="line"><span style="color:#A6ACCD;">    在 install 方法中用了Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mixin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">beforeCreate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vuexInit</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">    这样每次beforeCreate时都会初始化this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">对象</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">export default </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Vuex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Store</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//重点 5个说出来</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> state</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">                                           </span><span style="color:#676E95;font-style:italic;">//存属性,通过store.state.count访问     </span></span>
<span class="line"><span style="color:#A6ACCD;">             /在这定义了变量才是响应式的!  用this.$store.state                            .对象</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">XX; 不是响应式的</span><span style="color:#89DDFF;">!!,</span><span style="color:#F07178;">可以用strit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">true触发报错</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">             </span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> actions:    </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">action1</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">commit</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">commit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">increment</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)  </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//存方法,在mutation变动前做处理          </span></span>
<span class="line"><span style="color:#A6ACCD;">                store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispatch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module1/action1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">args)  </span><span style="color:#676E95;font-style:italic;">//触发状态变更        </span></span>
<span class="line"><span style="color:#A6ACCD;">             </span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> mutations:  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">increment</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++}</span><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//存方法,mutations(变异，变动)          </span></span>
<span class="line"><span style="color:#A6ACCD;">                store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">commit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">increment</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//触发状态变更                 </span></span>
<span class="line"><span style="color:#A6ACCD;">                           </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                     </span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> modules</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//子store模块</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> getters:    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">sidebar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sidebar </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//相当于store 的computed, getter 接受 state 作为其第一个参数                         </span></span>
<span class="line"><span style="color:#A6ACCD;">})                    </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">简写</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mapState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vuex</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在计算属性中返回某个状态</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">mapActions</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user/login</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]) </span><span style="color:#676E95;font-style:italic;">//调用this[&#39;user/login&#39;](args).then</span></span>
<span class="line"><span style="color:#A6ACCD;">            computed: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">mapState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//传入对象 //返回{}用...解构出来</span></span>
<span class="line"><span style="color:#A6ACCD;">                      </span><span style="color:#82AAFF;">measuring</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">measuring</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//获取子模块的</span></span>
<span class="line"><span style="color:#A6ACCD;">                      </span><span style="color:#82AAFF;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                      </span><span style="color:#F07178;">countAlias</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">count</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 传字符串参数 &#39;count&#39; 等同于 \`state =&gt; state.count\` 必须是挂在state下!!!!!</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//或者</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">...</span><span style="color:#82AAFF;">mapGetters</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sidebar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">avatar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//被转化成:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">                      </span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#F07178;">countAlias</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">                      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">                  </span><span style="color:#676E95;font-style:italic;">//或者</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#F07178;">sidebar</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">                      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">getters</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sidebar</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#F07178;">avatar</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">                      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$store</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">getters</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span></code></pre></div><hr><blockquote><p>Vue-Router:用于地址路由,作用不仅切组件,还有[回退]</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">每个组件在执⾏ beforeCreated 钩⼦函数的时候，都会执⾏ router</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">init ⽅法</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addRoutes</span><span style="color:#A6ACCD;">(routes: Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">RouteConfig</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//动态添加更多的路由规则。参数必须是一个符合 routes 选项要求的数组</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">当点击切换路由时：  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">全局</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">beforeEach</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">afterEach</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">组件内</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">beforeRouterEnter进入时</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">Update复用时</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">Leave离开时</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">独享</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">beforeEnter</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;">在失活的</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">组件里</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">调用beforeRouteLeave</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;">全局beforeEach</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;">当路由更新时在重用的</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">组件里</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">调用 beforeRouteUpdate </span><span style="color:#82AAFF;">守卫</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">2.2</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;">在</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">路由配置里</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">调用路由独享的守卫beforeEnter</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;">在被激活的</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">组件里</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">调用 [传给 next 的回调函数] beforeRouteEnter中传的</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#82AAFF;">全局beforeResolve</span><span style="color:#A6ACCD;">(功能跟beforeEach一样</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">只是在前两个守卫之后)(</span><span style="color:#F78C6C;">2.5</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#82AAFF;">全局afterEach</span><span style="color:#A6ACCD;">(不会接受 next 函数也不会改变导航本身</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">基本没卵用)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#676E95;font-style:italic;">//组件更新beforeCreate--&gt;created--&gt;beforeMount--&gt;mounted</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;">挂载完调用 [传给 next 的回调函数] beforeRouteEnter中传的</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#FFCB6B;">children</span><span style="color:#89DDFF;">:{</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//children的component会默认被渲染到它爸的component的&lt;router-view&gt;上</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">跳转</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//this.$router.push(route, () =&gt; {}, onError)//(location, onComplete?, onAbort?)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">register</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">plan</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">private</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">///register?plan=private</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">params</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> userId </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// -&gt; /user/123   this.$route.params.id  &#39;/user/:id&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">go</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">router </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> 种路由模式：</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">hash</span><span style="color:#A6ACCD;">(在url中永远带着#号)支持所有浏览器</span><span style="color:#676E95;font-style:italic;">//http://www.abc.com/#/hello，hash 的值为 #/hello </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//vue-router中默认使用的是hash模式,特点是url中带有#号,#代表网页中的一个位置, 在浏览器发起HTTP请求时，会过滤掉URL中的#符号以及其后的内容，当服务端返回内容后，浏览器再根据#符号后的标识符将页面滚动至特定的位置。</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//window是可以监听到哈希值的变化的（onhashchage事件）,监听到后进行按需加载</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> history 依赖 HTML5 History API、</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> abstract支持所有 JavaScript 运行环境</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$router </span><span style="color:#676E95;font-style:italic;">//路由器</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$route </span><span style="color:#676E95;font-style:italic;">//访问当前路由 eg: this.$route.params.username</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">路由拦截</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    router</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">beforeEach</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">to</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">from</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">next</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//主要用来通过跳转或取消的方式守卫导航 。</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#FFCB6B;">next</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//一定要调用该方法来 resolve 这个钩子。确保要调用 next 方法，否则钩子就不会被 resolved。执行效果依赖 next 方法的调用参数。</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">()</span><span style="color:#676E95;font-style:italic;">//继续</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#676E95;font-style:italic;">//中断导航            </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#676E95;font-style:italic;">//跳转 next(&#39;/&#39;)                 </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">next</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Error</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">实例</span><span style="color:#F07178;">)</span><span style="color:#676E95;font-style:italic;">//被传递给 router.onError() 回调</span></span></code></pre></div><p><img src="`+p+`" alt=""></p><hr><h2 id="vue-cli-执行流程" tabindex="-1">vue-cli 执行流程： <a class="header-anchor" href="#vue-cli-执行流程" aria-label="Permalink to &quot;vue-cli 执行流程：&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//简单vue调用顺序:  (index.html-&gt; main.js → app.vue → components → router → 切换到某组件) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">vue inspect </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> output</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json </span><span style="color:#676E95;font-style:italic;">//查看整个项目的webpack配置</span></span>
<span class="line"><span style="color:#A6ACCD;">vue inspect </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">rules </span><span style="color:#676E95;font-style:italic;">//查看webpack的rules </span></span>
<span class="line"><span style="color:#A6ACCD;">    vue inspect </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">rules svg </span><span style="color:#676E95;font-style:italic;">//查看webpack的rules下的svg配置规则</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//复杂vue调用顺序(以vue-element-admin项目为例)</span></span>
<span class="line"><span style="color:#A6ACCD;">→package</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">json</span></span>
<span class="line"><span style="color:#A6ACCD;">    →scripts：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vue-cli-service serve</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//启动一个开发服务器 (基于 webpack-dev-server) 并附带开箱即用的模块热重载 (Hot-Module-Replacement)。</span></span>
<span class="line"><span style="color:#A6ACCD;">    →npm run dev  </span><span style="color:#676E95;font-style:italic;">//会自动新建一个 Shell，将该目录的子目录append到PATH变量，在这个 Shell 里面执行指定的脚本命令。执行结束后，再恢复原样。</span></span>
<span class="line"><span style="color:#A6ACCD;">        →node_modules</span><span style="color:#89DDFF;">/.</span><span style="color:#A6ACCD;">bin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cmd</span></span>
<span class="line"><span style="color:#A6ACCD;">        →node_modules\\</span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">vue\\cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service\\bin\\vue</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#676E95;font-style:italic;">//加载了 &#39;./config/&#39;下的配置</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">→node_modules\\</span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">vue\\cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service\\lib\\config\\app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#89DDFF;">                   </span><span style="color:#676E95;font-style:italic;">//定义了 const htmlPath = api.resolve(&#39;public/index.html&#39;)  </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">→node_modules\\</span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">vue\\cli</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">service\\lib\\config\\base</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span></span>
<span class="line"><span style="color:#89DDFF;">                        </span><span style="color:#676E95;font-style:italic;">//定义了入口为 .entry(&#39;app&#39;).add(&#39;./src/main.js&#39;)//如果没有配置的话</span></span>
<span class="line"><span style="color:#A6ACCD;">                    →main</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js → app</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue         </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">→vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#676E95;font-style:italic;">//是一个可选的配置文件，如果项目的根目录中存在这个文件，那么它会被 @vue/cli-service 自动加载。</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env </span><span style="color:#676E95;font-style:italic;">//文件          //在所有的环境中被载入</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">local          </span><span style="color:#676E95;font-style:italic;">//在所有的环境中被载入，但会被 git 忽略</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dev            </span><span style="color:#676E95;font-style:italic;">//只在dev 模式中被载入</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prod           </span><span style="color:#676E95;font-style:italic;">//vue-cli-service build --mode prod ,只在prod 模式中被载入</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">env</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">[mode]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">local   </span><span style="color:#676E95;font-style:italic;">//只在指定的模式中被载入，但会被 git 忽略</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//VUE_APP_XXX = XX 约定可用于客户端, 其他不可以</span></span></code></pre></div>`,19),t=[e];function c(D,r,y,F,C,A){return n(),a("div",null,t)}const E=s(o,[["render",c]]);export{u as __pageData,E as default};
