import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const p="/assets/C6F35968C7E046ED80E7324398E64BD6.bfc402cf.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JS.md","filePath":"JS.md"}'),o={name:"JS.md"},e=l(`<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">         //html等它下载和执行完再加载</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">async</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">   //同加载 同执行 (执行script.js时，html解析暂停,且第二个脚本文件可能会在第一个脚本文件之前执行)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">defer</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">   //同加载 后执行</span></span>
<span class="line"><span style="color:#A6ACCD;">    CSS不会阻塞DOM解析, 但会阻塞DOM渲染, JS等它们搞完再运行(会被阻塞)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">3种 执行上下文(栈):</span></span>
<span class="line"><span style="color:#A6ACCD;">    全局//一直在栈最底下</span></span>
<span class="line"><span style="color:#A6ACCD;">    函数//每次调用函数都会创建一个新的执行上下文(插入栈),运行完(移除栈)</span></span>
<span class="line"><span style="color:#A6ACCD;">    eval() 函数会将传入的字符串当做 JavaScript 代码进行执行。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">10n //可以用在一个整数字面量后面加 n 的方式定义一个 BigInt</span></span>
<span class="line"><span style="color:#A6ACCD;">1E3 = 10的三次方=1000 //幂次    e</span></span>
<span class="line"><span style="color:#A6ACCD;">var n = 0755; // 493  //八进制   0  开头</span></span>
<span class="line"><span style="color:#A6ACCD;">0XA      // 10        //十六进制 0x 开头</span></span>
<span class="line"><span style="color:#A6ACCD;">2e-7.toFixed(20)   //&quot;0.00000020000000000000&quot; e-7表示:小数点向前移动7位</span></span>
<span class="line"><span style="color:#A6ACCD;">0.2e-7.toFixed(20) //&quot;0.00000002000000000000&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">0.2e7.toFixed(20) //&quot;2000000.00000000000000000000&quot; e7表示:小数点向后移动7位</span></span>
<span class="line"><span style="color:#A6ACCD;">2e7.toFixed(20)   //&quot;20000000.00000000000000000000&quot; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ES6的 9个</span></span>
<span class="line"><span style="color:#A6ACCD;">    1.(b=&#39;1&#39;)=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">let、const、块级作用域</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> //箭头函数没有1.new 2.arguments 3.yield</span></span>
<span class="line"><span style="color:#A6ACCD;">    2. class A extends B</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> super(); super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">F</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    3. [...Obj] const </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">B</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">C</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">=result;//扩展运算符spread | 解构</span></span>
<span class="line"><span style="color:#A6ACCD;">    4. 简写</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    5. \`Hi $</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">!\` |  直读2|8进制的字面量</span></span>
<span class="line"><span style="color:#A6ACCD;">    6. Symbol()声明唯一字符串; 新增 WeakSet (/只能是对象/) 和 WeakMap(/key只能是对象,是弱引用.null除外/); </span></span>
<span class="line"><span style="color:#A6ACCD;">    //(原来的Map存储的 键数组| 值数组 会一直引用着每个键和值,导致不能回收)   </span></span>
<span class="line"><span style="color:#A6ACCD;">        Symbol.for(&quot;bar&quot;) === Symbol.for(&quot;bar&quot;); // true, for用来复用Symbol (全局Symbol)</span></span>
<span class="line"><span style="color:#A6ACCD;">        Symbol(&quot;bar&quot;) === Symbol(&quot;bar&quot;); // false</span></span>
<span class="line"><span style="color:#A6ACCD;">    7. iterator迭代器是一个实现next的方法：</span></span>
<span class="line"><span style="color:#A6ACCD;">                可迭代对象:  //实现[可迭代协议],即内部有[Symbol.iterator]迭代器的实现方法 ,可用for...of</span></span>
<span class="line"><span style="color:#A6ACCD;">                            //[Symbol.iterator]加中括号是因为它是对象,不加会被以为是标识符</span></span>
<span class="line"><span style="color:#A6ACCD;">                    var iterators= [1,2,3][Symbol.iterator]();   //数组内部实现了 *[Symbol.iterator]() </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> x;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">。该迭代器可以被 for...of 循环使用。</span></span>
<span class="line"><span style="color:#A6ACCD;">                         iterators.next(); //</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">value: </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> done: </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                迭代器方法: //实现[迭代器协议], 即内部实现了next方法,返回</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> done</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">, 如上面的iterators                     </span></span>
<span class="line"><span style="color:#A6ACCD;">                     </span></span>
<span class="line"><span style="color:#A6ACCD;">    8. generator生成器函数(加了*号的函数)： </span></span>
<span class="line"><span style="color:#A6ACCD;">                function * GeneratorsFunc() </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//next() 传参是对(yield表达式整体)的传参，否则yield类似于return //生成器既是迭代器，也是可迭代对象</span></span>
<span class="line"><span style="color:#A6ACCD;">                  let first </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">;</span><span style="color:#676E95;font-style:italic;">//next()返回1, 但first接受next是4</span></span>
<span class="line"><span style="color:#A6ACCD;">                  let second </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> first </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">;    </span><span style="color:#676E95;font-style:italic;">//因为first接受next是4,即next(4), 所以先执行let first=4;再执行first + 2；返回6</span></span>
<span class="line"><span style="color:#89DDFF;">                  </span><span style="color:#676E95;font-style:italic;">//如果有return;之后的不会再执行了</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;"> second </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">;                </span><span style="color:#676E95;font-style:italic;">//next(5) 先执行let second=5;再执行second+ 3；返回8  </span></span>
<span class="line"><span style="color:#A6ACCD;">                  let 返回值 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#A6ACCD;">; </span><span style="color:#676E95;font-style:italic;">//(yield表达式整体)本身没有返回值(所谓返回值其实是由next的传入值)                </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">                let iterator = createIterator();   //产生iterator //通过next(throw new Errow(&#39;error&#39;)) 往里抛错</span></span>
<span class="line"><span style="color:#A6ACCD;">                console.log(iterator.next());      // &quot;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> value: </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> done: </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">&quot;          IteratorResult</span></span>
<span class="line"><span style="color:#A6ACCD;">                console.log(iterator.next(4));     // &quot;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> value: </span><span style="color:#F78C6C;">6</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> done: </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">                console.log(iterator.next(5));     // &quot;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> value: </span><span style="color:#F78C6C;">8</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> done: </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">                console.log(iterator.next());      // &quot;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> value: </span><span style="color:#89DDFF;">undefined,</span><span style="color:#A6ACCD;"> done: </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">&quot;  </span></span>
<span class="line"><span style="color:#A6ACCD;">    9. Promises //Promise 也是基于Promises/A+ 规范而来 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">/如果dom元素的id名称不和js内置属性或全局变量重名的话，该名称自动成为window对象的属性/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">event.target//返回触发事件的元素</span></span>
<span class="line"><span style="color:#A6ACCD;">event.currentTarget//返回绑定事件的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">事件委托:</span></span>
<span class="line"><span style="color:#A6ACCD;">    在父节点统一监听子节点的事件(原理是利用事件冒泡,即子节点的事件会冒泡给父节点去再执行一遍),利用事件回调中判断target.nodeName去分目标处理</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">阻止 stopImmediatePropagation() 和 stopPropagation()的区别在哪儿呢？</span></span>
<span class="line"><span style="color:#A6ACCD;">　　后者只会阻止冒泡或者是捕获,而不会阻止该元素的其他事件发生</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">//不懂就看看:https://zh.javascript.info/bubbling-and-capturing</span></span>
<span class="line"><span style="color:#A6ACCD;">DOM事件流机制: </span></span>
<span class="line"><span style="color:#A6ACCD;">    DOM0级事件:element.onclick()     </span></span>
<span class="line"><span style="color:#A6ACCD;">    DOM2/3级事件:</span></span>
<span class="line"><span style="color:#A6ACCD;">        element.addEventListener(&#39;事件名&#39;, (e)=&gt;</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">,   是否捕获=false), /参数3是否捕获不写的话,默认是false,是冒泡,子的事件会冒泡给父/</span></span>
<span class="line"><span style="color:#A6ACCD;">            /浏览器先捕获后冒泡, 说的是如果同时绑定了参数3为true和参数3为false的, 第三个参数为true会先执行/</span></span>
<span class="line"><span style="color:#A6ACCD;">            第3个参数作用: 规定是在捕获阶段执行,还是在冒泡阶段执行,默认是在冒泡阶段去执行</span></span>
<span class="line"><span style="color:#A6ACCD;">            假设父子都绑定了click事件:</span></span>
<span class="line"><span style="color:#A6ACCD;">                捕获:就是捕获它儿子的click,就算是点它的儿子,那也是先执行它的click,再执行儿子的,/也就是第3个参数只作用于儿子/</span></span>
<span class="line"><span style="color:#A6ACCD;">                对于父绑定了click, 子没有绑定click的,那第三个参数没意义的,因为它就是控制父子监听函数执行循序的</span></span>
<span class="line"><span style="color:#A6ACCD;">        element.addEventListener(&#39;事件名&#39;, (e)=&gt;</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> ,  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">passive:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) //passive执行默认操作</span></span>
<span class="line"><span style="color:#A6ACCD;">            /passive: 合成线程会等事件handler看有没有preventDefault, passive:true表示没有,快滚去继续合成新的帧/</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">绑定多个处理函数的执行顺序:</span></span>
<span class="line"><span style="color:#A6ACCD;">    1.单层级元素:先声明先执行,因为就它自己,没有捕获或冒泡之说</span></span>
<span class="line"><span style="color:#A6ACCD;">    2.多层级元素,父元素的一个is捕获=true,一个is捕获=false,声明为捕获阶段的先发生,因为先捕获后冒泡</span></span>
<span class="line"><span style="color:#A6ACCD;">    3.处理或目标阶段, 子元素上被绑定了两个处理函数，一个is捕获=true,一个is捕获=false,参数无效!谁先声明先执行 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">严格模式(&#39;use strict&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">    1.不可增:创设eval作用域/非函数代码块里声明函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    2.不可删:变量\\对象</span></span>
<span class="line"><span style="color:#A6ACCD;">    3.不可改:只读属性\\没有getter的属性\\扩展禁止扩展的对象\\eval和arguments不能被重新赋值</span></span>
<span class="line"><span style="color:#A6ACCD;">    4.不可用:未声明就使用\\转义字符\\使用前缀0表示八进制数\\arguments不再追踪参数的变化\\禁止this关键字指向全局对象</span></span>
<span class="line"><span style="color:#A6ACCD;">            \\fn.caller顾名思义\\arguments.callee指向其函数自身\\with语句 \\增加了保留字protected、static和interface</span></span>
<span class="line"><span style="color:#A6ACCD;">    5.不重复:函数参数名\\属性名</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">0.1 + 0.2; // = 0.30000000000000004</span></span>
<span class="line"><span style="color:#A6ACCD;">/JavaScript 内部，所有数字都是以64位浮点数形式储存，即使整数也是如此.由于浮点数不是精确的值，所以涉及小数的比较和运算要特别小心。/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">18.5%7; // 余数= 4.5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">//有三个特殊的非实数值:</span></span>
<span class="line"><span style="color:#A6ACCD;">    Infinity; //例如1/0的结果</span></span>
<span class="line"><span style="color:#A6ACCD;">    -Infinity; //例如-1/0的结果</span></span>
<span class="line"><span style="color:#A6ACCD;">    NaN; //例如0/0的结果,代表&#39;Not a Number&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        typeof NaN === &quot;number&quot;//true</span></span>
<span class="line"><span style="color:#A6ACCD;">        /NaN 是 JavaScript 之中唯一不等于自身的值!/ ,NaN === NaN //false </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">按位运算:</span></span>
<span class="line"><span style="color:#A6ACCD;">    1 &lt;&lt; 2; // = 4</span></span>
<span class="line"><span style="color:#A6ACCD;">异或符号</span></span>
<span class="line"><span style="color:#A6ACCD;">    5^2; // 7</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 5: 00000000000000000000000000000101</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 2: 00000000000000000000000000000010</span></span>
<span class="line"><span style="color:#A6ACCD;">    // -----------------------------------</span></span>
<span class="line"><span style="color:#A6ACCD;">    // 7: 00000000000000000000000000000111</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Object.is() 类似 ===     //不同在于: 1. === 将数字值 -0 和 +0 视为相等  2. === 时 Number.NaN 不等于 NaN。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">function.length //属性: 返回第一个非可空参数前面的所有参数的数量 如(a,b,c,d=2,e,f) 的length是3</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">false,null,undefined,NaN,0和&quot;&quot;是false; 其他一切都是true    //注意0是false,&quot;0&quot;是true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">var a = b = 3;    //等同于    b = 3;    var a = b;</span></span>
<span class="line"><span style="color:#A6ACCD;">a.x=b=3;          //等同于    a.x=undefined;   b=3; a.x=b;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">WebAssembly是一种新的编码方式，可以在现代的网络浏览器中运行 － 它是一种低级的类汇编语言，文件后缀名.wasm，可以编译为</span></span>
<span class="line"><span style="color:#A6ACCD;">    WebAssembly还没有和</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">或ES6的import语句集成，也就是说，当前还没有内置的方式让浏览器为你获取模块。</span></span>
<span class="line"><span style="color:#A6ACCD;">    当前唯一的方式就是创建一个包含你的WebAssembly模块二进制代码的 ArrayBuffer 并且使用WebAssembly.instantiate()编译它。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">/单个\\被当成转义字符，是底层的实现，无法进行查找和替换/</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;123253\\2345&#39; //输出:&quot;1232535&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;123253\\\\2345&#39;//输出&quot;123253\\2345&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    &#39;123253\\\\2345&#39;.replace(&#39;\\\\&#39;,&#39;1324&#39;)//输出&quot;123253 1324 2345&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Proxy</span></span>
<span class="line"><span style="color:#A6ACCD;">      //它的递归是惰性的</span></span>
<span class="line"><span style="color:#A6ACCD;">      const newObj = new Proxy(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">, </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">//Proxy 对象用于在如属性查找，赋值，枚举，函数调用时先做一层处理再返回 </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value，receiver) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            Reflect.get(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">x</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">); </span><span style="color:#676E95;font-style:italic;">// 配合Proxy使用</span></span>
<span class="line"><span style="color:#F07178;">          if (key === </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">xxx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) { word.innerHTML = value; }</span></span>
<span class="line"><span style="color:#F07178;">        },});</span></span>
<span class="line"><span style="color:#F07178;">      newObj.text = </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">yyy</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">;</span><span style="color:#676E95;font-style:italic;">//触发setter</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">Object.defineProperties(obj, { key1</span><span style="color:#89DDFF;">:{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(){},</span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">(){}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">(){}</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)      </span><span style="color:#676E95;font-style:italic;">//也可以做到,默认不可遍历,但可以用getOwnPropertyNames获得</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">get 对比 defineProperty的区别: </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">当使用 get 关键字时，属性将被定义在实例的原型上，当使用defineProperty</span><span style="color:#89DDFF;">()</span><span style="color:#C3E88D;">时，属性将被定义在实例自身上。</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    所以 Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#A6ACCD;">(viewer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">camera</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//返回undefined 获取不到</span></span>
<span class="line"><span style="color:#A6ACCD;">    试试:Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#A6ACCD;">(Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#A6ACCD;">(viewer)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">camera</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//打印值描述符对象</span></span>
<span class="line"><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">expression</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//计算表达式无论计算结果如何都返回undefined </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">sourceMappingURL: (</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">map后缀的文件) 一个存储源代码与编译代码对应位置映射的信息文件：</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">// SourceMap 帮助我们在控制台中转换成源码，从而进行 debug</span></span>
<span class="line"><span style="color:#A6ACCD;">     a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">代码压缩混淆后        b</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> 利用 sass 、typeScript 等其他语言编译成 css 或 JS 后        c</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> 利用 webpack 等打包工具进行多文件合并后</span></span>
<span class="line"><span style="color:#A6ACCD;">    Devtools</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Sources里的webpack</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">internal: 和 webpack: 是怎么来的</span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">        webpack</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">internal</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">////是由localhost下的js中末尾的&quot;sourceURL=webpack-internal:///...&quot; 定义的</span></span>
<span class="line"><span style="color:#A6ACCD;">        webpack:</span><span style="color:#676E95;font-style:italic;">////是由webpack-internal里的js 末尾的&quot;sourceMappingURL&quot;里定义的</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">Data URLs，即前缀为 data: 协议的URL，其允许内容创建者向文档中嵌入小文件。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//data:[&lt;mediatype&gt;][;base64],&lt;data&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">   例如: </span></span>
<span class="line"><span style="color:#A6ACCD;">   data:application</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">json;charset</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">utf</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">;base64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">xxxxx </span><span style="color:#676E95;font-style:italic;">//json</span></span>
<span class="line"><span style="color:#A6ACCD;">   data:image</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">png;base64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">xxxxxx </span><span style="color:#676E95;font-style:italic;">//图片</span></span>
<span class="line"><span style="color:#A6ACCD;">   background</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">image: </span><span style="color:#82AAFF;">url</span><span style="color:#A6ACCD;">(data:image</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">png;base64</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">xxx);</span></span>
<span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">跳转</span></span>
<span class="line"><span style="color:#A6ACCD;">    window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.jb51.net</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">);</span><span style="color:#676E95;font-style:italic;">//不可回退</span></span>
<span class="line"><span style="color:#A6ACCD;">    window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">location</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">href </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.jb51.net</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">;</span><span style="color:#676E95;font-style:italic;">//可回退</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Blob 对象表示一个二进制文件的数据内容，比如一个图片文件的内容就可以通过 Blob 对象读写</span></span>
<span class="line"><span style="color:#A6ACCD;">与 ArrayBuffer 的区别在于，它用于操作二进制文件，而 ArrayBuffer 用于操作内存</span></span>
<span class="line"><span style="color:#A6ACCD;">    File 对象代表一个文件，用来读写文件信息。它继承了 Blob 对象，或者说是一种特殊的 Blob 对象，所有可以使用 Blob 对象的场合都可以使用它。</span></span>
<span class="line"><span style="color:#A6ACCD;">        FileReader 对象用于读取 File 对象或 Blob 对象所包含的文件内容。</span></span></code></pre></div><p><img src="`+p+`" alt=""></p><h2 id="事件-异步" tabindex="-1">事件\\异步: <a class="header-anchor" href="#事件-异步" aria-label="Permalink to &quot;事件\\异步:&quot;">​</a></h2><blockquote><p>JS是一门单线程语言，当线程中没有任何同步代码的前提下才会执行异步代码</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Event </span><span style="color:#82AAFF;">Loop事件循环</span><span style="color:#A6ACCD;">(重要): </span><span style="color:#676E95;font-style:italic;">//用于等待和发送消息和事件的运行机制</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">同步任务</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">异步任务</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> 从</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">EventTable</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> 将函数移入主线程的</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">任务队列</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">中执行</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">事件队列</span><span style="color:#A6ACCD;">(重要):</span></span>
<span class="line"><span style="color:#A6ACCD;">            先</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">微任务</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">：</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">2021</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">03</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">11</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">12</span><span style="color:#A6ACCD;">:</span><span style="color:#F78C6C;">18</span><span style="color:#A6ACCD;"> (监视DOM改动) </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;">(Node)</span><span style="color:#676E95;font-style:italic;">/*微任务中优先*/</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//栈空后:</span></span>
<span class="line"><span style="color:#A6ACCD;">            UI渲染 </span><span style="color:#676E95;font-style:italic;">//夹在中间执行!!! </span></span>
<span class="line"><span style="color:#89DDFF;">                   </span><span style="color:#676E95;font-style:italic;">//为什么时间切片需要用宏任务，而不是微任务,为了不阻塞渲染嘛</span></span>
<span class="line"><span style="color:#89DDFF;">                   </span><span style="color:#676E95;font-style:italic;">//浏览器渲染有个渲染时机的问题，也就是只有必要的时候才进行渲染, 如果没有界面的改变，就不会渲染/</span></span>
<span class="line"><span style="color:#89DDFF;">                  </span><span style="color:#676E95;font-style:italic;">//但每次渲染之前都会调用requestAnimationFrame</span></span>
<span class="line"><span style="color:#A6ACCD;">            后</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">宏任务</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;">/*MacroTask*/</span><span style="color:#A6ACCD;">：IO、setTimeout、setInterval、</span><span style="color:#82AAFF;">requestAnimation</span><span style="color:#A6ACCD;">(浏览器) </span><span style="color:#89DDFF;">|</span><span style="color:#82AAFF;">setImmediate</span><span style="color:#A6ACCD;">(Node) </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> MessageChannel的postMessage </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">/*window.postMessage的回调函数*/</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//1次只取1个出来执行；</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(fn</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">的含义</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//只要主线程没事了就立即执行它</span></span>
<span class="line"><span style="color:#A6ACCD;">    注意</span><span style="color:#89DDFF;">!</span><span style="color:#676E95;font-style:italic;">//setTimeout用Int32(最大值是2^31-1)一旦超过了最大值，</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//其效果就跟延时值为0的情况一样，也就是马上执行。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//4，4, 4 上面这个代码块会打印三个 \`4\` 出来，而我们预想的结果是打印 1 2 3 </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//之所以会这样，是因为 setTimeout 中的 i 是对外层 i 的引用。当 setTimeout 的代码被解释的时候，运行时只是记录了 i 的引用，而不是值。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//而当 setTimeout 被触发时，三个 setTimeout 中的 i 同时被取值，由于它们都指向了外层的同一个 i，而那个 i 的值在迭代完成时为 4，所以打印了三次 \`4\`。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//var 改成 let，又打印出了1 2 3，为什么呢</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">let变量绑定在该块，不再受外部的影响</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 所以setTimeout里的绑定了值，不再受影响</span></span></code></pre></div><h2 id="promises-异步函数调用" tabindex="-1">Promises 异步函数调用 <a class="header-anchor" href="#promises-异步函数调用" aria-label="Permalink to &quot;Promises 异步函数调用&quot;">​</a></h2><blockquote><p>异步的发展过程：Callbacks&gt;&gt; Promises&gt;&gt; async/await(ES8)(本质是 Generator 的语法糖)</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">所有的 </span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">() 函数总是会被异步调用</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 即使是一个已经变成 resolve 状态的 </span><span style="color:#FFCB6B;">Promise</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">2种状态：</span></span>
<span class="line"><span style="color:#A6ACCD;">    pending（进行中）、fulfilled（已成功）和rejected（已失败）</span></span>
<span class="line"><span style="color:#A6ACCD;">3种可能：</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()    从pending变为fulfilled</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">reject</span><span style="color:#A6ACCD;">()     从pending变为rejected</span></span>
<span class="line"><span style="color:#A6ACCD;">        只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。</span></span>
<span class="line"><span style="color:#A6ACCD;">        如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span></span>
<span class="line"><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(执行成功</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">执行失败)</span></span>
<span class="line"><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(执行成功)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(执行失败)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">all</span><span style="color:#A6ACCD;">([promise1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> promise2]) </span><span style="color:#676E95;font-style:italic;">//所有都resolved才算resolved，有1个reject就算reject</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">race</span><span style="color:#A6ACCD;">([promise1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> promise2]) </span><span style="color:#676E95;font-style:italic;">//找最快的,有1个被resolved或rejected，执行回调  //大家公用一个resolved,rejected</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">finally</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//肯定要执行的回调，无论promise结果是fulfilled或者是rejected</span></span>
<span class="line"><span style="color:#82AAFF;">这避免了同样的语句需要在then</span><span style="color:#A6ACCD;">()</span><span style="color:#82AAFF;">和catch</span><span style="color:#A6ACCD;">()中各写一次的情况。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">//返回状态为resolved的promise,直接进入then</span></span>
<span class="line"><span style="color:#A6ACCD;">    比如 </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">42</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> 可以认为是以下代码的语法糖。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">resolve</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">42</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">v1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">v2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//Promise的构造函数的的参数是一个回调函数，这个函数被回调时传入resolve和reject</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">v1</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">success</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//回调得到执行才进入then</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">v2</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">failure</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//回调得到执行才进入then</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">value</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//resolved状态的回调函数</span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#676E95;font-style:italic;">// success</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">confirm</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">err1</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">err1 happend</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">//如何中止promise? reject Promise即可中止下一个then,直接进入catch</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">error</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//rejected状态的回调函数</span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#676E95;font-style:italic;">// failure</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">confirm</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)        </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">ex</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ex: </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ex</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//链式调用例子:</span></span>
<span class="line"><span style="color:#82AAFF;">doSomething</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">result</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doSomethingElse</span><span style="color:#A6ACCD;">(value)) </span><span style="color:#676E95;font-style:italic;">//result =&gt; doSomethingElse(value) 是 result =&gt; {return doSomethingElse(value)} 的简写。</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">newResult</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">doThirdThing</span><span style="color:#A6ACCD;">(newResult))</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">finalResult</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Got the final result: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">finalResult</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">))</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(failureCallback)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//.catch 是 .then 第二个参数的简便写法, 是 then(null, failureCallback)的缩略形式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//等同于</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">await会阻塞,因此效率更高, 因为它不用像then去记录的上下文信息去用于执行到then时还能有上下文</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">await后面立即执行，下面的语句则放进微任务</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">foo</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//有多个then时使用,看起来更清晰</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">doSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//ECMAScript 2017(es8)标准的 async/await 语法糖, await 操作符用于等待一个Promise 对象。它只能在异步函数 async function 中使用。   </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newResult</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">doSomethingElse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finalResult</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">doThirdThing</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">newResult</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Got the final result: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">finalResult</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">failureCallback</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//类似于</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">syncDoSomething</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newResult</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">syncDoSomethingElse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">finalResult</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">syncDoThirdThing</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">newResult</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">Got the final result: </span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">finalResult</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;">(error) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">failureCallback</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">为什么说Async本质是 Generator 的语法糖： </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">twofiles</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">yield</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">goodbye.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    等价于</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">twofiles</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">goodbye.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="dom增删改查" tabindex="-1">DOM增删改查 <a class="header-anchor" href="#dom增删改查" aria-label="Permalink to &quot;DOM增删改查&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#676E95;font-style:italic;">//增</span></span>
<span class="line"><span style="color:#A6ACCD;">dom1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(dom11)</span><span style="color:#676E95;font-style:italic;">//到后面</span></span>
<span class="line"><span style="color:#82AAFF;">insertBefore</span><span style="color:#A6ACCD;">(dom11</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">dom1)</span><span style="color:#676E95;font-style:italic;">//到前面</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//删</span></span>
<span class="line"><span style="color:#A6ACCD;">parent</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeChild</span><span style="color:#A6ACCD;">(parent</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//改</span></span>
<span class="line"><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerHTML</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;span style=&quot;color:red&quot;&gt;RED&lt;/span&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">p</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">2234</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//查</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">tt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">checked  </span><span style="color:#676E95;font-style:italic;">//CheckBox是否被选中:  </span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#q1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// 通过querySelector获取ID为q1的节点：</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelectorAll</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div.highlighted &gt; p</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// 通过querySelectorAll获取q1节点内的符合条件的所有节点：</span></span>
<span class="line"><span style="color:#A6ACCD;">dom</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">color </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#ff0000</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="模块" tabindex="-1">模块 <a class="header-anchor" href="#模块" aria-label="Permalink to &quot;模块&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//-&gt; 无模块化&lt;script src=&quot;jquery.js&quot;/&gt;  </span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> CommonJS规范   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、导⼊：</span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">路径</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、导出：</span><span style="color:#89DDFF;">module.</span><span style="color:#A6ACCD;">exports和exports    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">module.exports的exports必须是带&quot;s&quot;的!!!!</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#F78C6C;">2.1</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> AMD异步模块定义 </span><span style="color:#676E95;font-style:italic;">//依赖前置</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、导⼊：</span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">模块名称</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">模块变量引⽤</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">){</span><span style="color:#676E95;font-style:italic;">// 代码});//require(数组,回调)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">、</span><span style="color:#A6ACCD;">导出</span><span style="color:#F07178;">：</span><span style="color:#82AAFF;">define</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(){</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">值</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//AMD把整个模块包裹在define函数中  </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//浏览器需要RequireJS库(AMD的实现)来支持AMD</span></span>
<span class="line"><span style="color:#F78C6C;">2.2</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">CMD</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">优化AMD</span><span style="color:#F07178;">)  </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">、</span><span style="color:#A6ACCD;">导</span><span style="color:#F07178;">⼊：</span><span style="color:#82AAFF;">define</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">require</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">、</span><span style="color:#A6ACCD;">导出</span><span style="color:#F07178;">：</span><span style="color:#82AAFF;">define</span><span style="color:#F07178;">(</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(){</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">值</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//SeaJS是CMD的实现</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">UMD</span><span style="color:#F07178;">：</span><span style="color:#82AAFF;">通用模块定义</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">兼容AMD和CommonJS</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ES6模块化</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">是静态引入</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//ES6前用闭包实现模块化:</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">module1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">　</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">　</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">m1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#F07178;">　</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">m2</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#F07178;">　</span></span>
<span class="line"><span style="color:#F07178;">                              </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">　　m1 </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">m1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">　　m2 </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">m2</span><span style="color:#F07178;">　</span><span style="color:#89DDFF;">};}</span><span style="color:#F07178;">)()</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">//调用module1.m1,module1.m2</span></span>
<span class="line"><span style="color:#F07178;">                              </span></span>
<span class="line"><span style="color:#FFCB6B;">es6支持</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">require</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">export</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">import</span></span>
<span class="line"><span style="color:#A6ACCD;">node支持</span><span style="color:#F07178;">:	</span><span style="color:#A6ACCD;">require</span><span style="color:#F07178;"> /</span><span style="color:#A6ACCD;">module</span><span style="color:#F07178;">.</span><span style="color:#A6ACCD;">exports</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">等价</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">exports</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">export</span><span style="color:#F07178;">、</span><span style="color:#A6ACCD;">import</span><span style="color:#676E95;font-style:italic;">//在一个文件或模块中可以有多个</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">export</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#676E95;font-style:italic;">//在一个文件或模块中仅有一个</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//本质上，a.js文件的export default输出一个叫做default的变量，然后系统允许你为它取任意名字。所以可以为import的模块起任何变量名，且不需要用大括号包含</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">import</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">any</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./a.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">any12</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./a.js</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><h2 id="iife立即执行函数" tabindex="-1">IIFE立即执行函数 <a class="header-anchor" href="#iife立即执行函数" aria-label="Permalink to &quot;IIFE立即执行函数&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//&quot;立即执行匿名&quot; functions&quot;,它可以防止临时变量泄漏到全局变量中范围.</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(){</span><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">temporary</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">permanent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//我们可以通过分配&quot;全局对象&quot;来访问全局范围    //在Web浏览器中始终是\`window\`.全局对象可能有一个    //在非浏览器环境中使用不同的名称,例如Node.js.    </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">temporary</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 引发 ReferenceError</span></span>
<span class="line"><span style="color:#A6ACCD;">permanent</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// = 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;"> 		         </span><span style="color:#676E95;font-style:italic;">//属于函数表达式，funcion名.name=&#39;&#39; 或 &#39;anonymous&#39;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> fnName</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">	                  </span><span style="color:#676E95;font-style:italic;">//函数表达式，可以在后面加括号，并立即执行函数的代码</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fnName</span><span style="color:#89DDFF;">(){}</span><span style="color:#A6ACCD;"> ()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">		          </span><span style="color:#676E95;font-style:italic;">//不会报错，但是javascript引擎只解析函数声明，忽略后面的括号，函数声明不会被调用</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#A6ACCD;">()			          </span><span style="color:#676E95;font-style:italic;">//javascript引擎将开头的function关键字当做函数声明，报错：要求需要一个函数名,</span></span>
<span class="line"><span style="color:#A6ACCD;">( </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#A6ACCD;">() )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">		                  </span><span style="color:#676E95;font-style:italic;">//把它放括号里, 表示 函数立即调用表达式</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//在Javascript里，圆括号不能包含声明，所以如果声明被圆括号包括，那它就会被解析为表达式，从而被逐行解析</span></span>
<span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#A6ACCD;">) 	()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">	              	 </span><span style="color:#676E95;font-style:italic;">//（）告诉javascript引擎这是一个函数表达式，不是函数声明，可以立即解析函数里的代码</span></span>
<span class="line"><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">参数</span><span style="color:#89DDFF;">){}</span><span style="color:#A6ACCD;">) 	(参数内容)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">eg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">后面括号里的对象</span><span style="color:#89DDFF;">){</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">后面括号里的对象</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">内容</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)(</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">内容</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">//后面括号里的对象的内容//</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//输出: &quot;//后面括号里的对象的内容//&quot;</span></span></code></pre></div><h2 id="_3种方法确定值类型" tabindex="-1">3种方法确定值类型 <a class="header-anchor" href="#_3种方法确定值类型" aria-label="Permalink to &quot;3种方法确定值类型&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Date</span><span style="color:#676E95;font-style:italic;">//    &quot;object&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;">  Date</span><span style="color:#676E95;font-style:italic;">//    &quot;function&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">instanceof</span></span>
<span class="line"><span style="color:#A6ACCD;">    Date </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#676E95;font-style:italic;">//    true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Date </span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#676E95;font-style:italic;">//    Date函数返回一个对象,false</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString方法 </span></span>
<span class="line"><span style="color:#A6ACCD;">    toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Date)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// [object Date]</span></span></code></pre></div><h2 id="prototype-可以被继承的东西" tabindex="-1">prototype（可以被继承的东西） <a class="header-anchor" href="#prototype-可以被继承的东西" aria-label="Permalink to &quot;prototype（可以被继承的东西）&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//原型对象的所有属性和方法，都能被实例对象共享。也就是说，如果属性和方法定义在原型上，那么所有实例对象就能共享</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype </span><span style="color:#676E95;font-style:italic;">//prototype 原型属性使您有能力向对象添加可以被继承的属性和方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//prototype对象有一个constructor属性，默认指向prototype对象所在的构造函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//constructor属性的作用是，可以得知某个实例对象，到底是哪一个构造函数产生的</span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">S</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">M2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// S的继承链上加入 M2 Object.assign(target, ...sources)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototye</span><span style="color:#89DDFF;">==null</span><span style="color:#A6ACCD;"> 		</span><span style="color:#676E95;font-style:italic;">//true 原型的终点的null</span></span>
<span class="line"><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">				</span><span style="color:#676E95;font-style:italic;">//如果原型上也有一个&#39;b&#39;属性,它不会被访问到.这种情况称为&quot;属性遮蔽</span></span>
<span class="line"><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">			</span><span style="color:#676E95;font-style:italic;">//上一级原型的b</span></span>
<span class="line"><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> 				</span><span style="color:#676E95;font-style:italic;">//如果该对象没有,那js会一直摸下去上一级原型直到原型的终点null</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">绕来绕去的原型</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> () </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">native</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span>
<span class="line"><span style="color:#A6ACCD;">        Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span></span>
<span class="line"><span style="color:#A6ACCD;">        Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__        </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// ƒ () { [native code] } 将其存储为temp</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">constructor</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">__defineGetter__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">__defineSetter__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">hasOwnProperty</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">__lookupGetter__</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ƒ</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> …</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span>
<span class="line"><span style="color:#A6ACCD;">        temp</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">3.</span><span style="color:#C792EA;">n</span><span style="color:#A6ACCD;">ull</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//继承:</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> p1</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">	</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(p1)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">//返回继承p1的空对象{}, 它的原型 p.__proto__ 是p1 //true</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> p </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> 等同于 </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;"> 等同于 </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//p是一个继承自 o 的空对象, p.__proto__ === o//true</span></span></code></pre></div><h2 id="this" tabindex="-1">this <a class="header-anchor" href="#this" aria-label="Permalink to &quot;this&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">规则：不论它们出现在哪里，它们总是将 global 对象作为其函数体中 </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> 关键字的默认值。</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//this的指向在函数定义的时候是确定不了的，只有函数执行的时候才能确定this到底指向谁，实际上this的最终指向的是那个调用它的对象</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//如果返回值是一个对象，那么this指向的就是那个返回的对象，如果返回值不是一个对象那么this还是指向函数的实例</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">5种 </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">分类</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//默显隐new箭头</span></span>
<span class="line"><span style="color:#A6ACCD;">    1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">默认绑定</span><span style="color:#A6ACCD;">(2345没法解释的</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">如自执行</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">闭包) window</span></span>
<span class="line"><span style="color:#A6ACCD;">    2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">隐式绑定</span><span style="color:#A6ACCD;">(谁调用谁是this)</span></span>
<span class="line"><span style="color:#A6ACCD;">        obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">foo</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         是通过obj找到foo，所以就是在obj环境执行。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> 变量foo就直接指向函数本身，</span><span style="color:#82AAFF;">所以foo</span><span style="color:#A6ACCD;">()</span><span style="color:#82AAFF;">就变成在全局环境执行</span><span style="color:#A6ACCD;">(称绑定丢失)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">回调函数如setTimeout也是在全局环境执行</span><span style="color:#A6ACCD;">(称绑定丢失)</span></span>
<span class="line"><span style="color:#A6ACCD;">    3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">显式绑定</span><span style="color:#A6ACCD;">(call apply)      </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">硬绑定</span><span style="color:#A6ACCD;">(解决绑定丢失): </span><span style="color:#676E95;font-style:italic;">//bind(绑定后无法修改!) //绑定到undefined默认指向Window，严格模式下才是 undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">软绑定</span><span style="color:#A6ACCD;">(绑定后可改): </span><span style="color:#676E95;font-style:italic;">//通过修改bind方法的实现, 判断this为全局对象(即绑定丢失)的话就就改为要绑定的, 否则不变</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">4.</span><span style="color:#C792EA;">n</span><span style="color:#82AAFF;">ew</span><span style="color:#A6ACCD;">(绑定到实例上)      </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//new的实现</span></span>
<span class="line"><span style="color:#89DDFF;">        	</span><span style="color:#676E95;font-style:italic;">// 创建一个空的对象</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        	</span><span style="color:#676E95;font-style:italic;">// 获得构造函数，arguments中去除第一个参数</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">Con</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">shift</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//create(Person, ...)   ,参数中第一个就是构造函数</span></span>
<span class="line"><span style="color:#89DDFF;">        	</span><span style="color:#676E95;font-style:italic;">// 链接到原型，obj 可以访问到构造函数原型中的属性</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Con</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        	</span><span style="color:#676E95;font-style:italic;">// 绑定 this 实现继承，obj 可以访问到构造函数中的属性</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ret</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Con</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        	</span><span style="color:#676E95;font-style:italic;">// 优先返回构造函数返回的对象</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ret</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Object</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ret</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//new Foo 等同于 new Foo()，也就是没有指定参数列表，Foo 不带任何参数调用的情况。</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Person</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)       </span><span style="color:#676E95;font-style:italic;">// 使用内置函数new     </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(Person</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)   </span><span style="color:#676E95;font-style:italic;">// 使用手写的new，即create</span></span>
<span class="line"><span style="color:#A6ACCD;">    5</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">箭头函数</span></span>
<span class="line"><span style="color:#A6ACCD;">        箭头函数不绑定this，箭头函数中的this相当于普通变量。</span></span>
<span class="line"><span style="color:#A6ACCD;">        正常在自己的[[scope]]找到this</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 它没有自己的[[scope]](作用域)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 一级一级往上级的[[scope]]找 </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">箭头函数this 是最近能找到的this</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">/*对象没有this*/</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">fun1</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#676E95;font-style:italic;">/*函数才有this*/</span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">箭头函数的绑定直接无法被修改</span><span style="color:#A6ACCD;">(但是可修改它爸啊)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">18</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">age</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">     </span><span style="color:#F78C6C;">debugger</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">sleep</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#F78C6C;">debugger</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;};</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            Person</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">()()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">            Person</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sleep</span><span style="color:#A6ACCD;">()()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//call、apply、bind这三个方法来切换/固定this的指向:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">myString</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">s</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//call 方法还能让一个不拥有某个方法的对象，去借用其他对象的方法来调用</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">        []</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">push</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//obj是没有push方法的, obj借用数组的push方法!!!! obj.push(1)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">参数2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">..</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//apply支持多个参数(区别), 第二个参数传入的是数组!!!!!!!</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//apply 方法也可以让一个不拥有某个方法的对象，去借用其他对象的方法来调用</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#A6ACCD;">        []</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">push</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">])</span><span style="color:#676E95;font-style:italic;">//obj是没有push方法的, obj借用数组的push方法!!!! obj.push(1,2)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">var funcWithThis </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> func</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//返回绑定this的函数 , 可以返回固定某些指定的参数的函数(柯里化)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//\`bind\`也可用于部分应用(curry)柯里化函数, 生成另一个固定了一个参数该函数.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> product </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">){</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> doubler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> product</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">doubler</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">9</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//18</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">怎么理解 </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> toStr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> ？</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">toStr</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[object String]</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">toStr</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">123324</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[object String]</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">toStr</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">4123</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">[object Number]</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    借用Function的call来调用toString， 也就是toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">简化为</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> toStr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">call</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#A6ACCD;">(toString)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">toStr</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">) 等同于 toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">) 等同于 </span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">123</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="垃圾回收-标记-从root可达" tabindex="-1">垃圾回收(标记:从root可达) <a class="header-anchor" href="#垃圾回收-标记-从root可达" aria-label="Permalink to &quot;垃圾回收(标记:从root可达)&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//之前是[引用计数]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//现在主流浏览器的垃圾回收算法是[标记清除],从Root（全局对象）开始寻找这个对象的引用是否可达，如window.foo.scope, 如果引用链断裂，那么这个对象就会回收。</span></span></code></pre></div><h2 id="for-of-遍历实现iterator接口的可枚举对象的值" tabindex="-1">for...of(遍历实现Iterator接口的可枚举对象的值) <a class="header-anchor" href="#for-of-遍历实现iterator接口的可枚举对象的值" aria-label="Permalink to &quot;for...of(遍历实现Iterator接口的可枚举对象的值)&quot;">​</a></h2><blockquote><p>取代for...in(遍历属性名)</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">objCustom</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arrCustom</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> iterable </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">iterable</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">for...in循环不仅遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> iterable) </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//打印索引, /中括号可解构键名/</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//  0, 1, 2, &quot;foo&quot;, &quot;arrCustom&quot;, &quot;objCustom&quot; 原型链上所有属性</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">iterable</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">hasOwnProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//仅自身的属性</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//  0, 1, 2, &quot;foo&quot; </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> i </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> iterable) </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//打印内容</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//  3, 5, 7</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">for..in 和 object.keys 的区别是for..in会获取原型链上的属性</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> key </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> iterable</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">()) </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//通过获取index,打印内容</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">iterable</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//  3, 5, 7</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="var-let-const" tabindex="-1">var let const <a class="header-anchor" href="#var-let-const" aria-label="Permalink to &quot;var let const&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">函数提升优先级</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">变量提升</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 同名会覆盖掉</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;">		无论声明在何处，都会被视为声明在函数的最顶部</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 这就是函数变量提升(提性能|高容错)</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//与全局作用域一样，函数作用域内部也会产生“变量提升”现象，提升到函数体的头部            </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">{</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;}</span><span style="color:#A6ACCD;"> 相当于var y</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">y</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">;},</span><span style="color:#A6ACCD;">这时在块外打印y自然为undefined</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;">		作用于当前代码块【块级作用域】</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//使用 var 关键字重新声明变量可能会带来问题。在块中重新声明变量也会重新声明块外的变量：</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//let 关键字就可以解决这个问题，因为它只在 let 命令所在的代码块 {} 内有效。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">//a:&quot;a&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">//a: 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> 	常量是【块级作用域】，很像使用 let 语句定义的变量。</span></span>
<span class="line"><span style="color:#A6ACCD;">           常量的值不能通过重新赋值来改变，并且不能重新声明。</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">必须初始化</span></span></code></pre></div><h2 id="null-和-undefined区别" tabindex="-1">null 和 undefined区别 <a class="header-anchor" href="#null-和-undefined区别" aria-label="Permalink to &quot;null 和 undefined区别&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">undefined</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">表示尚未初始化的变量的值</span><span style="color:#A6ACCD;">(转为数值时为0；)，</span></span>
<span class="line"><span style="color:#82AAFF;">null表示故意不存在对象</span><span style="color:#A6ACCD;">(转为数值时为NaN)</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">undefined;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// =&gt; &#39;undefined&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">// =&gt; &#39;object&#39;</span></span></code></pre></div><h2 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">x) </span><span style="color:#676E95;font-style:italic;">//[2, 4, 6]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">of </span><span style="color:#676E95;font-style:italic;">//方法用于将一组值，转换为数组。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">       </span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myArray0 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">32</span><span style="color:#89DDFF;">,</span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">56</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">90</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">60</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">myArray0</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//用分号打印数组的所有元素 =&quot;32; false; js; 12; 56; 90&quot;    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">myArray0</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// (index&gt;=1)且(index&lt;4)的被截取[false, &quot;js&quot;, 12], 原数组不会改变        </span></span>
<span class="line"><span style="color:#A6ACCD;">myArray0</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wr</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ld</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//(index&gt;=2)删除4个, 并插入&quot;hi&quot;,&quot;wr&quot;和&quot;ld&quot;, 返回[32, false, &quot;hi&quot;, &quot;wr&quot;, &quot;ld&quot;, 50, 60]  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">排序</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> numbers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    numbers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> b)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(numbers)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">(compareFunction)</span></span>
<span class="line"><span style="color:#A6ACCD;">        如果 </span><span style="color:#82AAFF;">compareFunction</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b) </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> ，a排前面</span></span>
<span class="line"><span style="color:#A6ACCD;">    如果 </span><span style="color:#82AAFF;">compareFunction</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b) </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> ，位置不变</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">复制 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//concat不影响原数组</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> a2 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">a1]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> 或 </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[...</span><span style="color:#A6ACCD;">a2</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">合并</span></span>
<span class="line"><span style="color:#A6ACCD;">    arr1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#A6ACCD;">(arr2)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> 或 [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arr1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arr2]</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">数组复制换位</span><span style="color:#676E95;font-style:italic;">// 将3号位复制到0号位</span></span>
<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">copyWithin</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//// [4, 2, 3, 4, 5]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">【对象数组】去重    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> arrayToClearRepeat</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">..</span><span style="color:#89DDFF;">},{</span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">..</span><span style="color:#89DDFF;">}.......</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> hash </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#A6ACCD;">    arrayToClearRepeat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">accumulator</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">currentValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">currentIndex</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">array</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//reduce()类似 map() ,但它是累加的</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">hash</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">currentValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#A6ACCD;">hash</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">currentValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#A6ACCD;">accumulator</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">currentValue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">accumulator</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">    初始accumulator值)</span><span style="color:#676E95;font-style:italic;">//如果没有初始值,若不传则默认数组的第一个值</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">every</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//是否每个都是</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">创建空数组</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">length</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">12</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span></span>
<span class="line"><span style="color:#A6ACCD;">删除</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">findIndex</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">id </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    index</span><span style="color:#89DDFF;">!==-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#A6ACCD;">(index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">筛选：</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">筛选符合条件的所有</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">properties</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CID</span><span style="color:#89DDFF;">===</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">筛选符合条件的第一个</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">find</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">n</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">// -5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">改</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#A6ACCD;">(currentValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> array)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="奇淫技巧" tabindex="-1">奇淫技巧 <a class="header-anchor" href="#奇淫技巧" aria-label="Permalink to &quot;奇淫技巧&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">debug</span><span style="color:#A6ACCD;">(func)</span><span style="color:#676E95;font-style:italic;">//注入断点</span></span>
<span class="line"><span style="color:#82AAFF;">func</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">//触发断点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">monitor</span><span style="color:#A6ACCD;">(func)</span><span style="color:#676E95;font-style:italic;">//当函数被调用时打印提醒</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">monitorEvents</span><span style="color:#A6ACCD;">(window</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">resize</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//注入打印e事件语句</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">查询对象的所有实例</span><span style="color:#89DDFF;">!!!!</span></span>
<span class="line"><span style="color:#82AAFF;">queryObjects</span><span style="color:#A6ACCD;">(Function)</span></span>
<span class="line"><span style="color:#A6ACCD;">	temp1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toStringTag</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GeneratorFunction</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">	temp1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toStringTag</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">AsyncFunction</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">queryObjects</span><span style="color:#A6ACCD;">(Object) </span></span>
<span class="line"><span style="color:#A6ACCD;">	temp1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">a</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__esModule)</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">---</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">//筛选出非Cesium对象</span></span>
<span class="line"><span style="color:#A6ACCD;">	keyskeys </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(Cesium)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">	temp1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">filter</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">i</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">keyskeys</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#A6ACCD;">(i</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">constructor</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name))</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,34),t=[e];function c(r,y,D,F,C,A){return n(),a("div",null,t)}const f=s(o,[["render",c]]);export{u as __pageData,f as default};
