import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const p="/assets/C50988529CA845269C8031A05A3C15FC.a7c15178.png",o="/assets/46D1BE3DFB7C4959A81DDC3740279548.adfaa0ed.png",E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"JS 进阶.md","filePath":"JS 进阶.md"}'),e={name:"JS 进阶.md"},t=l(`<h2 id="有趣难题" tabindex="-1">有趣难题 <a class="header-anchor" href="#有趣难题" aria-label="Permalink to &quot;有趣难题&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">☢</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;"> (</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    Foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;"> (</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;"> (</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> getName</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;"> (</span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getName</span><span style="color:#89DDFF;">(){</span><span style="color:#82AAFF;">alert</span><span style="color:#F07178;"> (</span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Foo</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">//new (Foo.getName());</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">       </span><span style="color:#676E95;font-style:italic;">//(new Foo()).getName();</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Foo</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">//new  ( (new Foo()).getName ) ();</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span></span>
<span class="line"><span style="color:#A6ACCD;">★</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    (</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">b</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//本句无效! ,因为b是自执行,其实已经声明const b=function(){}, b不能再重新赋值了,</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">b</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//打印出函数b</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h2 id="重排重绘" tabindex="-1">重排重绘 <a class="header-anchor" href="#重排重绘" aria-label="Permalink to &quot;重排重绘&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">重排</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//尺寸的变化时</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、添加或删除可见的DOM元素   </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、元素位置改变 </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">、元素尺寸改变（盒子模型）  </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">、内容改变   </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">、最初的页面渲染    </span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">、浏览器窗口尺寸的改变</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">读取宽高、样式、交叉时</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#FFCB6B;">重绘</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//样式变化</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">规避方法</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">        1批量修改</span></span>
<span class="line"><span style="color:#A6ACCD;">        2</span><span style="color:#82AAFF;">离线操作DOM树</span><span style="color:#A6ACCD;">(操作documentFragment</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">最后再把它添加到文档中)(display: none，操作结束后再把它显示出来)</span><span style="color:#676E95;font-style:italic;">//DocumentFragment 不是真实 DOM 树的一部分，它的变化不会触发 DOM 树的重新渲染，且不会导致性能等问题</span></span>
<span class="line"><span style="color:#A6ACCD;">        3对具有复杂动画的元素使用绝对定位</span></span></code></pre></div><h2 id="requestidlecallback" tabindex="-1">requestIdleCallback <a class="header-anchor" href="#requestidlecallback" aria-label="Permalink to &quot;requestIdleCallback&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">requestIdleCallback</span><span style="color:#A6ACCD;">() </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//空闲时运行:解决因为一些不重要的异步任务（如统计上报）导致用户感觉到卡顿</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">与setTimeout的区别: 用的是帧16.6ms里的空闲时间</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">requestIdleCallback</span><span style="color:#A6ACCD;">(myNonEssentialWork</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">timeout</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//第一次调用</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//timeout: 1000 表示至少每秒运行一次, 因为requestIdleCallback利用的是帧16.6ms里的空闲时间, 但不一定有空闲</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">myNonEssentialWork</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">deadline</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 当回调函数是由于timeout才得以执行的话，deadline.didTimeout为true</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> ((</span><span style="color:#A6ACCD;">deadline</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">timeRemaining</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">||</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">deadline</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">didTimeout</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tasks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">//doWorkIfNeeded();</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">tasks</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">shift</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//移除本次执行过的任务</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">tasks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">requestIdleCallback</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">myNonEssentialWork</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//第二次及之后调用</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">[[]][</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">++;</span><span style="color:#676E95;font-style:italic;">//0  </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//[0] 的访问返回的是对&quot;[[]]&quot;的 第0个内存位置的引用，而非位于该位置的值&quot;[]&quot;本身，属于Reference类型</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//++ 会将 第0个内存位置的引用 强制转化为一个基本类型的数字（先转成 &quot;&quot; 再转成 值0 ，++ 操作会将该 值0 加 1 </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//控制台为什么打印出0？ 因为++返回的是“初始值”，而不是经过更新后的值，这是规定，所以 0 被返回给控制台，而 1 通过引用（Reference）放到了数组里</span></span>
<span class="line"><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">++;</span><span style="color:#676E95;font-style:italic;">//ReferenceError </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//x++ 中，几乎等同于 x = x + 1  , 只有 Reference类型的变量可以作为合法的赋值对象,所以=左侧必须为Reference类型，[]不属于Reference类型，所以报错</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">为什么JavaScript </span><span style="color:#82AAFF;">中最大的安全整数</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">^</span><span style="color:#F78C6C;">53</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    64位 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> 1位符号 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> 11位指数 </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> 53位有效数字</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">即时编译JIT</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 编译器第一次执行字节码时，发现有段代码被重复执行多次，就将它编译为机器码保存起来，当再次执行这段代码时，只需要执行编译后的机器码</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">语法错误——SyntaxError</span></span>
<span class="line"><span style="color:#A6ACCD;">运行时错误——ReferenceError</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">暂时性死区</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 在代码块内</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 在let声明语句之前</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 去使用声明的变量</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 会报错</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">a</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// 控制台Error:a is not defined</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">//在当前块作用域中存在a使用let/const声明的情况下，给a赋值10时，只会在当前作用域找变量a，而这时，还未到声明时候，所以控制台Error:a is not defined</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ES6 一个数据结构只要具有 Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iterator 属性，那么就可以其认为是可迭代的。可迭代对象的特点：</span></span>
<span class="line"><span style="color:#A6ACCD;">    具有 Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iterator 属性，Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">iterator</span><span style="color:#A6ACCD;">() 返回的是一个遍历器对象。    可以使用 for </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> 进行循环。    通过被 Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">from 转换为数组。</span></span>
<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">][Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">iterator]()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">//{value: 1, done: false}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">控制台技巧</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    $_</span><span style="color:#676E95;font-style:italic;">//：返回上一个被执行过的值</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//在变量值前使用+的本意是将变量转换为数字    </span></span>
<span class="line"><span style="color:#A6ACCD;">二进制：  只用0和1两个数字，前缀为0b，十进制13可表示为0b1101</span></span>
<span class="line"><span style="color:#A6ACCD;">八进制：  只用0到7八个数字，前缀为0o、</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">，十进制13可表示为0o15、</span><span style="color:#F78C6C;">015</span></span>
<span class="line"><span style="color:#A6ACCD;">十六进制：只用0到9的十个数字，和a到f六个字母，前缀为0x，十进制13可表示为0xd</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sort</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">默认根据字符串的Unicode编码进行排序，具体算法取决于实现的浏览器，在v8引擎中，若数组长度小于10则使用从插入排序，大于10使用的是快排。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//多维数组直接展平(降维)的实现</span></span>
<span class="line"><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">]]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flat</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//[1, 2, 3, 4] 参数为展平的维度,可为Infinity不管几维数组都直接展平一维</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;=</span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> flat </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">acc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">b</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> acc</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#A6ACCD;">(Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#A6ACCD;">(b) </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">flatten</span><span style="color:#A6ACCD;">(b) </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> b)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#676E95;font-style:italic;">//    length还有一个重要的特性，那就是允许你修改它的值，若修改值小于数组本身的最大索引，则会对数组进行部分截取,会影响其他引用此数组的值!!!</span></span>
<span class="line"><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">call</span><span style="color:#676E95;font-style:italic;">//toString则会返回[object type], Object.prototype.toString.call([]) =&gt; &quot;[object Array]&quot; ， 利用这个特性，可以较为精确的实现类型判断。       </span></span>
<span class="line"><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//    用于创建无“副作用”的对象，也就是说，它创建的是一个空对象，不包含原型链与其他属性。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">范畴是值跟函数的容器</span></span>
<span class="line"><span style="color:#A6ACCD;">函子是一种范畴</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">但并留下一个可以将值搞到另一个容器上去的map函数来操作这个函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> Container </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#F78C6C;">debugger</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">__value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    Container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Container</span><span style="color:#A6ACCD;">(x)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Container</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">f</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">f</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">__value</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    Container</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">of</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> x </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Result is </span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> x)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">高阶函数</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">输入函数</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">或</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">输出函数</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">的函数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">柯里化</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 先处理其他参数，再它返回一个去处理剩下的第一个参数的函数</span><span style="color:#676E95;font-style:italic;">//把多参数参数转化成单参数函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">如何实现</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//用闭包把传入参数保存起来，当传入参数的数量足够执行函数时，就开始执行函数</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 柯里化之前</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">add</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 柯里化之后</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">addX</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">y</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">x</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">x</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">addX</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// 3</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">用来</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">延迟计算</span><span style="color:#A6ACCD;">(传参</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">再传参</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">再传参</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">最后再执行)</span><span style="color:#676E95;font-style:italic;">//bind的实现也是同样的原理，reduce</span></span>
<span class="line"><span style="color:#A6ACCD;">         2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">动态创建函数</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">//eg判断浏览器类型，判断完后返回对应的函数，这样就不用每次都判断了</span></span>
<span class="line"><span style="color:#A6ACCD;">         3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">复用参数</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">//eg固定住Object.prototype.toString为toStr方法, 让以后调用直接用tStr方法即可,而不用Object.prototype.toString.call(obj)这么长.</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">移动端电脑端事件对应</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">mousedown</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">startDrag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">touchstart</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">startDrag</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">mousemove</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onDrag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">touchmove</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">onDrag</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">mouseup</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stopDrag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">touchend</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stopDrag</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">mouseleave</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stopDrag</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">        e </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">changedTouches </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">changedTouches[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> e</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//兼容地获得事件</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pageX</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pageY</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#82AAFF;">encodeURIComponent</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">列头柜%#-1-9-1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)   </span><span style="color:#676E95;font-style:italic;">//&quot;%E5%88%97%E5%A4%B4%E6%9F%9C    %25%23  -1-9-1&quot;</span></span>
<span class="line"><span style="color:#82AAFF;">encodeURI</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">列头柜%#-1-9-1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)            </span><span style="color:#676E95;font-style:italic;">//&quot;%E5%88%97%E5%A4%B4%E6%9F%9C    %25#    -1-9-1&quot;</span></span></code></pre></div><h2 id="bind-深拷贝-new-instanceof" tabindex="-1">bind | 深拷贝 | new | instanceof <a class="header-anchor" href="#bind-深拷贝-new-instanceof" aria-label="Permalink to &quot;bind | 深拷贝 | new | instanceof&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">实现bind方法</span><span style="color:#A6ACCD;">(用apply)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mybind</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">t</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">F</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">//通过new F()去使用的话, this就是F的实例对象</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">F</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">t</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">context</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">concat</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#82AAFF;">实现call</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">实现apply</span><span style="color:#A6ACCD;">(): </span><span style="color:#676E95;font-style:italic;">//利用f1.f2()的this是f1</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">c</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//f1.call2(null|123);可以传入原始类型</span></span>
<span class="line"><span style="color:#F07178;">          </span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this;</span><span style="color:#676E95;font-style:italic;">//不用context.fn = this;,因为假如context本身就有fn函数的话就被你覆盖掉了</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">fn</span><span style="color:#F07178;">](</span><span style="color:#89DDFF;">...</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flat</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">Infinity</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//call/apply通用          </span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">delete</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">fn</span><span style="color:#676E95;font-style:italic;">//搞完记得删掉</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">     </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">//test    </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> abc</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">windowabc</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">abc</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">abc</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">b</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">a1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">a2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">a3</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">abc</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">a1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">a2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">a3</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call2</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        b</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call2</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#82AAFF;">实现</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">重点</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">):  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">myNew</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//搞到对象的原型 (把fn.prototype作为{}的__prototype__)  等同  instance.__prototype__ = new fn(); </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//this绑定，顺便 执行构造函数搞到对象的属性   //super() 相当于它</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//如果构造函数有返回的{对象}则优先返回,  否则返回实例</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#82AAFF;">实现数组乱序</span><span style="color:#A6ACCD;">():</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">shuffle</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">arr</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//将数组从后向前遍历，然后将当前元素与随机位置的元素进行交换</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">m</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">m</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">*</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            [</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">m</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">]] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">m</span><span style="color:#F07178;">]]</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">深拷贝</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">实现5个类型的深拷贝</span><span style="color:#A6ACCD;">(): </span></span>
<span class="line"><span style="color:#A6ACCD;">        1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">普通的</span></span>
<span class="line"><span style="color:#A6ACCD;">            JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#A6ACCD;">(Obj))</span><span style="color:#676E95;font-style:italic;">//性能低, 无法处理:闭环的引用 | undefined | symbol | 正则 | 函数| Date不正确 |</span></span>
<span class="line"><span style="color:#A6ACCD;">        2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">可以拷贝属性是[数组]的</span></span>
<span class="line"><span style="color:#A6ACCD;">        3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">可以拷贝属性是[它自己]</span><span style="color:#82AAFF;">的</span><span style="color:#A6ACCD;"> (循环引用)</span><span style="color:#676E95;font-style:italic;">//如果当前需要拷贝的值已存在于栈中，说明有环，直接返回即可</span></span>
<span class="line"><span style="color:#A6ACCD;">        4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">可以拷贝属性名是[Symbol]的</span></span>
<span class="line"><span style="color:#A6ACCD;">        5</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">不会递归爆栈的</span></span>
<span class="line"><span style="color:#FFCB6B;">浅拷贝</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//这样通过JSON解析的方式其实性能并不高，若对象可通过浅拷贝复制请一定使用浅拷贝的方式，不管你使用</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{...</span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">//效果完全等同</span></span>
<span class="line"><span style="color:#A6ACCD;">    Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">assign</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{},</span><span style="color:#A6ACCD;"> obj)</span><span style="color:#676E95;font-style:italic;">//第一层算深拷贝,但是第二层(对象里的对象的属性),是浅拷贝,可能被联动修改!</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">实现</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">assign2 </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">assign2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">target</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// JS对于writable: fasle的属性值的修改静默失败  (让Object(&#39;abc&#39;)[0]=&#39;d&#39;本来是静默失败,现在会报错)</span></span>
<span class="line"><span style="color:#F07178;">                  </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">==</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// 如果是undefined | null 就报错</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;font-style:italic;">throw</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">TypeError</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Cannot convert undefined or null to object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">     </span></span>
<span class="line"><span style="color:#F07178;">                     </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">      </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">to</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Object</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">target</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//让true 10等变得可枚举   </span></span>
<span class="line"><span style="color:#F07178;">                               </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#F78C6C;">4</span><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">index</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//第2个参数开始都是要赋给第1个参数的</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//遍历要合并进去的对象</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">nextSource</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                      </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextKey</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextSource</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//遍历对象里的子子孙孙</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#F78C6C;">4.1</span><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hasOwnProperty</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">nextSource</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextKey</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//只要对象里的子,不要孙(浅拷贝)</span></span>
<span class="line"><span style="color:#F07178;">                              </span><span style="color:#A6ACCD;">to</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">nextKey</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">nextSource</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">nextKey</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                  </span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">to</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">                writable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//属性可读可配置 </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//enumerable: false //不可以用 for...in </span></span>
<span class="line"><span style="color:#F07178;">                configurable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//则该属性能被删除</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">实现</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">instanceof</span><span style="color:#A6ACCD;">):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">instanceOf</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">left</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">right</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//对象沿着原型链找，看能不能摸到构造函数的原型</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">o</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">left</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">F</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">right</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">o</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">)   </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">o</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">F</span><span style="color:#F07178;">)      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">o</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">o</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">__proto__</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">更好地获取__proto__</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#A6ACCD;">    Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">ES6实现私有变量</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Example </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">_private</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">private</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">   </span><span style="color:#676E95;font-style:italic;">//闭包Symbol变量 </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">class</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">Example</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{this</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">_private</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">private</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#F07178;">            getName</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">_private</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Example</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> ex </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Example</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(ex</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getName</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// private</span></span>
<span class="line"><span style="color:#A6ACCD;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(ex</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// undefined</span></span></code></pre></div><h2 id="节流防抖" tabindex="-1">节流防抖 <a class="header-anchor" href="#节流防抖" aria-label="Permalink to &quot;节流防抖&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">节流throttle</span><span style="color:#A6ACCD;">()： </span><span style="color:#676E95;font-style:italic;">//无论触发了多少次,间隔内都只执行一次(忽略掉每隔一段时间内的多次触发) 每次点都要等flag变true</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">用于</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">DOM 元素的拖拽功能实现 射击游戏 </span></span>
<span class="line"><span style="color:#A6ACCD;">    实现方式1：用时间戳new </span><span style="color:#82AAFF;">Date</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">    实现方式2：用setTimeout</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//最简单:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> bool</span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        btn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclick</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">bool</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#676E95;font-style:italic;">/*做一些开心的事情*/</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">bool</span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">bool</span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">},</span><span style="color:#F78C6C;">3000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//封装:</span></span>
<span class="line"><span style="color:#A6ACCD;">       </span><span style="color:#82AAFF;">时间戳版</span><span style="color:#A6ACCD;">(第一次肯定执行):</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> throttle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">func</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">preTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">now</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">now</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">preTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wait</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//第一次是now-0肯定&gt;=wait,肯定执行</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">preTime</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">now</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">定时器版</span><span style="color:#A6ACCD;">(最后一次肯定执行):</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> throttle </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">func</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">wait</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">50</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//第一次进来, 第二次间隔太小的话timer还是数字不为null,就进不来,等到执行了才进来</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#A6ACCD;">wait</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">func</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#A6ACCD;">args</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">防抖debounce</span><span style="color:#A6ACCD;">()：</span><span style="color:#676E95;font-style:italic;">//无论触发了多少次，都只执行间隔第一/最后一次(多次执行变为第一/最后一次执行),</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">区别防抖:它理论上一直动一直不执行</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//延迟执行,太快自动清掉上一次,让上次来不及执行就被清除掉了</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">用于</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">resize</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">scroll 触发事件 文本输入的验证</span></span>
<span class="line"><span style="color:#A6ACCD;">    实现方式1：用setTimeout</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">debounce</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">interval</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2000</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#82AAFF;">clearTimeout</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">timeout</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">fn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">arguments</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">interval</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="页面从输入-url到页面加载显示完成" tabindex="-1">页面从输入 URL到页面加载显示完成 <a class="header-anchor" href="#页面从输入-url到页面加载显示完成" aria-label="Permalink to &quot;页面从输入 URL到页面加载显示完成&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么 重点</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">0.</span><span style="color:#A6ACCD;"> 缓存</span></span>
<span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;"> DNS 查询</span></span>
<span class="line"><span style="color:#F78C6C;">1.1</span><span style="color:#A6ACCD;"> DNS 缓存</span><span style="color:#676E95;font-style:italic;">//ISP、局域网、操作系统、浏览器等都会有相应的DNS缓存机制。</span></span>
<span class="line"><span style="color:#F78C6C;">1.2</span><span style="color:#A6ACCD;"> 减少页面的唯一域名</span><span style="color:#676E95;font-style:italic;">//因为每次 DNS 查询就是查找唯一域名的过程，那么域名越少，DNS 查询就越少，应该尽量将资源放在同一域名。当然这样做又有其他问题，下文详解。</span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#A6ACCD;"> TCP 连接</span><span style="color:#676E95;font-style:italic;">//TCP 连接复用（TCP Connection Reuse），在 HTTP 请求头中的 Connection 上加 keep-alive；HTTP/2.0 多路复用等。</span></span>
<span class="line"><span style="color:#F78C6C;">3.</span><span style="color:#A6ACCD;"> HTTP 请求及响应</span></span>
<span class="line"><span style="color:#F78C6C;">3.1</span><span style="color:#A6ACCD;"> 避免不必要的重定向</span><span style="color:#676E95;font-style:italic;">//最浪费的重定向经常发生、而且很容易被忽略：URL 末尾应该添加/但未添加。比如，访问http://astrology.yahoo.com/astrology将被301重定向到 http://astrology.yahoo.com/astrology/（注意末尾的 /）。如果使用 Apache，可以通过Alias或mod_rewrite或DirectorySlash解决这个问题。</span></span>
<span class="line"><span style="color:#F78C6C;">3.2</span><span style="color:#A6ACCD;"> Cookie</span><span style="color:#676E95;font-style:italic;">//3.2.1减少 Cookie 大小, 每次请求都会带上对应的 Cookie，减少 Cookie 大小可以降低其对响应速度的影响：注意设置 Cookie 的 domain 级别，如无必要，不要影响到 sub-domain；设置合适的过期时间。</span></span>
<span class="line"><span style="color:#F78C6C;">3.2</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> 静态资源放无 Cookie 服务器上</span><span style="color:#676E95;font-style:italic;">//静态资源一般无需使用 Cookie，可以把它们放在使用二级域名或者专门域名的无 Cookie 服务器上，降低 Cookie 传送的造成的流量浪费，提高响应速度。</span></span>
<span class="line"><span style="color:#F78C6C;">3.3</span><span style="color:#A6ACCD;"> 添加 Expires 或 Cache</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Control 响应头</span><span style="color:#676E95;font-style:italic;">//HTTP/1.1 增加的 Cache-Control，它比 Expires 等好在其设定时间是相对的，避免了用户本地设置时间落后所造成的无法良好缓存的问题等。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">强缓存</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            Cache</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">Control</span><span style="color:#A6ACCD;">(HTTP1</span><span style="color:#89DDFF;">.</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)：有很多属性，不同的属性代表的意义也不同：</span></span>
<span class="line"><span style="color:#A6ACCD;">            private：客户端可以缓存</span></span>
<span class="line"><span style="color:#A6ACCD;">            public：客户端和代理服务器都可以缓存</span></span>
<span class="line"><span style="color:#A6ACCD;">            max</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">t：缓存内容将在t秒后失效</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">no-cache：用之前问服务器一下,配合 ETag 使用</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">            no</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">store：所有内容都不会缓存</span></span>
<span class="line"><span style="color:#F78C6C;">3.4</span><span style="color:#A6ACCD;"> 配置 Etag</span><span style="color:#676E95;font-style:italic;">//通过如 MD5 等加密算法，设置缓存体的 Etag 配合 3.3 的缓存时间使用，这样 Cache-Control 就可以设置较长时间（max-age 设置个十年半载 ），只要浏览器缓存中资源与源服务器中的资源 Etag 不一致，说明内容更新了，此时再下载新资源；Etag 匹配成功则直接响应 304，不用重复下载了用户自然感觉很快。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">协商缓存</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            Etag：服务器响应请求时，通过此字段告诉浏览器当前资源在服务器生成的唯一标识（生成规则由服务器决定）</span></span>
<span class="line"><span style="color:#F78C6C;">3.5</span><span style="color:#A6ACCD;"> 使用 Gzip</span><span style="color:#676E95;font-style:italic;">//Gzip 压缩通常可以减少 70% 的响应大小 Accept-Encoding: gzip, deflate ,服务器通过Content-Encoding: gzip响应头来通知客户端。</span></span>
<span class="line"><span style="color:#A6ACCD;">        Webpack开启</span></span>
<span class="line"><span style="color:#A6ACCD;">        Nginx开启</span></span>
<span class="line"><span style="color:#F78C6C;">3.6</span><span style="color:#A6ACCD;"> 延迟加载（懒加载）</span><span style="color:#676E95;font-style:italic;">//减少初始渲染的DOM元素数量，提高速度。等首屏加载完成或者用户操作时，再去渲染剩余的页面内容。</span></span>
<span class="line"><span style="color:#A6ACCD;">        使用link标签的rel属性设置   prefetch（这段资源将会在未来某个导航或者功能要用到，但是本资源的下载顺序权重比较低，prefetch通常用于加速下一次导航）</span></span>
<span class="line"><span style="color:#F78C6C;">3.7</span><span style="color:#A6ACCD;"> 预加载</span><span style="color:#676E95;font-style:italic;">//预先加载利用浏览器空闲时间请求将来要使用的资源，以便用户访问下一页面时更快地响应。</span></span>
<span class="line"><span style="color:#A6ACCD;">        preload（preload将会把资源得下载顺序权重提高，使得关键数据提前下载好，优化页面打开速度）</span></span>
<span class="line"><span style="color:#F78C6C;">4.</span><span style="color:#A6ACCD;"> 浏览器解析渲染页面</span></span>
<span class="line"><span style="color:#A6ACCD;">        服务端渲染SSR</span></span>
<span class="line"><span style="color:#F78C6C;">4.1</span><span style="color:#A6ACCD;"> 写对文档类型声明 </span><span style="color:#89DDFF;">&lt;!</span><span style="color:#A6ACCD;">DOCTYPE html</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">//防止“怪异模式(兼容模式)”的渲染模式。不写或写错文档类型声明，会浪费浏览器渲染页面的时间或引起错误排版。</span></span>
<span class="line"><span style="color:#F78C6C;">4.2</span><span style="color:#A6ACCD;"> CSS 放在 </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">head</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 中</span><span style="color:#676E95;font-style:italic;">//把样式表放在 &lt;head&gt; 中可以让页面渐进渲染，尽早呈现视觉反馈，给用户加载速度很快的感觉。</span></span>
<span class="line"><span style="color:#F78C6C;">4.2</span><span style="color:#A6ACCD;"> 把脚本放在页面底部</span><span style="color:#676E95;font-style:italic;">//防阻塞 ,一些特殊场景无法将脚本放到页面底部的，可以考虑&lt;script&gt;的以下属性：defer 属性；HTML5 新增的async属性。</span></span>
<span class="line"><span style="color:#F78C6C;">4.3</span><span style="color:#A6ACCD;"> 使用外部 JavaScript 和 CSS</span><span style="color:#676E95;font-style:italic;">//外部文件可以被浏览器缓存重用</span></span>
<span class="line"><span style="color:#F78C6C;">4.4</span><span style="color:#A6ACCD;"> 合并和压缩 JS</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">CSS 等文件</span><span style="color:#676E95;font-style:italic;">//通过该方法减少页面所需资源，减少请求数量，加快响应时间。现在 webpack 打包工具都已经默认实现了。</span></span>
<span class="line"><span style="color:#F78C6C;">4.5</span><span style="color:#A6ACCD;"> 减少 DOM 操作和使用高效的事件处理</span><span style="color:#676E95;font-style:italic;">//缓存已经访问过的元素；使用 DocumentFragment 暂存 DOM，整理好以后再插入 DOM 树；操作 className，而不是多次读写 style；</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//避免使用 JavaScript 修复布局；</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//尽早处理事件，在 DOMContentLoaded 即可进行，无需等待样式表、图像和子框架的完全加载触发load 以后。</span></span>
<span class="line"><span style="color:#F78C6C;">4.6</span><span style="color:#A6ACCD;"> 图片优化</span><span style="color:#676E95;font-style:italic;">//如何将图片变得又小又好看是一个工程师实力的体现，这里不过多赘述，大家可以查看我后文提供的资源。</span></span>
<span class="line"><span style="color:#F78C6C;">4.7</span><span style="color:#A6ACCD;"> 使用 CND</span><span style="color:#676E95;font-style:italic;">//内容分发网络，利用最靠近每位用户的服务器传递给用户。CDN 没有 Cookie，使用 CDN 可以减少 Cookie；CND 会自动合并脚本文件等，减少请求数量；当然，使用 CND 同时也增加了一个域名，增大了同时请求数量。</span></span></code></pre></div><h2 id="_7种原始类型" tabindex="-1">7种原始类型 <a class="header-anchor" href="#_7种原始类型" aria-label="Permalink to &quot;7种原始类型&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">7种原始类型</span><span style="color:#676E95;font-style:italic;">//(也就是不用寻址直接能用的)(占有固定大小的空间)有6种:</span></span>
<span class="line"><span style="color:#A6ACCD;">        Boolean</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">        String</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">        Number</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">BigInt</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">        Undefined</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">        Null</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">        Symbol</span></span>
<span class="line"><span style="color:#82AAFF;">引用值</span><span style="color:#A6ACCD;">(值的大小不固定)</span></span>
<span class="line"><span style="color:#89DDFF;">   </span><span style="color:#676E95;font-style:italic;">//栈中读取内存地址， 然后再通过地址找到堆中的值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">前端开发</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">  a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#676E95;font-style:italic;">// 这时b的值是多少? </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//a = null其实仅仅只是做了一个释放引用的操作，让 a 原本对应的值失去引用，脱离执行环境，这个值会在下一次垃圾收集器执行操作时被找到并释放。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    a</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">x </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//这时a,b的值是多少? </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//.的优先级高于=，所以先执行a.x， a.x位置先被设undefined在栈里,b原来引用的该位置的{n:1}就变成{n:1,x:undefined}, </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//a变为引用{n:2}, a.x这个位置也就是b还在引用的哪个位置, 也由undefined变成引用{n:2},</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(fun)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person)</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> person </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Eric</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person)</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fun</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">person</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">person</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Tom</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">person</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">fun</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(person)</span></span></code></pre></div><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><blockquote><p>定义在外函数内部的内函数,且内函数引用了外函数的变量</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">用处 </span><span style="color:#676E95;font-style:italic;">//在函数外部访问函数内部变量:它可以访问它外部的变量，而外部环境不能访问它内部的变量，可以读取 外函数 的内部变量（并且这些变量的值始终保持在内存中）</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">私有化变量</span></span>
<span class="line"><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">模拟块级作用域 </span><span style="color:#676E95;font-style:italic;">//函数内部属性[[scope]]代表的是作用域</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">外函数</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#676E95;font-style:italic;">//闭包</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">外函数的内部变量</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//外部访问不到我,嘿嘿</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#82AAFF;">内函数</span><span style="color:#89DDFF;">=</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span><span style="color:#A6ACCD;">外函数的内部变量</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">修改值</span><span style="color:#89DDFF;">};</span><span style="color:#676E95;font-style:italic;">//外部可以访问我,用我来修改闭包里的变量;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">内函数</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">(特点是外函数执行完后还可以用内函数改变它内部的变量)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">那为什么外函数的上下文被销毁后内函数还能访问外函数的变量</span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">外函数的上下文被销毁,但外函数变量依然或在内存中, 通过 内函数内部属性</span><span style="color:#89DDFF;">[</span><span style="color:#C3E88D;">[scope</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">]指向内存中的外函数变量</span><span style="color:#89DDFF;">/</span></span></code></pre></div><h2 id="i-i-隐式转换" tabindex="-1">--i | i-- | 隐式转换 <a class="header-anchor" href="#i-i-隐式转换" aria-label="Permalink to &quot;--i | i-- | 隐式转换&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">i </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> i</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">的不同</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)           </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//5，4，3，2，1   //i进来的值为5，4，3，2，1  //i--打印完再减</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)           </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//4，3，2，1，0   //i进来的值为5，4，3，2，1 //--i减完再打印</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a3</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)         </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//4，3，2，1     //--i减完再进入循环  //i进来的值为4，3，2，1</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a4</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">)         </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//4，3，2，1，0  //i--进入循环再减   //i进来的值为5，4，3，2，1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">如果while是嵌套的</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#A6ACCD;">(条件) </span><span style="color:#82AAFF;">你在下次使用的时候条件要复原吧</span><span style="color:#A6ACCD;">(所以</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">while不要嵌套</span><span style="color:#89DDFF;">!!!</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">对于二维数组</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">while里面每次只移动一个位置</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">不要同时x</span><span style="color:#89DDFF;">++|</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">--|</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">++|</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">(不然很乱)</span></span>
<span class="line"><span style="color:#A6ACCD;">递归的话要注意结束条件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">为什么不要用while</span><span style="color:#A6ACCD;">(i)遍历数组</span><span style="color:#89DDFF;">!!!</span><span style="color:#A6ACCD;">:</span></span>
<span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> array</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a1</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)           </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//undefined，5，4，3，2 </span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a2</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)           </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//5，4，3，2，1   //完美，但是还是老老实实用&gt;  &lt;  =作为while的条件吧</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a3</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">)         </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//5，4，3，2   </span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">a4</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">)         </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">array</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">//5，4，3，2，1，undefined </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">隐式转换</span></span>
<span class="line"><span style="color:#A6ACCD;">    数学运算符中的类型转换</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//1.减、乘、除转数字</span></span>
<span class="line"><span style="color:#A6ACCD;">        2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">加法有特殊性</span><span style="color:#A6ACCD;">(还可以用来拼接字符串) </span><span style="color:#676E95;font-style:italic;">//字符串 &gt; 数字 &gt; 引用类型</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">、有String优先转String</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、无String有数字优先转数字，</span><span style="color:#82AAFF;">ToNumber</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">null-&gt;</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">undefined-&gt;NaN</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、对象的话将值转为原始值，</span><span style="color:#82AAFF;">ToPrimitive</span><span style="color:#A6ACCD;">()          </span></span>
<span class="line"><span style="color:#A6ACCD;">    逻辑语句中的类型转换 </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">//NaN &gt; 数字 &gt; 字符串 &gt; Boolean &gt; 引用类型</span></span>
<span class="line"><span style="color:#A6ACCD;">          1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">NaN </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">NaN</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#A6ACCD;">          2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Boolean</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">String优先转数字</span></span>
<span class="line"><span style="color:#A6ACCD;">          3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">只有null </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> undefined是true </span><span style="color:#676E95;font-style:italic;">//null、undefined和其他任何结果的比较值都为false</span></span>
<span class="line"><span style="color:#A6ACCD;">          4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">原始类型与引用类型比较 </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、对象的话将值转为原始值，</span><span style="color:#82AAFF;">ToPrimitive</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//ToPrimitive([])是&quot;&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">例如</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#FFCB6B;">eg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">==!</span><span style="color:#A6ACCD;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">  []</span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;">  </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#FFCB6B;">eg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}+</span><span style="color:#A6ACCD;">[]  </span><span style="color:#676E95;font-style:italic;">//0, 把{}当作区块语句相当于+[]    </span></span>
<span class="line"><span style="color:#A6ACCD;">          5</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">引用类型与引用类型比较</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">直接比较地址</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">ToPrimitive</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">        是原始值则返回</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">是对象</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">valueOf</span><span style="color:#A6ACCD;">()是原始值则返回</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">null-&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">null</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">                []</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#89DDFF;">&#39;&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">true</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">()是原始则返回 </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//[1,2,3,4]转为&quot;1,2,3,4&quot;，相当于调用数组的join()</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//因为toString方法默认调用join方法</span></span></code></pre></div><h2 id="技巧" tabindex="-1">技巧 <a class="header-anchor" href="#技巧" aria-label="Permalink to &quot;技巧&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//&quot;object&quot; //[]、{} 都是引用数据类型 Object</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">三大家族 </span><span style="color:#82AAFF;">offset</span><span style="color:#A6ACCD;">(元素位置相对于其offsetParent元素)  </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">  scroll  </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">  client 的区别：    </span></span>
<span class="line"><span style="color:#A6ACCD;">    宽高</span></span>
<span class="line"><span style="color:#A6ACCD;">        offsetWidth：实际 包含边框   的宽高</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">scrollWidth</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 实际 不包含边框 的宽高</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">clientWidth</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> scrollWidth减掉overflow部分</span></span>
<span class="line"><span style="color:#A6ACCD;">    滚动的Left</span><span style="color:#89DDFF;">/</span><span style="color:#FFCB6B;">Top</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        scrollLeft：x滚动条滚动的距离</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">屏幕宽度</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    滚动条</span></span>
<span class="line"><span style="color:#A6ACCD;">        window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">innerWidth</span></span>
<span class="line"><span style="color:#A6ACCD;">    不含滚动条</span></span>
<span class="line"><span style="color:#A6ACCD;">       document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">documentElement  </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth </span><span style="color:#676E95;font-style:italic;">// 可见区域宽度 (建议用这个)   //返回 &lt;html&gt; 元素，且它一定是该文档的根元素</span></span>
<span class="line"><span style="color:#A6ACCD;">       document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body             </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">clientWidth </span><span style="color:#676E95;font-style:italic;">//BODY对象宽度                //返回 &lt;body&gt; 元素</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">box1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">style</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cssText </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">width: 300px;height: 300px;background-color: green;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//通过cssText一次性设置行内样式</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getComputedStyle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">要获取样式的元素</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">伪元素</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//获取当前样式</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">换行</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">文字</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        word</span><span style="color:#89DDFF;">-</span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">all</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//适合整个段落,  任何两个字符之间插入分词符  </span></span>
<span class="line"><span style="color:#A6ACCD;">        overflow</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">wrap</span><span style="color:#676E95;font-style:italic;">//适合中间某行突兀溢出的</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">空格</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        white</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">space：空白处如何换行</span></span>
<span class="line"><span style="color:#FFCB6B;">不换行</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//overflow为hidden时</span></span>
<span class="line"><span style="color:#A6ACCD;">        text</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">overflow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ellipsis</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//溢出的文字增加点点点</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#FFCB6B;">文字截断省略号</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">overflow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> hidden</span><span style="color:#89DDFF;">;</span><span style="color:#FFCB6B;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> 50px</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">单行</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">overflow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ellipsis</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   white</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">space</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> nowrap</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">多行</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">display</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">webkit</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">box</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">webkit</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">box</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">orient</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> vertical</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">webkit</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">line</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">clamp</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">兼容</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;">p</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">after</span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">content</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="babel" tabindex="-1">babel <a class="header-anchor" href="#babel" aria-label="Permalink to &quot;babel&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">babel </span><span style="color:#F78C6C;">7</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    重大变化是把所有 babel</span><span style="color:#89DDFF;">-*</span><span style="color:#A6ACCD;"> 重命名为 </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">babel</span><span style="color:#676E95;font-style:italic;">/*</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    从 Babel 7 开始，Babel 团队切换到了作用域包，所以你现在必须@babel/core使用babel-core.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      &quot;presets&quot;: [</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    -   &quot;env&quot; //babel6 ,env 等价于 latest，也等价于 es2015 + es2016 + es2017 三个相加(不包含 stage-x 中的插件)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    +   &quot;@babel/preset-env&quot;//babel7</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      ]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">核心包</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/core</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/parser</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/traverse</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/generator</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/core是 Babel 编译器本身；它公开了babel.transform方法，其中transformedCode = transform(src).code.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        编译器可以分为 3 个部分：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            解析器：@babel/parser</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            转换器[s]：所有插件/预设</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">                这些都用于@babel/traverse遍历 AST</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            生成器：@babel/generator</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        流程是这样的：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">            输入字符串 -&gt;@babel/parser解析器 -&gt; AST-&gt; 转换器 [s] -&gt; AST-&gt; @babel/generator-&gt; 输出字符串</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">其他</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/cli是运行@babel/core并帮助输出到目录、文件、标准输出等的 CLI 工具（也包括@babel/nodecli）。查看文档。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/types用于验证、构建和更改 AST 节点。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/runtime与 polyfill 类似，不同之处在于它不修改全局范围并且将与@babel/plugin-transform-runtime（通常在库/插件代码中）一起使用。查看文档。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        //babel-polyfill直接增加了全局对象实现太粗暴,所以库推荐使用@babel/runtime</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/register是一种通过绑定到 Node.js 来自动使用 Babel 动态编译文件的方法require。查看文档。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/template是一个帮助函数，允许从代码的字符串表示中构造 AST 节点；这消除了@babel/types用于构建 AST 节点的乏味。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/helpers是一些 Babel 插件中使用的一组预制@babel/template函数。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/code-frame是一个独立的包，用于生成打印源代码并指向错误位置的错误。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    core-js 是JavaScript标准库的polyfill</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">预设</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/preset-env  根据您支持的环境自动确定您需要的插件和 polyfill</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    在 Babel 6 之后，删除了默认转换；如果你没有指定任何插件/预设，Babel 只会返回原始源代码。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    Babel 中使用的转换器是转换特定事物的独立代码段。例如：es2015-arrow-functions转换专门将箭头函数更改为常规函数。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    预设只是一组插件，可以更轻松地运行一组转换，而无需手动指定每个转换。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    执行顺序</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        Plugin 从前到后执行,在Preset之前运行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        Preset 从后向前执行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">插件//插件是 Babel 的核心，也是它工作的原因。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    转换插件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        插件有很多种：将 ES6/ES2015 转换为 ES5、转换为 ES3、缩小、JSX、流、实验特性等等。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    语法插件</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        @babel/plugin-syntax-xxx 这些只是使转换插件能够解析某些功能（转换插件已经包含语法插件，因此您不需要两者）</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">帮手</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    @babel/helper-x 这些主要用于各种插件的内部使用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">webpack //npm install --save-dev babel-loader @babel/core #就完事了其他都是@babel/core的依赖</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//最简单例子(不使用任何插件):</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    const parser = require(&#39;@babel/parser&#39;);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    const traverse = require(&#39;@babel/traverse&#39;).default</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    import { transform } from &quot;@babel/core&quot;;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    const generate = require(&#39;@babel/generator&#39;).default</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //1.解析</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    const ast = parser.parse(&#39;const a = 1&#39;);</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //2.转换</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    traverse(ast, {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        VariableDeclaration(path, state) {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">          path.node.kind = &#39;var&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    });</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    //3.生成</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    const transformedCode = generate(ast).code// 将处理好的 AST 放入 generate</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    console.log(transformedCode)</span></span></code></pre></div><p><img src="`+p+`" alt=""></p><h2 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-label="Permalink to &quot;CSRF&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">安全</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">跨站攻击</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//Cross-site /重点/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">请求伪造</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">CSRF</span><span style="color:#A6ACCD;">(request forgery) 利用登录态信息</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//网站A登录了,浏览器存在网站A的cookie, 网站B(或邮件)里有个链接访问了网站A的AddNum接口, 浏览器会自动带网站A的cookie给服务器,所以服务器正常返回</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//注意: cookie保证了用户可以处于登录状态，但网站B其实拿不到 cookie ,所以 只能增改删,无法获取服务器数据(因为浏览器的同源策略)  //防御：</span></span>
<span class="line"><span style="color:#A6ACCD;">            1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">token</span><span style="color:#676E95;font-style:italic;">//(除cookie外另加一个专门反csrf的验证token, 每个请求体都要带该token)</span></span>
<span class="line"><span style="color:#A6ACCD;">            2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">Referer和Origin头</span><span style="color:#A6ACCD;">(https不发送</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">限制只能从A站访问A站</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">不能从B站访问A站</span></span>
<span class="line"><span style="color:#A6ACCD;">            3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">最有效是人机验证码</span></span>
<span class="line"><span style="color:#A6ACCD;">            4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">利用 SameSite（三种模式：Strict、Lax、None） 让浏览器禁止第三方站点发起请求携带关键 Cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">脚本攻击</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">XSS</span><span style="color:#A6ACCD;">(Scripting)</span><span style="color:#676E95;font-style:italic;">//输入框注入        //1.反射型(提交原样返回) | 2.存储型(显示评论时)                   </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//XSS：是向网站 A 注入 JS代码，然后执行 JS 里的代码，篡改网站A的内容。//防御：    </span></span>
<span class="line"><span style="color:#A6ACCD;">            1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">校验表单</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">转义掉</span><span style="color:#676E95;font-style:italic;">//Content-Type: application/json(JSONP解决XSS)</span></span>
<span class="line"><span style="color:#A6ACCD;">            2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">HttpOnly 防止注入js读取Cookie</span></span>
<span class="line"><span style="color:#A6ACCD;">            3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CSP让本站运行不了别的站的内容</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">中间人攻击</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//夹在C/S之间</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//防御: HTTPS的话要:校验域名\\证书</span></span>
<span class="line"><span style="color:#A6ACCD;">    防止网页被其他网页iframe嵌套：</span></span>
<span class="line"><span style="color:#A6ACCD;">        X</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Frame</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">SAMEORIGIN </span><span style="color:#676E95;font-style:italic;">//表示该页面可以在相同域名页面的 frame 中展示</span></span></code></pre></div><h2 id="base64规则" tabindex="-1">Base64规则 <a class="header-anchor" href="#base64规则" aria-label="Permalink to &quot;Base64规则&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">Base64</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">eg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">字母M </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> 6个6个地取ASCII编码的2进制 </span><span style="color:#676E95;font-style:italic;">/*如M的ASCCI是77即01001101,前6位010011即(19)*/</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">  (</span><span style="color:#F78C6C;">19</span><span style="color:#A6ACCD;">)对应64个[可打印字符]里的T</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">图片被编码之后，生成的字符串编码大小一般而言都会比原文件稍大一些,  Man-&gt;TWFu</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">文本变多了</span><span style="color:#89DDFF;">)/</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">用处</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;">HTML内嵌Base64编码图片</span><span style="color:#A6ACCD;">(减少不必要请求)</span></span></code></pre></div><p><img src="`+o+'" alt=""></p><h2 id="浏览器原理" tabindex="-1">浏览器原理 <a class="header-anchor" href="#浏览器原理" aria-label="Permalink to &quot;浏览器原理&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">渲染进程 </span></span>\n<span class="line"><span style="color:#A6ACCD;">    1个 主线程    </span></span>\n<span class="line"><span style="color:#A6ACCD;">    1个 合成线程 和 光栅线程</span></span>\n<span class="line"><span style="color:#A6ACCD;">    n个 </span><span style="color:#82AAFF;">工作线程</span><span style="color:#A6ACCD;">(worker等)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#FFCB6B;">标签模板字符串</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">tag</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">s</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">v1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">v2</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">/*用来过滤字符串等*/</span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">tag</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> world </span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> b</span><span style="color:#89DDFF;">}`</span><span style="color:#A6ACCD;">  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    等同于  </span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">tag</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;"> world </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> b </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> b)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="以下-git-repositories-on-chromium-的仓库前缀分别代表什么" tabindex="-1">以下 Git repositories on chromium 的仓库前缀分别代表什么? <a class="header-anchor" href="#以下-git-repositories-on-chromium-的仓库前缀分别代表什么" aria-label="Permalink to &quot;以下 Git repositories on chromium 的仓库前缀分别代表什么?&quot;">​</a></h3><ol><li>angle/ - 用于支持OpenGL ES 2.0在Windows平台的实现库。</li><li>aosp/ - 用于支持Android开源项目的代码库。</li><li>apps/ - Chromium浏览器客户端的应用程序代码库。</li><li>arc/ - 用于支持Android应用于Chrome OS的库。</li><li>breakpad/ - 用于收集和报告应用程序崩溃的库。</li><li>cast_core/ - 用于支持Google Cast技术的核心代码库。</li><li>chrome_extensions/ - Chromium浏览器插件的代码库。</li><li>chromeos/ - Chrome OS操作系统的代码库。</li><li>chromium/ - Chromium浏览器核心代码库。</li><li>chromiumos/ - Chromium OS操作系统的代码库。</li><li>Library/ - 用于支持Chromium浏览器的共享库。</li><li>Firmware/ - 用于支持Chromium浏览器硬件的固件库。</li><li>codecs/ - 用于支持Chromium浏览器音视频编码的库。</li><li>codesearch/ - 用于支持代码搜索的库。</li><li>crashpad/ - 用于收集和报告应用程序崩溃的库（替代Breakpad）。</li><li>crosvm/ - 用于支持虚拟机监视器的库。</li><li>dart/ - 用于支持Dart语言的库。</li><li>deps/ - 用于支持Chromium浏览器的依赖库。</li><li>devtools/ - 用于支持开发者工具的库。</li><li>enterprise/ - 用于支持企业版Chromium浏览器的代码库。</li><li>experimental/ - 用于包含实验性代码的仓库。</li><li>extensions/ - Chromium浏览器扩展的代码库。</li><li>external/ - 包含第三方的代码库。</li><li>git/ - 用于支持Git源代码管理系统的库。</li><li>infra/ - 用于支持测试、构建和持续集成的库。</li><li>infradata/ - 用于支持网络和通信的库。</li><li>libyuv/ - 用于支持图像和视频处理的库。</li><li>native_client/ - 用于支持原生客户端的库。</li><li>openscreen/ - 用于支持开放屏幕协议的库。</li><li>playground/ - 用于尝试新想法或实验性代码的仓库。</li><li>private/ - 私有的代码库。</li><li>src/ - Chromium浏览器的源代码库。</li><li>test/ - 用于测试Chromium浏览器的代码库。</li><li>testing/ - 用于支持测试的库。</li><li>testrepo/ - 用于包含测试代码的仓库。</li><li>v8/ - 用于支持V8 JavaScript引擎的库。</li><li>vcbox/ - 用于支持虚拟容器的库。</li><li>weave/ - 用于支持Google Sync的库。</li><li>webm/ - 用于支持WebM视频格式的库。</li></ol><p>用depot_tools拉取项目, 它是一个Google开源项目的命令行工具集合 用GN构建系统构建, 它采用Python作为脚本语言，使用类似于Makefile的语法描述构建过程，并使用Ninja构建工具执行构建任务。</p><h3 id="探索v8" tabindex="-1">探索V8 <a class="header-anchor" href="#探索v8" aria-label="Permalink to &quot;探索V8&quot;">​</a></h3><ol><li><ol><li><a href="https://github1s.com/v8/v8" target="_blank" rel="noreferrer">v8/v8 - GitHub1s</a></li></ol></li><li><a href="https://github1s.com/v8/v8/blob/0.1.5/src/apinatives.js" target="_blank" rel="noreferrer">最原始版本 2008 年 8 月 11 日 - 0.1.5版本 - v8/v8 - GitHub1s</a></li><li>对于最新的v8, 不直接克隆项目, 而要用depot_tools拉取项目, 它是一个Google开源项目的命令行工具集合</li><li>用GN构建系统构建, 它采用Python作为脚本语言，使用类似于Makefile的语法描述构建过程，并使用Ninja构建工具执行构建任务</li></ol><h4 id="src-init-bootstrapper-cc-负责引擎的初始化工作。" tabindex="-1">src\\init\\bootstrapper.cc 负责引擎的初始化工作。 <a class="header-anchor" href="#src-init-bootstrapper-cc-负责引擎的初始化工作。" aria-label="Permalink to &quot;src\\init\\bootstrapper.cc 负责引擎的初始化工作。&quot;">​</a></h4><blockquote><p>使V8引擎能够对JavaScript代码进行解析、编译和执行，并提供了丰富的内置对象、函数和方法等支持</p></blockquote><ol><li>初始化堆内存：创建堆内存空间并初始化堆管理器等相关数据结构，为运行时环境提供堆内存支持。</li><li>构建全局对象和全局变量：构建全局对象，包括Object, String, Array, Function等对象，在全局作用域下注册全局变量，为JS代码提供全局对象和变量的支持。包括: <code>Empty\\Object\\Global\\Native context\\Object\\Function\\Array\\ArrayIterator\\Number\\Boolean\\String\\StringIterator\\Symbol\\Date\\RegExpString Iterator\\BoundFunction\\sloppy arguments map\\fast and slow aliased arguments map\\strict mode arguments map\\context extension\\Iterator\\%WrapForValidIteratorPrototype%\\%IteratorHelperPrototype%\\Helper maps\\WrappedFunction</code>依赖于<strong>js-call-reducer.cc</strong></li><li>生成JavaScript内置对象：生成Math, JSON, Date等内置对象的模板，并在全局作用域下注册对应的对象，为内置对象的使用提供支持。</li><li>安装内置方法和函数：安装全局函数和内置对象的方法，如Array.prototype.push, Object.keys等，为JS代码的执行提供基础的函数和方法支持。</li><li>初始化编译器和解释器：初始化编译器和解释器，包括生成JIT代码，解析、编译、执行JavaScript代码，为JS代码执行提供支持。</li></ol><h4 id="js-call-reducer-cc实现javascript函数调用" tabindex="-1">js-call-reducer.cc实现JavaScript函数调用 <a class="header-anchor" href="#js-call-reducer-cc实现javascript函数调用" aria-label="Permalink to &quot;js-call-reducer.cc实现JavaScript函数调用&quot;">​</a></h4><ol><li>解析函数表达式，获取函数调用的参数、作用域和上下文等信息。</li><li>调用JavaScript实现的函数，并将参数传递给该函数。</li><li>执行JavaScript函数中的代码，并将执行结果返回给调用方。</li><li>处理JavaScript函数中的异常，并将异常信息返回给调用方。</li><li>实现函数的递归调用和闭包等高级特性。</li><li>对函数调用的性能进行优化，提高JavaScript代码的执行效率。</li></ol><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//string.prototype.includes在</span></span>\n<span class="line"><span style="color:#A6ACCD;">Reduction </span><span style="color:#FFCB6B;">JSCallReducer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">:ReduceStringPrototypeIndexOfInclude</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//array.prototype.includes在</span></span>\n<span class="line"><span style="color:#A6ACCD;">Reduction </span><span style="color:#FFCB6B;">JSCallReducer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">:ReduceArrayIncludes</span></span>\n<span class="line"><span style="color:#A6ACCD;">	ReduceArrayPrototypeIndexOfIncludes</span></span>\n<span class="line"><span style="color:#A6ACCD;">		GetCallableForArrayIndexOfIncludes</span></span>\n<span class="line"><span style="color:#A6ACCD;">			kArrayIncludesSmiOrObject等各分类</span></span>\n<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;">\\b</span><span style="color:#C3E88D;">uiltins</span><span style="color:#A6ACCD;">\\b</span><span style="color:#C3E88D;">uiltins-array-gen.cc</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#A6ACCD;">				</span><span style="color:#82AAFF;">TF_BUILTIN</span><span style="color:#A6ACCD;">(ArrayIncludesSmiOrObject</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ArrayIncludesIndexofAssembler)	</span></span>\n<span class="line"><span style="color:#A6ACCD;">							</span></span>\n<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#82AAFF;">底层实现在</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">src</span><span style="color:#A6ACCD;">\\b</span><span style="color:#C3E88D;">uiltins</span><span style="color:#A6ACCD;">\\b</span><span style="color:#C3E88D;">uiltins-array-gen.cc</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ArrayIncludesIndexofAssembler</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">:GenerateSmiOrObject</span></span>\n<span class="line"><span style="color:#A6ACCD;">		该段代码是 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">ArrayIncludesIndexofAssembler</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 类中的 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">GenerateSmiOrObject()</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 方法的实现。</span></span>\n<span class="line"><span style="color:#A6ACCD;">		该方法的目的是生成执行 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">Array.prototype.includes()</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 方法的汇编代码，</span></span>\n<span class="line"><span style="color:#A6ACCD;">		用于判断数组 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">elements</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 是否包含指定元素 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">search_element</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">。该方法接受多个参数，</span></span>\n<span class="line"><span style="color:#A6ACCD;">		包括 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">variant</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">（搜索模式），</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">context</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">（执行上下文对象），</span></span>\n<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">elements</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">（待搜索的数组），</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">search_element</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">（要查找的元素），</span></span>\n<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">array_length</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">（数组长度），</span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">from_index</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">（查找的起始位置），</span></span>\n<span class="line"><span style="color:#A6ACCD;">		以及 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">array_kind</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">（数组元素的类型）。</span></span>\n<span class="line"><span style="color:#A6ACCD;">		其中 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">TNode</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 类型表示的是 V8 引擎内部的节点对象。</span></span>\n<span class="line"><span style="color:#A6ACCD;">		同时，该方法中还定义了两个临时变量 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">index_var</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 和 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">search_num</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">，</span></span>\n<span class="line"><span style="color:#A6ACCD;">		用于存储搜索的位置和要查找的数字元素。</span></span>\n<span class="line"><span style="color:#A6ACCD;">		在该方法的实现中，首先根据输入参数 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">from_index</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> ，将其解码成 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">IntPtrT</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 类型的值，</span></span>\n<span class="line"><span style="color:#A6ACCD;">		并将其存储到变量 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">index_var</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 中。</span></span>\n<span class="line"><span style="color:#A6ACCD;">		然后，使用 V8 引擎的内置函数 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">SmiUntag()</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 对参数 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">array_length</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 进行解码处理，</span></span>\n<span class="line"><span style="color:#A6ACCD;">		得到数组的长度 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">array_length_untagged</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">。</span></span>\n<span class="line"><span style="color:#A6ACCD;">		接着，根据 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">variant</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 的值和 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">array_kind</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 的类型，调用不同类型的内置函数，</span></span>\n<span class="line"><span style="color:#A6ACCD;">		执行 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">Array.prototype.includes()</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 的操作，最终得到数组中是否包含指定的元素。</span></span>\n<span class="line"><span style="color:#A6ACCD;">		代码的最后部分使用 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">Return()</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;"> 函数返回了搜索结果。</span></span>\n<span class="line"><span style="color:#A6ACCD;">		如果搜索不到该元素，则返回 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">FalseConstant()</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">，否则返回 </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">-1</span><span style="color:#89DDFF;">`</span><span style="color:#A6ACCD;">。</span></span></code></pre></div>',45),c=[t];function r(y,F,D,C,A,i){return n(),a("div",null,c)}const u=s(e,[["render",r]]);export{E as __pageData,u as default};
