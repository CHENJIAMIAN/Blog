import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"WebPack.md","filePath":"WebPack.md"}'),p={name:"WebPack.md"},o=l(`<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">模块联邦：    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">在入口文件搜索webpack/sharing/consume/default/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">即可看到共享的东西</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//localhost:3002/remoteEntry.js 的 getSingletonVersion打断点可以看到共享的react-dom库来自主APP的main.js, 是main.js之前存在__webpack_require__.S[scopeName]的</span></span>
<span class="line"><span style="color:#A6ACCD;">    有shared就有__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">S</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">没有就没有  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ModuleFederationPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">app2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">remoteEntry.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">exposes</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./Widget</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/Widget</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">shared</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//在shared里声明的了,才会使用主APP共享的库,没声明就用自己的(到时会是两个不同的实例)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">react-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">requiredVersion</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./package.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dependencies[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-dom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#F07178;">singleton</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//不允许主APP的react版本是&#39;16.14.0&#39;而子APP是&#39;16.12.0&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">模块读取方式优先级：</span></span>
<span class="line"><span style="color:#A6ACCD;">    两个字段可以定义包的入口点：“main”和“</span><span style="color:#89DDFF;">exports</span><span style="color:#A6ACCD;">”</span><span style="color:#676E95;font-style:italic;">//&quot; exports&quot;提供了&quot;main&quot;的现代替代方案， </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">“exports”字段优先于 “main”</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">node</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//&quot;node&quot; - 匹配任何 Node.js 环境。可以是 CommonJS 或 ES 模块文件。</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">require</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.cjs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    对于 Node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js，我们总是使用 CommonJs 版本并使用 ESM 包装器在 ESM 中公开命名导出</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">babel</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">eslint </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">@</span><span style="color:#A6ACCD;">babel</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">eslint</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">parser</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">性能</span><span style="color:#A6ACCD;">(重点):  </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">调试</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">        loader 用include缩小范围</span></span>
<span class="line"><span style="color:#A6ACCD;">        resolve</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">modules 指定当前目录下的node_modules</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">让webpack不要去上级目录找了</span></span>
<span class="line"><span style="color:#A6ACCD;">        resolve</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extensions 省略后缀会增加webpack查询时间</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">打包</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        css压缩</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">去冗余</span></span>
<span class="line"><span style="color:#A6ACCD;">        js去冗余TreeShaking：optimization</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">usedExports</span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//通过 package.json 的 &quot;sideEffects&quot; 标记不treeShaking的非js后缀文件</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    加thread</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">loader</span></span>
<span class="line"><span style="color:#A6ACCD;">    webpack </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> 加入dll</span></span>
<span class="line"><span style="color:#A6ACCD;">    webpack </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;"> 再使用 dll 收益并不大，HardSourceWebpackPlugin比它更优秀</span></span>
<span class="line"><span style="color:#A6ACCD;">    webpack </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;"> HardSourceWebpackPlugin已经默认加进去了    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">热更新原理</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    websocket</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">reloadApp</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#82AAFF;">$emit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpackHotUpdate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">-&gt;module.</span><span style="color:#A6ACCD;">hot</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">check</span><span style="color:#A6ACCD;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">updatedModules</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">-&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">hotCheck</span><span style="color:#A6ACCD;">(先插入script</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">再调用插入的script更新了modules中对应的模块</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 再调用一下该模块)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">.</span><span style="color:#676E95;font-style:italic;">//从 现有的 cache 中 找到当前的 chunkId 对应的旧的数据信息，进行更新并执行当前最新的 chunk 代码，以便于更新 cache，</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">//接着执行对应的 hot.accept 代码来实现 render 操作</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">MPA</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">官网、电商类这种对SEO和首屏加载速度要求比较高的项目，可以采用多页面应用结构。或者SSR</span></span>
<span class="line"><span style="color:#FFCB6B;">SPA</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">后台管理系统页面，不对外开放的系统，用单页面应用，这样可以利用第三方框架（Vue、React等）对系统进行组件化</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//“类单页应用”, 如果系统过大，导致首屏加载缓慢，可以将系统拆分, 实现方式主要有两种：</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//    1.iframe嵌入  2.微前端合并类单页应用；</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">一切皆模块： 正如js文件可以是一个“模块（</span><span style="color:#89DDFF;">module</span><span style="color:#A6ACCD;">）”一样，其他的（如css、image或html）文件也可视作模 块。因此，</span><span style="color:#82AAFF;">你可以require</span><span style="color:#A6ACCD;">(‘myJSfile</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js’)</span><span style="color:#82AAFF;">亦可以require</span><span style="color:#A6ACCD;">(‘myCSSfile</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">css’)。这意味着我们可以将事物（业务）分割成更小的易于管理的片段，从而达到重复利用等的目的。</span></span>
<span class="line"><span style="color:#A6ACCD;">按需加载： 传统的模块打包工具（</span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">bundlers</span><span style="color:#A6ACCD;">）</span><span style="color:#FFCB6B;">最终将所有的模块编译生成一个庞大的bundle</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">js文件</span><span style="color:#A6ACCD;">。</span><span style="color:#FFCB6B;">但是在真实的app里边</span><span style="color:#A6ACCD;">，“</span><span style="color:#FFCB6B;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">js</span><span style="color:#A6ACCD;">”</span><span style="color:#FFCB6B;">文件可能有10M到15M之大可能会导致应用一直处于加载中状态</span><span style="color:#A6ACCD;">。</span><span style="color:#FFCB6B;">因此Webpack使用许多特性来分割代码然后生成多个</span><span style="color:#A6ACCD;">“</span><span style="color:#FFCB6B;">bundle</span><span style="color:#A6ACCD;">”</span><span style="color:#FFCB6B;">文件</span><span style="color:#A6ACCD;">，</span><span style="color:#FFCB6B;">而且异步加载部分代码以实现按需加载</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#FFCB6B;">文件管理</span><span style="color:#A6ACCD;">：</span><span style="color:#FFCB6B;">每个文件都是一个资源</span><span style="color:#A6ACCD;">，</span><span style="color:#FFCB6B;">可以用require</span><span style="color:#A6ACCD;">/</span><span style="color:#FFCB6B;">import导入js</span><span style="color:#A6ACCD;">，</span><span style="color:#FFCB6B;">每个入口文件会把自己所依赖</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">即require</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">的资源全部打包在一起</span><span style="color:#A6ACCD;">，</span><span style="color:#FFCB6B;">一个资源多次引用的话</span><span style="color:#A6ACCD;">，</span><span style="color:#FFCB6B;">只会打包一份</span><span style="color:#A6ACCD;">，</span><span style="color:#FFCB6B;">对于多个入口的情况</span><span style="color:#A6ACCD;">，</span><span style="color:#FFCB6B;">其实就是分别独立的执行单个入口情况</span><span style="color:#A6ACCD;">，</span><span style="color:#FFCB6B;">每个入口文件不相干</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">可用CommonsChunkPlugin优化</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">打包原理</span><span style="color:#A6ACCD;">：</span><span style="color:#FFCB6B;">把所有依赖打包成一个bundle</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">js文件</span><span style="color:#A6ACCD;">，</span><span style="color:#FFCB6B;">通过代码分割成单元片段并按需加载</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cross-env NODE_ENV=development webpack-dev-server --open --hot</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cross-env NODE_ENV=production webpack --progress --hide-modules</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    --</span><span style="color:#FFCB6B;">progress</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">打印出编译进度的百分比值</span></span>
<span class="line"><span style="color:#A6ACCD;">    --</span><span style="color:#FFCB6B;">hide</span><span style="color:#A6ACCD;">-</span><span style="color:#FFCB6B;">modules</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">隐藏关于模块的信息</span></span>
<span class="line"><span style="color:#A6ACCD;">    --</span><span style="color:#FFCB6B;">open</span><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">自动打开浏览器</span></span>
<span class="line"><span style="color:#A6ACCD;">    --</span><span style="color:#FFCB6B;">inline</span><span style="color:#A6ACCD;">      </span><span style="color:#FFCB6B;">模式下我们访问的URL不用发生变化</span></span>
<span class="line"><span style="color:#A6ACCD;">    --</span><span style="color:#FFCB6B;">hot</span><span style="color:#A6ACCD;">       </span><span style="color:#FFCB6B;">指令启用热模块替换</span></span>
<span class="line"><span style="color:#A6ACCD;">    --</span><span style="color:#FFCB6B;">config</span><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">指定配置文件</span><span style="color:#676E95;font-style:italic;">//默认 webpack.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">__resourceQuery</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">webpack特有</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">导入路径传参</span><span style="color:#A6ACCD;">, </span><span style="color:#FFCB6B;">当前模块的资源查询</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">resource</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">query</span><span style="color:#A6ACCD;">) 。</span><span style="color:#FFCB6B;">如果进行了如下的</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">reqiure</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">调用</span><span style="color:#A6ACCD;">，</span><span style="color:#FFCB6B;">那么查询字符串</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">query</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">)</span><span style="color:#FFCB6B;">在file</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">js</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">中可访问</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file.js?test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    file</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js可以获取到</span></span>
<span class="line"><span style="color:#A6ACCD;">        __resourceQuery </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">?test</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">vendor文件</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//webpack 中通常用vendor来命名我们项目中的第三方依赖库的一个合集,默认为整个node_modules文件夹打包而成</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">重点</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">module</span><span style="color:#A6ACCD;">(webpack里一切文件万物皆模块)</span></span>
<span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">chunk</span><span style="color:#A6ACCD;">(代码片段)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">eval</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">放一个chunk可以是编译后的.css或.js或.vue等</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//多个模块会被合并成一个chunk</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、你的项目入口（entry）</span><span style="color:#676E95;font-style:italic;">//根据入口文件生成的chunk(js文件)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、</span><span style="color:#82AAFF;">通过import</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/* webpackChunkName: &quot;可以注明生成的名称&quot; */</span><span style="color:#A6ACCD;">) 方法动态引入的代码 </span><span style="color:#676E95;font-style:italic;">//动态加载得文件webpack会将其拆分为一个chunk(js文件)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">、通过splitChunks拆分出来的代码    </span><span style="color:#676E95;font-style:italic;">//(js文件), splitChunks就算你什么配置都不做它也是生效的，源于webpack有一个默认配置</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//webpack将根据以下条件自动分割块：</span></span>
<span class="line"><span style="color:#A6ACCD;">                1可以共享新块，或者模块来自node_modules文件夹</span></span>
<span class="line"><span style="color:#A6ACCD;">                2新的块将大于30kb（在min </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> gz之前）</span></span>
<span class="line"><span style="color:#A6ACCD;">                3按需加载块时并行请求的最大数量将小于或等于5</span></span>
<span class="line"><span style="color:#A6ACCD;">                4初始页面加载时并行请求的最大数量将小于或等于3 </span><span style="color:#676E95;font-style:italic;">// 当试图满足最后两个条件时，最好使用较大的块。 </span></span>
<span class="line"><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bundle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js文件)dist目录下webpack处理过的文件</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 一般和 【chunk组】 是一对一的关系</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#FFCB6B;">eg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">main</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> main</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">map是一个名为main的chunk组</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 两个bundle</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">(重点)</span></span>
<span class="line"><span style="color:#A6ACCD;">[hash:长度] 所有文件哈希值相同</span></span>
<span class="line"><span style="color:#A6ACCD;">[chunkhash] 根据入口生成哈希      </span></span>
<span class="line"><span style="color:#A6ACCD;">[contenthash] 内容改变才改变</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#FFCB6B;">构建完成dist目录下</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    以0</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">数字开头的 js </span><span style="color:#82AAFF;">文件</span><span style="color:#A6ACCD;">(如12</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">a4966396</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js)，</span><span style="color:#82AAFF;">就是import</span><span style="color:#A6ACCD;">()每个路由对应的组件构建出来的 bundle。</span></span>
<span class="line"><span style="color:#A6ACCD;">    只有用户访问对应的路由时，才会加载相应的 bundle，提高页面加载效率</span></span></code></pre></div><hr><blockquote><p>webpack.config.js</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//dev模式输出在内存中,看不到文件的   prod模式输出在目录中,可以看到文件</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">sideEffects</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//开启treeshaking</span></span>
<span class="line"><span style="color:#A6ACCD;">    mode    可能的值有：none</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> development 或 production（默认）</span><span style="color:#FFCB6B;">也可传参</span><span style="color:#89DDFF;">:--</span><span style="color:#A6ACCD;">mode</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">production，我们可以判断该值来做不同的处理</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//development会将 DefinePlugin 中 p<wbr>rocess.env.NODE_ENV 的值设置为 development。</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//启用 NamedChunksPlugin 和 NamedModulesPlugin。</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//production会将 DefinePlugin 中 p<wbr>rocess.env.NODE_ENV 的值设置为 production。</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 TerserPlugin。</span></span>
<span class="line"><span style="color:#A6ACCD;">    devtool 此选项控制是否生成，以及如何生成 source map</span><span style="color:#676E95;font-style:italic;">//开发常用:&#39;cheap-module-eval-source-map&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    devServer</span><span style="color:#676E95;font-style:italic;">//尽管webpack提供了命令webpack --watch来动态监听文件的改变并实时打包，但文件多了打包速度会很慢，不能做到hot replace</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//npm install webpack-dev-server</span></span>
<span class="line"><span style="color:#A6ACCD;">            webpack</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">dev</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">server主要是启动了一个使用express的Http服务器。它的作用主要是用来服务资源文件（默认在当前目录下，可通过content</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">base指定）。</span></span>
<span class="line"><span style="color:#A6ACCD;">                此外这个Http服务器和client使用了websocket通讯协议，</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//原始文件作出改动后，会实时的编译，但是最后的编译的文件并没有输出到目标文件夹，而是保存在内存中!!!!!!!!!        </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">注意</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">webpack配置中的devSever配置项只对在命令行模式有效。</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#FFCB6B;">注意</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">命令行模式下</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">webpack</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js中一定要配置output</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">publicPath来指定编译后的包</span><span style="color:#A6ACCD;">(bundle)的访问位置</span><span style="color:#89DDFF;">.</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#FFCB6B;">hotOnly</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//关闭浏览器自动刷新,js文件中配合module.hot判断去手动触发更新</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    entry   想让源文件加入到构建流程中去被 Webpack 控制</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">一个入口生成一个chunk</span><span style="color:#A6ACCD;">(js文件)</span></span>
<span class="line"><span style="color:#A6ACCD;">            [entryChunkName: string]</span><span style="color:#676E95;font-style:italic;">//eg:[ app:&#39;./src/app.js&#39;,    adminApp:&#39;./src/adminApp.js&#39;]</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//entryChunkName会替换掉占位符[name]!</span></span>
<span class="line"><span style="color:#A6ACCD;">    output  自定义输出文件的位置和名称</span></span>
<span class="line"><span style="color:#A6ACCD;">            占位符</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">被对应的loader对应的插件解析</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">chunkFilename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">为异步加载的Chunk命名</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">publicPath</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">浏览器打开的路径\\相对路径</span></span>
<span class="line"><span style="color:#A6ACCD;">               [ name ] – 返回文件名称。</span></span>
<span class="line"><span style="color:#A6ACCD;">               [ ext ] – 返回扩展名。它适用于大多数可用的字段。ExtractTextPlugin是一个明显的例外。</span></span>
<span class="line"><span style="color:#A6ACCD;">               [ hash ] – 返回构建Hash。如果构建任何部分发生更改，则也会发生更改。</span></span>
<span class="line"><span style="color:#A6ACCD;">               [chunkhash:</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">] – </span><span style="color:#82AAFF;">返回条目块特定的hash</span><span style="color:#A6ACCD;">(8位)。为了使只有被修改了的文件的文件名hash值修改，您需要使用“ chunkhash”</span></span>
<span class="line"><span style="color:#A6ACCD;">    resolve resolve</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">alias</span><span style="color:#676E95;font-style:italic;">//resolve是文件路径查找过程, alias用于import时简写模块的绝对路径 </span></span>
<span class="line"><span style="color:#A6ACCD;">            resolve</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">extensions</span><span style="color:#676E95;font-style:italic;">//能够使用户在import时路径不带扩展名也可以识别</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">module</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">想自定义解析和转换文件的策略</span><span style="color:#676E95;font-style:italic;">//几个module形成一个chunk</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//loader 处理非JavaScript 和 JSON格式的资源，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">    /loader转换各种格式的文件/</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">css</span><span style="color:#89DDFF;">|</span><span style="color:#C3E88D;">less</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//条件匹配,$表示以什么结尾,如果匹配就用 use 指定的 loader 处理该文件</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">style-loader</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">css-loader?参数1&amp;参数2=值2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">less-loader</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// use里面先执行less-loader！！！！！！//可以分别给 Loader 传入参数</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">url-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//解析图片音视频字体等,包含所有file-loader的功能  options: {limit:2048/*小于则转base64*/}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">css-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;">//处理.css, @import and url(), 只负责编译, 要配合&#39;style-loader&#39;插入到dom</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//原理:先转ast,再将a.css、b.css和c.css的样式内容以字符串的形式拼接在一起</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">style-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">//通过注入&lt;style&gt;标记将CSS添加到DOM     </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">loader</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">style-loader!css-loader</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;">//感叹号!用来连接不同的loader， 而且执行顺序是从右到左webpack5已废弃</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]                </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">[</span><span style="color:#C3E88D;">   </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">增强和优化打包的过程</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">                HtmlWebpackPlugin</span><span style="color:#676E95;font-style:italic;">//简单创建HTML文件并自动注入打包后的资源,用于服务器访问             </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//webpack3 HappyPack//采用多进程去打包构建</span></span>
<span class="line"><span style="color:#A6ACCD;">                thread</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">loader（官方推出）</span><span style="color:#676E95;font-style:italic;">//除了使用 Happypack 外，我们也可以使用 thread-loader</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//把 thread-loader 放置在其它 loader 之前，那么放置在这个 loader 之后的 loader 就会在一个单独的 worker 池中运行,thread-loader 配置更简单,推荐</span></span>
<span class="line"><span style="color:#A6ACCD;">                UglifyJsPlugin</span><span style="color:#676E95;font-style:italic;">//ParallelUglifyPlugin 代替更快</span></span>
<span class="line"><span style="color:#A6ACCD;">                MiniCssExtractPlugin</span><span style="color:#676E95;font-style:italic;">//可将多个css合并成一个</span></span>
<span class="line"><span style="color:#A6ACCD;">                热替换插件                </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//webpack3 DllPlugin和DllRefrencePlugin//配合使用，可以缩减50%～70%的构建时间</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//DllPlugin //在webpack.dll.config.js(先运行)生成vendor.js  和 地图（manifest.json）</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">//DllReferencePlugin //在webpack.base.conf.js(后运行) 根据地图（manifest.json）来在vendor.js 找到需要的dll</span></span>
<span class="line"><span style="color:#A6ACCD;">            ]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">optimization</span><span style="color:#89DDFF;">:{</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">从 webpack 4 开始，会根据你选择的 mode 来执行不同的优化，不过所有的优化还是可以手动配置和重写。</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#A6ACCD;">webpack将根据以下条件自动拆分代码块</span><span style="color:#F07178;">：</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#82AAFF;">会被共享的代码块</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">chunk</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">common</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">或者</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node_mudules</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">文件夹中的代码块</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">chunk</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">vendors</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#A6ACCD;">gz压缩前体积大于30KB的代码块</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#A6ACCD;">按需加载代码块时的并行请求数量不超过5个</span><span style="color:#676E95;font-style:italic;">//maxAsyncRequests: 5,//按需加载最大并行请求数量(default=5)</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#A6ACCD;">加载初始页面时的并行请求数量不超过3个</span><span style="color:#676E95;font-style:italic;">//maxInitialRequests: 3,//一个入口的最大并行请求数量(default=3)</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#FFCB6B;">splitChunks</span><span style="color:#89DDFF;">:{</span><span style="color:#676E95;font-style:italic;">// 将多个入口重复加载的公共资源提取出来,避免重复的依赖                        </span></span>
<span class="line"><span style="color:#F07178;">                              </span><span style="color:#FFCB6B;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// chunks的含义是拆分模块的范围,也就是要生成多少个文件, //&#39;all&#39;是最简单配置,表示打包node_modules到vendors.js                                  </span></span>
<span class="line"><span style="color:#89DDFF;">                              </span><span style="color:#676E95;font-style:italic;">//默认是async表示只从异步加载得模块动态加载import()里面进行拆分; initial表示只从入口模块进行拆分</span></span>
<span class="line"><span style="color:#F07178;">                              </span><span style="color:#A6ACCD;">cacheGroups</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//它的一个属性对应的是一个chunk(js文件), 属性名对应的是: chunk(js文件)文件名</span></span>
<span class="line"><span style="color:#F07178;">                              </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                                   </span><span style="color:#FFCB6B;">vendors</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                                      </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">chunk-vendors</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                      </span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]</span><span style="color:#C3E88D;">node_modules</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">]/</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                      </span><span style="color:#FFCB6B;">chunks</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">   </span><span style="color:#676E95;font-style:italic;">//表示同时对静态加载(initial)和动态加载(async)起作用    </span></span>
<span class="line"><span style="color:#F07178;">                                      </span><span style="color:#FFCB6B;">priority</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">   </span><span style="color:#FFCB6B;">reuseExistingChunk</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">enforce</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                                    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                              </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                            </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#FFCB6B;">runtimeChunk</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//作用是将包含chunks映射关系的list单独从app.js里提取出来，因为每一个chunk的id基本都是基于内容hash出来的，</span></span>
<span class="line"><span style="color:#89DDFF;">                                        </span><span style="color:#676E95;font-style:italic;">//所以你每次改动都会影响它，如果不把它提取出来的话，等于app.js每次都会改变，缓存就失效了</span></span>
<span class="line"><span style="color:#F07178;">                                </span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">manifest</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">                         </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#89DDFF;">                         </span><span style="color:#676E95;font-style:italic;">//重点</span></span>
<span class="line"><span style="color:#F07178;">                        </span><span style="color:#FFCB6B;">usedExports</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">// Tree Shaking 的配置,配合在package.json添加&quot;sideEffects&quot;: [  &quot;./src/file1.js&quot;,  &quot;./src/file2.js&quot; ],告诉哪些不要shaking掉了  </span></span>
<span class="line"><span style="color:#F07178;">                 </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">                 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">externals</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#FFCB6B;">jquery</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jQuery</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//不用打包它,我自己用&lt;script&gt;引入就好</span></span></code></pre></div><hr><blockquote><p>编写loader(重点)</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">导出一个函数</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 入参是源码</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">返回是处理后的源码</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//用npx webpack来打印输出,调试</span></span></code></pre></div><hr><blockquote><p>编写一个plugin(重点)</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">txtwebpackPlugin</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">//如何钩入hooks</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">apply</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compiler</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">//异步钩子emit输出 asset 到 output 目录之前执行</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">compiler</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">hooks</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">emit</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">tapAsync</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">txtwebpackPlugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">compilation</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">cb</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">compilation</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">assets</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#82AAFF;">source</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello webpack第四节课</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#82AAFF;">size</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">          </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1024</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#82AAFF;">cb</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> txtwebpackPlugin</span><span style="color:#89DDFF;">;</span></span></code></pre></div><hr><blockquote><p>编写一个webpack(重点说原理)</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> parser </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@babel/parser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> traverse </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@babel/traverse</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">default</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> transformFromAst </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@babel/core</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">webpack</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">options</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">entry</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">output</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">output</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">modules</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">run</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//1 递归处理所有依赖</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">info</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">entry</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">info</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">modules</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">info</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">modules</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">modules</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dependencies</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">dependencies</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">in</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dependencies</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">modules</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">dependencies</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">j</span><span style="color:#F07178;">]))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">// 修改数据结构 数组转对象</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">modules</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">item</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">entryFile</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        dependencies</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dependencies</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">        code</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">item</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">// 2 代码生成，文件生成</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">file</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">parse</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">entryFile</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">// 如何读取模块的内容</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">entryFile</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ast</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">content</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      sourceType</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dependencies</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">traverse</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ast</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      ImportDeclaration</span><span style="color:#89DDFF;">({</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">node</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">})</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dirname</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">entryFile</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//./src/index.js</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newPathName</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dirname</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">entryFile</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">dependencies</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">node</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">source</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newPathName</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">transformFromAst</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">ast</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      presets</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@babel/preset-env</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">entryFile</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">dependencies</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">file</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">code</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">filePath</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">output</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">output</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">filename</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newCode</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">// 生成 bundle代码, 补齐require,exports函数</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bundle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">(function(modules){</span></span>
<span class="line"><span style="color:#C3E88D;">        function require(module){</span></span>
<span class="line"><span style="color:#C3E88D;">            //根据相对路径获取绝对路径</span></span>
<span class="line"><span style="color:#C3E88D;">            function newRequire(relativePath){</span></span>
<span class="line"><span style="color:#C3E88D;">              return require(modules[module].dependencies[relativePath])</span></span>
<span class="line"><span style="color:#C3E88D;">            }    </span></span>
<span class="line"><span style="color:#C3E88D;">            var exports = {};//做一个假的给eval用</span></span>
<span class="line"><span style="color:#C3E88D;">            (function(require,exports,code){</span></span>
<span class="line"><span style="color:#C3E88D;">                eval(code)</span></span>
<span class="line"><span style="color:#C3E88D;">            })(newRequire,exports,modules[module].code)</span></span>
<span class="line"><span style="color:#C3E88D;">            return exports;</span></span>
<span class="line"><span style="color:#C3E88D;">        }</span></span>
<span class="line"><span style="color:#C3E88D;">        require(&#39;</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">entry</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&#39;)</span></span>
<span class="line"><span style="color:#C3E88D;">    })(</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">newCode</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">)</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeFileSync</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">filePath</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><hr><blockquote><p>单包加载原理</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">原理</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//webpack提供浏览器1方法</span></span>
<span class="line"><span style="color:#A6ACCD;">     webpackJsonp 在分包时才会用到</span><span style="color:#676E95;font-style:italic;">//打包后的chunk文件结构就是一个webpackJsonp方法, 每个chunk都是执行这个函数后的返回结果</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#82AAFF;">__webpack_require__</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//递归地收集执行所有依赖</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span></span>
<span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#FFCB6B;">打包后的例子</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    (</span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">modules</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">         </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 安装 webpackJsonp for chunk loading</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">parentJsonpFunction</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpackJsonp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">window</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpackJsonp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">webpackJsonpCallback</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">chunkIds</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">moreModules</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">executeModules</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 安装过的模块的缓存</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">installedModules</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{};</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 模块导入方法</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">__webpack_require__</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">moduleId</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">// 安装过的模块，直接取缓存</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">installedModules</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">moduleId</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">installedModules</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">moduleId</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">// 没有安装过的话，那就需要执行模块加载</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">module</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">installedModules</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">moduleId</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">i</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">moduleId</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">l</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">exports</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{},}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">// 上面说的加载，其实就是执行模块，把模块的导出挂载到exports对象上；</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">modules</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">moduleId</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">module.exports,</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">module,</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">module.exports,</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">__webpack_require__</span></span>
<span class="line"><span style="color:#F07178;">            )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">// 标识模块已加载过</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">module.</span><span style="color:#A6ACCD;">l</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#676E95;font-style:italic;">// Return the exports of the module</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">module.exports;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">这个文件只包含入口块</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 附加块的块加载函数是:</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">e</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">requireEnsure</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">chunkId</span><span style="color:#89DDFF;">){}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 暴露入口输入模块；</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">m</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">modules</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 暴露已经加载过的模块；</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">c</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">installedModules</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 模块导出定义方法</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// eg: export const hello = &#39;Hello world&#39;;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 得到： exprots.hello = &#39;Hello world&#39;;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">d</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;font-style:italic;">getter</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">o</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">exports,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">exports,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                    enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                    get</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getter</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//getDefaultExport 函数用于兼容非和谐模块</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">n</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// Object.prototype.hasOwnProperty.call</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">o</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// __webpack_public_path__</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">p</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 关于异步加载的错误函数</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">oe</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#676E95;font-style:italic;">// 从入口文件开始启动,返回导出</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">__webpack_require__</span><span style="color:#F07178;">((</span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">s</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./src/entry.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//入参方式一, 同步</span></span>
<span class="line"><span style="color:#A6ACCD;">    (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//id0</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./webpack/src/entry.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">__webpack_require__</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">__webpack_require__</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">     </span><span style="color:#676E95;font-style:italic;">//require资源文件id</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">__webpack_require__</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//如图，entry.js是入口文件，调用了util1.js和util2.js，而util1.js又调用了util2.js。</span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//id1</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./webpack/src/utils/util1.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">__webpack_require__</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//util1.js文件</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">__webpack_require__</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">util1</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">util1</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">util1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//id2</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./webpack/src/utils/util2.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//util2.js文件</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">util2</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">util2</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">util2</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//入参方式二 异步</span></span>
<span class="line"><span style="color:#A6ACCD;">    ([</span></span>
<span class="line"><span style="color:#A6ACCD;">    (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">__webpack_require__</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">use strict</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">e</span><span style="color:#676E95;font-style:italic;">/* import() */</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">foo</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">foo</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">e</span><span style="color:#676E95;font-style:italic;">/* import() */</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">bar</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">bar</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    ])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">bundle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js是以模块 id 为记号，通过函数把各个文件依赖封装达到分割效果，</span></span>
<span class="line"><span style="color:#A6ACCD;">如上代码 id 为 </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> 表示 entry 模块需要的依赖， </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> 表示 util1模块需要的依赖</span></span>
<span class="line"><span style="color:#A6ACCD;">require资源文件 id 表示该文件需要加载的各个模块，</span></span>
<span class="line"><span style="color:#A6ACCD;">如上代码</span></span>
<span class="line"><span style="color:#82AAFF;">_webpack_require__</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">) 表示 util1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js 模块，</span></span>
<span class="line"><span style="color:#82AAFF;">__webpack_require__</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">) 表示 util2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js 模块</span></span>
<span class="line"><span style="color:#89DDFF;">exports.</span><span style="color:#A6ACCD;">util1</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">util1 模块化的体现，输出该模块</span></span></code></pre></div><blockquote><p>分包加载原理</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">先通过__webpack_require__</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">e加载</span></span>
<span class="line"><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">再通过webpackJsonp异步加载回调，把模块内容以promise的方式暴露给调用方，从而实现了对code splitting的支持</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 先执行mainifest.js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/* </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">在mainifest.js中</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    劫持了webpackJsonp的push方法,拦截了push操作后，其实就做了三件事：    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        1.将数组第二个变量 moreModules 加入到index.js 立即执行函数的输入变量modules中；</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        2.将这个chunk的加载状态置成已完成；</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        3.checkDeferredModules看这个依赖加载后是否有模块在等这个依赖执行； </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 后执行main.js中执行了webpackJsonp的push方法</span></span>
<span class="line"><span style="color:#A6ACCD;">(window[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpackJsonp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> window[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">webpackJsonp</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> [])</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 数组第一个元素数组，是这个文件包含的chunk name</span></span>
<span class="line"><span style="color:#A6ACCD;">    [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">async</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 第二个元素对象，其实就和第一节简单文件打包的输入一样，是模块名和包装后的模块代码</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./node_modules/js-cookie/src/js.cookie.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#A6ACCD;font-style:italic;">__webpack_require__</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./node_modules/moment/moment.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#A6ACCD;font-style:italic;">module</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#A6ACCD;font-style:italic;">exports</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#A6ACCD;font-style:italic;">__webpack_require__</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span></code></pre></div><hr><h2 id="原理流程" tabindex="-1">原理流程 <a class="header-anchor" href="#原理流程" aria-label="Permalink to &quot;原理流程&quot;">​</a></h2><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">compliler </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Webpack</span><span style="color:#A6ACCD;">(config)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">创建 Compiler 和 </span><span style="color:#82AAFF;">Compilation</span><span style="color:#A6ACCD;">(初步编译的结果</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">) 实例</span></span>
<span class="line"><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">先解析项目依赖的所有 modules，再根据 modules 生成 chunks。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">module</span><span style="color:#A6ACCD;"> 解析，包含了三个主要步骤：创建实例、loaders应用</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 依赖收集。</span></span>
<span class="line"><span style="color:#A6ACCD;">    chunks 生成，主要步骤是找到 chunk 所需要包含的 modules。</span></span>
<span class="line"><span style="color:#A6ACCD;">3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">根据 chunks 生成最终文件。主要有三个步骤：模板 hash 更新，模板渲染 chunk，生成文件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Compilation 实例会调⽤ createHash ⽅法来⽣成这次构建的 hash。</span></span>
<span class="line"><span style="color:#A6ACCD;">在 webpack 的配置中，我们可以在 output </span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;"> filename 中配置 [ hash ] 占位符，最终就会替换成这个 hash</span></span></code></pre></div>`,25),e=[o];function t(c,r,y,F,D,C){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{i as __pageData,u as default};
