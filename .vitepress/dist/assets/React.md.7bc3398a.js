import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const i=JSON.parse('{"title":"https://juejin.cn/post/7202085514400038969#heading-23【动图+大白话🍓解析React源码】Render阶段中Fiber树的初始化与对比更新～","description":"","frontmatter":{},"headers":[],"relativePath":"React.md","filePath":"React.md"}'),p={name:"React.md"},o=l(`<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">umi </span><span style="color:#676E95;font-style:italic;">//企业级react应用框架,类似Next.js</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//dva作为umi插件, 底层引入了redux-sagas做异步流程控制，内置了 react-router(&#39;dva/router&#39;)  </span></span>
<span class="line"><span style="color:#A6ACCD;">    启动过程</span></span>
<span class="line"><span style="color:#A6ACCD;">           umi dev </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> bin</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">umi</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> lib</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">cli </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> forkedDev</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> Service继承自CoreService，是对CoreService二次封装。它的核心代码在ServiceWithBuiltIn</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">ts文件中</span></span>
<span class="line"><span style="color:#A6ACCD;">           </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> 进程启动需要两步：</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、实例化Service，</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、调用Service的run方法 </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> runCommand </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> api</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerCommand</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dev</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">...}</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">             </span><span style="color:#676E95;font-style:italic;">// 调用实例化后的 bundler 的 setupDevServerOpts 方法，这个方法做了如下几件事：   </span></span>
<span class="line"><span style="color:#89DDFF;">                 </span><span style="color:#676E95;font-style:italic;">// 1. 调用webpack方法，获取webpack的编译器实例 compiler   </span></span>
<span class="line"><span style="color:#89DDFF;">                 </span><span style="color:#676E95;font-style:italic;">// 2. 编译器实例 compiler 通过 webpack-dev-middleware 封装器，将webpack处理过的文件封装成 server 能接收的格式   </span></span>
<span class="line"><span style="color:#89DDFF;">                 </span><span style="color:#676E95;font-style:italic;">// 3. 通过调用 sockjs 的 sockWrite 方法，实现热更新   </span></span>
<span class="line"><span style="color:#89DDFF;">                 </span><span style="color:#676E95;font-style:italic;">// 4. 处理服务类 Server 实例化时需要的 onListening 和 onConnection 函数</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#676E95;font-style:italic;">//umi内置的核心插件都通过插件集@umijs/preset-built-in注入</span></span>
<span class="line"><span style="color:#A6ACCD;">    模板html</span><span style="color:#676E95;font-style:italic;">//\\@umijs\\core\\lib\\Html\\Html.js</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//\\@umijs\\server\\lib\\Server\\Server.js -&gt; proxyMiddleware</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">///@umijs/preset-built-in/lib/plugins/commands/dev/createRouteMiddleware.js-&gt; sendHtml</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//getGetContent-&gt; let html = render(tpl, context, { ...filename: &#39;document.ejs&#39; });</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">enquire</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js </span><span style="color:#676E95;font-style:italic;">//是一个轻量级的纯JavaScript库，用于响应CSS媒体查询。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">SSR获取window</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#A6ACCD;"> window </span><span style="color:#89DDFF;">!==</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">undefined</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">SLOT插槽</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">children</span><span style="color:#676E95;font-style:italic;">//默认slot是组件包含的内容</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">合成事件</span><span style="color:#676E95;font-style:italic;">//统一委托到根元素</span></span>
<span class="line"><span style="color:#A6ACCD;">    onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">  (e) =&gt; this.deleteRow(id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> e)   </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">受不受react控制</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">受控组件</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// state是组件的唯一数据源, 即表单值是由 React 组件监听onChange来存到state的</span></span>
<span class="line"><span style="color:#A6ACCD;">    非受控组件 </span><span style="color:#676E95;font-style:italic;">//用ref控制,可以减少代码量时, 直接ref.current.value获取表单值</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Suspense 使得组件可以“等待”某些操作结束后，再进行渲染。</span></span>
<span class="line"><span style="color:#A6ACCD;">Fragments </span><span style="color:#FFCB6B;">组件</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">用来包裹多个组件</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">封装成一个</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">方便引用</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">组件</span></span>
<span class="line"><span style="color:#A6ACCD;">    类组件</span></span>
<span class="line"><span style="color:#A6ACCD;">    函数组件</span><span style="color:#676E95;font-style:italic;">//颗粒度更小,逻辑复用</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">useEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//相当于componentDidMount、componentDidUpdate</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#82AAFF;">setDate</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">clearInterval</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//相当于componentWillUnmount</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> []</span><span style="color:#676E95;font-style:italic;">/*依赖项门, 空的话useEffect只执行一次*/</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//每个async函数都会默认返回一个隐式的promise。但是，useEffect不应该返回任何内容,所以useEffect(async () =&gt; …) 是不允许的</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">k</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">v</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">在 setTimeout 和 native事件 中使用是同步的, 其他地方使用如合成事件中 是异步的,更新会合并</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#82AAFF;">setState</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">preState</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">obj</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;">回调) </span><span style="color:#676E95;font-style:italic;">//非合并非批量更新</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">纯组件</span><span style="color:#676E95;font-style:italic;">//无shouldComponentUpdate,内部自动shouldComponentUpdate, &quot;浅比较&quot;只比较了对象第一层</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">性能优化</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">hook  </span><span style="color:#676E95;font-style:italic;">//Hook 不能在 class 组件中使用</span></span>
<span class="line"><span style="color:#A6ACCD;">    useState</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#676E95;font-style:italic;">//定义一个叫count的state变量，初始化为0</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> setCount</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useState</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    useEffect</span><span style="color:#676E95;font-style:italic;">//相当于componentDidMount、componentDidUpdate</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">在组件渲染到屏幕后延迟执行,用来完成副作用操作</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//渲染时的数据获取、订阅或者手动修改过 DOM。这些操作称为“副作用”/“作用”</span></span>
<span class="line"><span style="color:#A6ACCD;">    useLayoutEffect</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">跟useEffect的区别是它不延迟执行,在DOM变更后同步调用</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">缓存参数</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">value </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useMemo</span><span style="color:#A6ACCD;">(回调</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">[依赖项])</span><span style="color:#676E95;font-style:italic;">//只有依赖项改变时才执行,防止其他无关变量变动时, 它也跟着傻傻重算</span></span>
<span class="line"><span style="color:#A6ACCD;">         React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">memo</span><span style="color:#A6ACCD;">(组件</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">可选比较函数)</span><span style="color:#676E95;font-style:italic;">//跟useMemo一样可以用来对函数式组件进行性能优化, 即使没有比较参数那也是&quot;浅比较&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">缓存函数</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">func </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCallback</span><span style="color:#A6ACCD;">(比如包一个onChange监听器函数</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">[依赖项])</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//配合纯组件(例如shouldComponentUpdate使用引用相等性去避免非必要渲染)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//隔壁组件或组件内部的某个属性改变造成重新渲染时,函数也会重新初始化,那函数引用就变了,又造成重新渲染,如此形成死循环, 如果把方法包起来作为prop再传给子组件, 就能避免子组件动不动就重新渲染</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    use自定义</span><span style="color:#676E95;font-style:italic;">//只能在最外层使用,只有函数式组件可用? 对比普通函数可以引起重新渲染</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    useContext</span></span>
<span class="line"><span style="color:#A6ACCD;">        声明</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> ThemeContext </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createContext</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foreground</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#000000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">background</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#eeeeee</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        用法1</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">ThemeContext.Provider</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">value</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">themes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">dark</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Toolbar</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">ThemeContext.Provider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        用法2</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> theme </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useContext</span><span style="color:#A6ACCD;">(ThemeContext)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">高阶组件HOC</span><span style="color:#676E95;font-style:italic;">//传入组件, 返回组件的函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    装饰器写法</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">不要在render里使用HOC,性能差</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">跨组件通信传值context</span><span style="color:#676E95;font-style:italic;">//穿透进去</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">父创建</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//用const context = React.createContext(); </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//用&lt;context.Provider&gt;包起来 </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">子获取值的方式</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Class</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">contextType 会被重新赋值为由React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createContext</span><span style="color:#A6ACCD;">()创建的对象去赋值给this</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">context</span></span>
<span class="line"><span style="color:#A6ACCD;">        2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Context</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">Consumer包裹</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">UserConsumer</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;font-style:italic;">userContext</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Child</span><span style="color:#89DDFF;"> {...</span><span style="color:#A6ACCD;">userContext</span><span style="color:#89DDFF;">} /&gt;}</span></span>
<span class="line"><span style="color:#A6ACCD;">                  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">UserConsumer</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">const store </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useContext</span><span style="color:#A6ACCD;">(context)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">ref</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//   formRef = React.createRef();</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//   ref={this.formRef}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> formRef </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useRef</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clone</span><span style="color:#A6ACCD;">(老元素</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">新属性对象</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">新儿子)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">useImperativeHandle</span><span style="color:#A6ACCD;">(ref</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> formInstance)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//在使用 ref 时自定义暴露给父组件的实例值</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> Form </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forwardRef</span><span style="color:#A6ACCD;">(_Form)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//转发ref到函数组件(本来不支持的),而非实例值,实例值要用useImperativeHandle</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">createPortal</span><span style="color:#A6ACCD;">(jsx</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">要附加的节点)</span><span style="color:#676E95;font-style:italic;">//插入dom到指定节点下</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">fiber</span><span style="color:#676E95;font-style:italic;">//小任务们</span></span>
<span class="line"><span style="color:#A6ACCD;">    大组件树解析阻塞</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">拆分任务</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">requestIdleCallback里根据优先级执行</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">更流畅</span></span>
<span class="line"><span style="color:#A6ACCD;">    fiber</span></span>
<span class="line"><span style="color:#A6ACCD;">        child 第一个子fiber</span></span>
<span class="line"><span style="color:#A6ACCD;">        sibling 第一个子fiber的其他兄弟</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> 父fiber</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">性能 </span><span style="color:#676E95;font-style:italic;">//减少计算,减少渲染</span></span>
<span class="line"><span style="color:#A6ACCD;">    shouldComponentUpdate</span></span>
<span class="line"><span style="color:#A6ACCD;">    PureComponent</span><span style="color:#676E95;font-style:italic;">//对 props 和 state 进行浅比较</span></span>
<span class="line"><span style="color:#A6ACCD;">    useMemo</span></span>
<span class="line"><span style="color:#A6ACCD;">    不要使用内联属性</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">函数   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">无状态组件</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">props</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><hr><blockquote><p>样板</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> React </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> classNames </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">classnames</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">className</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">classNames</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">class2</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">class1</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  )</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">组件</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">children</span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span></code></pre></div><hr><blockquote><p>生命周期(重点)</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">UNSAFE_开头表示v17可能会废弃它</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">以为fiber可以中断</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">造成willXXX可能被执行多次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">挂载 </span><span style="color:#676E95;font-style:italic;">//当组件实例被创建并插入 DOM 中时，其生命周期调用顺序如下：</span></span>
<span class="line"><span style="color:#A6ACCD;">        static defaultProps</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//这一般用于 props 未赋值，但又不能为 null的情况</span></span>
<span class="line"><span style="color:#A6ACCD;">        static contextTypes </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> ThemeContext</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//注入this.context</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//声明有const ThemeContext = React.createContext({ foreground: &quot;#000000&quot;,    background: &quot;#eeeeee&quot;  })</span></span>
<span class="line"><span style="color:#89DDFF;">           </span><span style="color:#676E95;font-style:italic;">//之后即可通过 const {foreground.background} = this.context;获取</span></span>
<span class="line"><span style="color:#A6ACCD;">        static propTypes</span><span style="color:#89DDFF;">={</span><span style="color:#F07178;">msg</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">PropTypes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">string </span><span style="color:#676E95;font-style:italic;">/*或PropTypes.string.isRequired*/</span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//先import PropTypes from &#39;prop-types&#39;;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">constructor</span><span style="color:#A6ACCD;">()</span><span style="color:#676E95;font-style:italic;">//初始化state | 方法绑定</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">因为Reconciliation阶段是可以被打断的，所以Reconciliation阶段会执行的生命周期函数就可能会出现调用多次的情况，从而引起Bug。</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">所以对于Reconciliation阶段调用的几个函数，除了shouldComponentUpdate以外，其他都应该避免去使用</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">            (V17)static </span><span style="color:#82AAFF;">getDerivedStateFromProps</span><span style="color:#A6ACCD;">(props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">state) 在新版本用来替代UNSAFE_componentWillReceiveProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">让组件在 props 变化时更新 state</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">UNSAFE_componentWillMount</span><span style="color:#A6ACCD;">()   </span><span style="color:#676E95;font-style:italic;">//UNSAFE_开头表示v17可能会废弃它,可以用命令自动加</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">唯一必须实现!!</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">componentDidMount</span><span style="color:#A6ACCD;">()  </span><span style="color:#676E95;font-style:italic;">//在这使用setState //所以在最好在这Ajax,因为获得数据后可以setState</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//错误处理 </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//static getDerivedStateFromError()</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//componentDidCatch()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">更新 </span><span style="color:#676E95;font-style:italic;">//当组件的 props 或 state 发生变化时会触发更新。组件更新的生命周期调用顺序如下：</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">UNSAFE_componentWillReceiveProps</span><span style="color:#A6ACCD;">(nextProps)</span><span style="color:#676E95;font-style:italic;">//在这使用setState //UNSAFE_开头表示v17可能会废弃它</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">            (V17)static </span><span style="color:#82AAFF;">getDerivedStateFromProps</span><span style="color:#A6ACCD;">(props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> state) 在新版本用来替代UNSAFE_componentWillReceiveProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">让组件在 props 变化时更新 state</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> stateObj </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#676E95;font-style:italic;">//它应返回一个对象来更新 state，如果返回 null 则不更新任何内容</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">shouldComponentUpdate</span><span style="color:#A6ACCD;">(nextProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">nextState)  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> bool</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">用来性能优化</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">UNSAFE_componentWillUpdate</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//UNSAFE_开头表示v17可能会废弃它</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">唯一必须实现!!</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        (V17)</span><span style="color:#82AAFF;">getSnapshotBeforeUpdate</span><span style="color:#A6ACCD;">(preProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">preState) 在新版本用来替代UNSAFE_componentWillUpdate</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> stateObj </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//返回作为参数给componentDidUpdate</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">componentDidUpdate</span><span style="color:#A6ACCD;">(preProps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">preState</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">snapshot</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">卸载  </span><span style="color:#676E95;font-style:italic;">//当组件从 DOM 中移除时会调用如下方法：</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">componentWillUnmount</span><span style="color:#A6ACCD;">()</span></span></code></pre></div><hr><blockquote><p>Redux是JavaScript应用程序的可预测状态容器</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">原生redux</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createStore</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">redux</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//Reducer: 定义state初始化和修改规则,reducer是一个纯函数</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">counterReducer</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">action</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//dispatch(action) 跳到这里来</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">type</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">payload</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">switch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">action</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">type</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ADD</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">:      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">MINUS</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">:    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">state</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#F07178;">:         </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> 3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#676E95;font-style:italic;">//不可变的set方法仅设置立即属性，即对象的直接子代。 setIn让您设置数据中任何深度节点的值。 </span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#676E95;font-style:italic;">//set仅采用属性名称。 setIn使用键/索引数组来深入嵌套的元素</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> store </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createStore</span><span style="color:#A6ACCD;">(counterReducer</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">可选applyMiddleware</span><span style="color:#A6ACCD;">(中间件thunk</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">中间件logger))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> store</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//类的使用:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> store </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../store/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReduxPage</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">componentDidMount</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">             4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">subscribe</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">forceUpdate</span><span style="color:#F07178;">() })</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getState</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> 1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">dispatch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ADD</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">payload</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">内容</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">add</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">            )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//函数式组件的使用:</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dispatch</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useReducer</span><span style="color:#A6ACCD;">(counterReducer</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 这里可以处理一下初始值</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">react</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">redux</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//使用 React Redux，你的组件永远不会直接访问store</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//把Provider放在根组件外层，使子组件能获得store</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Provider</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react-redux</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Provider</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">store</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">store</span><span style="color:#89DDFF;">}&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">App</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Provider</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//用法1:高阶组件</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">connect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">react-redux</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ReactReduxPage</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">extends</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Component</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">////还有写法2, 装饰器写法@connect</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">dispatch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">add</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">props</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">props</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> (       </span></span>
<span class="line"><span style="color:#F07178;">                      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">num</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">                      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">onClick</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">add</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#A6ACCD;">add</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#F07178;">                  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">connect</span><span style="color:#A6ACCD;">(   </span><span style="color:#676E95;font-style:italic;">//connect返回一个高阶组件函数, 加强了组件 </span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#A6ACCD;font-style:italic;">state</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">state </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">//mapStateToProps 把state映射到props      </span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">dispatch</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#82AAFF;">increment</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">dispatch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">INCREMENT</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">dispatch</span><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}}</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//mapDispatchToProps</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">//mergeProps?: (stateProps, dispatchProps, ownProps) =&gt; Object //return value as this.props</span></span>
<span class="line"><span style="color:#A6ACCD;">        )(ReactReduxPage)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">//用法2: hook</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useSelector</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">({</span><span style="color:#A6ACCD;font-style:italic;">count</span><span style="color:#89DDFF;">})</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> count)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> dispatch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useDispatch</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">中间件saga </span><span style="color:#676E95;font-style:italic;">//中间件thunk更容易形成嵌套地狱</span></span>
<span class="line"><span style="color:#A6ACCD;">    管理副作用</span><span style="color:#676E95;font-style:italic;">//让有顺序要求的异步操作按顺序执行</span></span>
<span class="line"><span style="color:#A6ACCD;">        call和fork</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// call 是阻塞型调用 generator在调用结束之前不执行其他事情</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">// fork是非阻塞型调用 任务在后台启动 调用者可以继续自己的流程，不用等待fork任务结束</span></span>
<span class="line"><span style="color:#A6ACCD;">        put</span><span style="color:#676E95;font-style:italic;">/*dispatch派发*/</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        take和takeEvery一次和持续监听</span></span>
<span class="line"><span style="color:#A6ACCD;">    路由守卫</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">中间件redux</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">observable</span><span style="color:#676E95;font-style:italic;">//类似saga,但它是链式操作</span></span></code></pre></div><hr><blockquote><p>react-router</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">BrowserRouter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Router</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">HashRouter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Link</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">NavLink</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">MemoryRouter</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Prompt</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Redirect</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Route</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Router</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">StaticRouter</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Switch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">generatePath</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">matchPath</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">useHistory</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useLocation</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useParams</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useRouteMatch</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">withRouter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">react-router</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//v5</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">withRouter</span><span style="color:#A6ACCD;">(组件)</span><span style="color:#676E95;font-style:italic;">// withRouter注入 history, location, match等到props</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">提供了两种不同的路由：</span></span>
<span class="line"><span style="color:#A6ACCD;">    BrowserRouter</span></span>
<span class="line"><span style="color:#A6ACCD;">    HashRouter</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">首页</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Link</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Link</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">to</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">用户中心</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Link</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Switch</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">//独占路由,匹配到了后面就都不管了</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/a/:b?</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span><span style="color:#A6ACCD;"> //可匹配 /a  /a/xxx </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// component={HomePage}  //会注入 history, location, match到组件的props</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// children={() =&gt; &lt;div&gt;children&lt;/div&gt;}</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#C792EA;">render</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">render</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;}</span></span>
<span class="line"><span style="color:#89DDFF;">    /&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">exact</span><span style="color:#89DDFF;">  </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">UserPage</span><span style="color:#89DDFF;">} /&gt;</span><span style="color:#A6ACCD;">//exact精确匹配它一个, 不加的话, /user/a也会匹配到它</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/product/:id</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">render</span><span style="color:#89DDFF;">={()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Product</span><span style="color:#89DDFF;"> /&gt;} /&gt;</span><span style="color:#A6ACCD;">//动态路由,match.params.id</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">path</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/(about|who)/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">Dashboard</span><span style="color:#89DDFF;">} /&gt;</span><span style="color:#A6ACCD;">//匹配多条路径</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Route</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">component</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">EmptyPage</span><span style="color:#89DDFF;">} /&gt;</span><span style="color:#A6ACCD;"> //无论怎么样都会匹配</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Switch</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Router</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Route渲染优先级</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">children &gt; component &gt; render</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//children,是path匹不匹配都会渲染的</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//内联函数不要用component, component会调用React.createElement,如果用匿名函数的话每次生成的组件type不一样,会重复卸载挂载,性能不好</span></span></code></pre></div><blockquote><p>Next</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">Next</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js:</span></span>
<span class="line"><span style="color:#A6ACCD;">    执行 next 时</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">读取next</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">config</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js的堆栈:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;root&gt;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next.config.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;root&gt;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">dist</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next-server</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">server</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">config.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;root&gt;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">dist</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next-server</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">server</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next-server.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;root&gt;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">dist</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">server</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;root&gt;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">dist</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">server</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">lib</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">start-server.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;root&gt;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">dist</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">cli</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next-dev.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&lt;root&gt;</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">node_modules</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">dist</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">bin</span><span style="color:#A6ACCD;">\\\\</span><span style="color:#C3E88D;">next</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">服务端堆栈</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        Home</span><span style="color:#676E95;font-style:italic;">//被在打包在0.js 里      //\\.next/server/0.js  该文件包含了Nav0.jsx,Content3.jsx  ,antMotionStyle.less,utils.js等等bundle                                              </span></span>
<span class="line"><span style="color:#A6ACCD;">            processChild                               </span></span>
<span class="line"><span style="color:#A6ACCD;">            resolve                                    </span></span>
<span class="line"><span style="color:#A6ACCD;">            render                                     </span></span>
<span class="line"><span style="color:#A6ACCD;">            read                                       </span></span>
<span class="line"><span style="color:#A6ACCD;">            renderToString                                 </span><span style="color:#676E95;font-style:italic;">//node_modules/react-dom/cjs/react-dom-server\\.node\\.development.js                                                                                                                   </span></span>
<span class="line"><span style="color:#A6ACCD;">                render                                    </span></span>
<span class="line"><span style="color:#A6ACCD;">                renderPage                                 </span><span style="color:#676E95;font-style:italic;">//node_modules/next/dist/next-server/server/render.js                                                                                                                                                                           </span></span>
<span class="line"><span style="color:#A6ACCD;">                getInitialProps                                      </span><span style="color:#676E95;font-style:italic;">//\\.next/server/static/development/pages/_document.js                                                          </span></span>
<span class="line"><span style="color:#A6ACCD;">                loadGetInitialProps                        </span><span style="color:#676E95;font-style:italic;">//node_modules/next/dist/next-server/lib/utils.js                                                         </span></span>
<span class="line"><span style="color:#A6ACCD;">                renderToHTML                               </span><span style="color:#676E95;font-style:italic;">//node_modules/next/dist/next-server/server/render.js                                                                                                                                                                                 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#FFCB6B;">前端堆栈</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">performSyncWorkOnRoot</span><span style="color:#A6ACCD;">(循环)</span></span>
<span class="line"><span style="color:#89DDFF;">             </span><span style="color:#676E95;font-style:italic;">//第1次是进construct, 过程:</span></span>
<span class="line"><span style="color:#89DDFF;">                 </span><span style="color:#676E95;font-style:italic;">//workLoopSync-&gt;performUnitOfWork-&gt;beginWork$1-&gt;updateClassComponent-&gt;constructClassInstance-&gt;Home.jsx的constructor</span></span>
<span class="line"><span style="color:#89DDFF;">             </span><span style="color:#676E95;font-style:italic;">//第2次是进:render, 反过程:</span></span>
<span class="line"><span style="color:#89DDFF;">                 </span><span style="color:#676E95;font-style:italic;">//render-&gt;finishClassComponent-&gt;updateClassComponent-&gt;beginWork-&gt;beginWork$1-&gt;performUnitOfWork-&gt;workLoopSync</span></span>
<span class="line"><span style="color:#89DDFF;">             </span><span style="color:#676E95;font-style:italic;">//第3次是进componentDidMount, 反过程:</span></span>
<span class="line"><span style="color:#89DDFF;">                 </span><span style="color:#676E95;font-style:italic;">//componentDidMount-&gt;commitLifeCycles-&gt;commitLayoutEffects-&gt;callCallback-&gt;invokeGuardedCallbackDev</span></span>
<span class="line"><span style="color:#89DDFF;">                 </span><span style="color:#676E95;font-style:italic;">//-&gt;invokeGuardedCallback-&gt;commitRootImpl-&gt;unstable_runWithPriority-&gt;runWithPriority$1-&gt;commitRoot-&gt;finishSyncRender</span></span>
<span class="line"><span style="color:#A6ACCD;">        scheduleUpdateOnFiber	                 </span></span>
<span class="line"><span style="color:#A6ACCD;">        updateContainer     	                 </span></span>
<span class="line"><span style="color:#A6ACCD;">        unbatchedUpdates	                         </span></span>
<span class="line"><span style="color:#A6ACCD;">        legacyRenderSubtreeIntoContainer	         </span></span>
<span class="line"><span style="color:#A6ACCD;">        hydrate	                                 </span><span style="color:#676E95;font-style:italic;">//react-dom.development.js:24823</span></span>
<span class="line"><span style="color:#A6ACCD;">            renderReactElement	                </span></span>
<span class="line"><span style="color:#A6ACCD;">            doRender	                        </span></span>
<span class="line"><span style="color:#A6ACCD;">            render	                                  </span><span style="color:#676E95;font-style:italic;">//webpack:///./node_modules/next/dist/client/index.js</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">requestAnimationFrame</span><span style="color:#A6ACCD;"> (async)		          </span></span>
<span class="line"><span style="color:#A6ACCD;">            displayContent      	                  </span><span style="color:#676E95;font-style:italic;">//webpack:///./node_modules/next/dist/client/dev/fouc.js</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;"> (async)		          </span><span style="color:#676E95;font-style:italic;">//webpack:///./node_modules/next/dist/client/next-dev.js</span></span>
<span class="line"><span style="color:#A6ACCD;">                __webpack_require__                       </span></span>
<span class="line"><span style="color:#A6ACCD;">                checkDeferredModules	                   </span></span>
<span class="line"><span style="color:#A6ACCD;">                webpackJsonpCallback	          </span><span style="color:#676E95;font-style:italic;">//webpack:///webpack/bootstrap:32 </span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#FFCB6B;">http</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//localhost:3000/_next/static/runtime/main.js?ts=1585882815943         </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pages/XXX.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#FFCB6B;">下的3个获取数据的方法的区别</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">                            服务端      客户端                 执行时间</span></span>
<span class="line"><span style="color:#A6ACCD;">        1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">getInitialProps     </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">        </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">     在渲染页面之前就会运行（服务器端）执行</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 而当使用Next</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">Link或Next</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">Router切换页面时，在（客户端）执行  </span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">9.3版本后被以下2个替代了且只能选1个来用!!</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">            1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">1getStaticProps      </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">        </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">      </span><span style="color:#82AAFF;">在build时</span><span style="color:#A6ACCD;">(客户端一请求</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">服务端就build)就搞数据来渲染页面</span></span>
<span class="line"><span style="color:#A6ACCD;">            1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">2getServerSideProps  </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">        </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">      在每次请求时</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">都用getServerSideProps返回的数据来渲染页面</span></span>
<span class="line"><span style="color:#A6ACCD;">        2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">getStaticPaths      </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">        </span><span style="color:#FF9CAC;">false</span><span style="color:#A6ACCD;">      仅在建造时（fallback </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">）</span><span style="color:#676E95;font-style:italic;">//用于在使用动态路由时生成静态文件</span></span></code></pre></div><hr><blockquote><p>React源码</p></blockquote><p><a href="https://p1.music.126.net/VU37zHp-6hAUfNaZbu3HRw==/109951165071751567.jpg%E7%B1%BB%E5%9B%BE" target="_blank" rel="noreferrer">https://p1.music.126.net/VU37zHp-6hAUfNaZbu3HRw==/109951165071751567.jpg类图</a></p><h1 id="https-juejin-cn-post-7202085514400038969-heading-23【动图-大白话🍓解析react源码】render阶段中fiber树的初始化与对比更新" tabindex="-1"><a href="https://juejin.cn/post/7202085514400038969#heading-23%E3%80%90%E5%8A%A8%E5%9B%BE+%E5%A4%A7%E7%99%BD%E8%AF%9D%F0%9F%8D%93%E8%A7%A3%E6%9E%90React%E6%BA%90%E7%A0%81%E3%80%91Render%E9%98%B6%E6%AE%B5%E4%B8%ADFiber%E6%A0%91%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8E%E5%AF%B9%E6%AF%94%E6%9B%B4%E6%96%B0%EF%BD%9E" target="_blank" rel="noreferrer">https://juejin.cn/post/7202085514400038969#heading-23【动图+大白话🍓解析React源码】Render阶段中Fiber树的初始化与对比更新～</a> <a class="header-anchor" href="#https-juejin-cn-post-7202085514400038969-heading-23【动图-大白话🍓解析react源码】render阶段中fiber树的初始化与对比更新" aria-label="Permalink to &quot;https://juejin.cn/post/7202085514400038969#heading-23【动图+大白话🍓解析React源码】Render阶段中Fiber树的初始化与对比更新～&quot;">​</a></h1><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#A6ACCD;">jsx → React</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">() → fiber → DOM</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Fiber</span><span style="color:#676E95;font-style:italic;">//即虚拟dom, 用于描述ReactElement对象在内存中的状态</span></span>
<span class="line"><span style="color:#A6ACCD;">    fiber1是当前的旧的</span></span>
<span class="line"><span style="color:#A6ACCD;">    fiber2是正在构造的新的</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">wip </span><span style="color:#676E95;font-style:italic;">//work in progress fiber</span></span>
<span class="line"><span style="color:#A6ACCD;">nextUnitOfWork </span><span style="color:#676E95;font-style:italic;">//将要更新的下一个fiber</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">reconciliation协调</span><span style="color:#A6ACCD;">(也就是diff)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//算法复杂度O(n) //每个节点都只走一遍</span></span>
<span class="line"><span style="color:#A6ACCD;">    render 阶段：这个阶段是可中断的，会找出所有节点的变更</span></span>
<span class="line"><span style="color:#A6ACCD;">    commit 阶段：这个阶段是不可中断的，会执行所有的变更</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">render时</span></span>
<span class="line"><span style="color:#A6ACCD;">    createRootFiber</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">scheduleUpdateOnFiber</span><span style="color:#A6ACCD;">(rootFilber)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">requestIdleCallback</span><span style="color:#A6ACCD;">(workLoop)</span><span style="color:#676E95;font-style:italic;">//React自己实现了替代requestIdleCallback的scheduler</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//workLoop 一直取performUnitOfWork 返回的 next.sibling 或 next.return.sibling,  直到拿不到就跳出循环</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">performUnitOfWork</span><span style="color:#A6ACCD;">(render阶段) </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">commitRoot</span><span style="color:#A6ACCD;">(commit阶段)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">                updateHostComponent </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> updateFunctionComponent</span></span>
<span class="line"><span style="color:#A6ACCD;">                    reconcileChildren </span><span style="color:#676E95;font-style:italic;">//diff child</span></span></code></pre></div>`,20),e=[o];function t(c,r,y,D,F,C){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{i as __pageData,u as default};
