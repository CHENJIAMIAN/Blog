import{_ as s,o as a,c as n,O as l}from"./chunks/framework.4afe7240.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"HTTP.md","filePath":"HTTP.md"}'),p={name:"HTTP.md"},o=l(`<h2 id="script-加载脚步可以修改请求头的referer吗" tabindex="-1">&lt;script&gt;加载脚步可以修改请求头的referer吗 <a class="header-anchor" href="#script-加载脚步可以修改请求头的referer吗" aria-label="Permalink to &quot;\\&lt;script&gt;加载脚步可以修改请求头的referer吗&quot;">​</a></h2><p>在 script 标签中加载的脚本是不可以修改请求头的 referer 字段的。在浏览器中，script 标签加载的资源是通过 GET 请求获取的，并且浏览器会自动添加 referer 字段，该字段的值为当前页面的地址，无法修改。</p><p>如果需要修改 referer 字段，可以考虑使用 XMLHttpRequest 对象发送 AJAX 请求，并手动设置请求头 referer 的值。例如：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> xhr </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">XMLHttpRequest</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">open</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">GET</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setRequestHeader</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Referer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://example.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onreadystatechange</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">XMLHttpRequest</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">DONE</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 处理响应</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">xhr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>需要注意的是，修改 referer 字段可能会引发安全问题，应慎重使用。</p><h2 id="authority-open-uino-com" tabindex="-1">:authority：open.uino.com <a class="header-anchor" href="#authority-open-uino-com" aria-label="Permalink to &quot;\\:authority：open.uino.com&quot;">​</a></h2><p>&quot;:authority&quot; 是 HTTP/2 中的一个伪头（pseudo-header），用于标识请求目标的权威名称。它表示请求的 URI 的 &quot;Authority&quot; 部分，通常是主机名和端口号。在 HTTP/1.1 中，这个值通常出现在 &quot;Host&quot; 请求头字段中，而在 HTTP/2 中，则使用 &quot;:authority&quot; 伪头字段。因此，&quot;:authority: open.uino.com&quot; 表示请求的目标是 &quot;open.uino.com&quot; 这个主机，并且使用默认的端口号（80 或 443）。</p><h2 id="method-path-scheme呢" tabindex="-1">:method :path :scheme呢 <a class="header-anchor" href="#method-path-scheme呢" aria-label="Permalink to &quot;\\:method \\:path \\:scheme呢&quot;">​</a></h2><p>&quot;:method&quot;, &quot;:path&quot;, 和 &quot;:scheme&quot; 都是 HTTP/2 中的伪头（pseudo-header），用于在请求和响应中传递关于请求方法、请求目标和协议方案的信息。</p><ul><li>&quot;:method&quot; 表示请求使用的 HTTP 方法，例如 GET、POST、PUT 等。该字段值对应于 HTTP/1.x 的请求行中的请求方法字段。</li><li>&quot;:path&quot; 表示请求的目标 URI 的路径和查询字符串，不包括协议、主机名和端口号。该字段值对应于 HTTP/1.x 的请求行中的请求 URI 字段。</li><li>&quot;:scheme&quot; 表示请求使用的协议方案，例如 &quot;http&quot; 或 &quot;https&quot;。该字段值对应于 HTTP/1.x 的请求行中的协议字段。</li></ul><p>在 HTTP/2 中，这些伪头字段不再出现在请求和响应的正文中，而是作为帧头的一部分传输。这样做的目的是为了提高性能，减少了请求和响应的数据量和延迟。</p><h2 id="什么是伪头-为什么要有伪头" tabindex="-1">什么是伪头，为什么要有伪头 <a class="header-anchor" href="#什么是伪头-为什么要有伪头" aria-label="Permalink to &quot;什么是伪头，为什么要有伪头&quot;">​</a></h2><p>伪头（pseudo-header）是 HTTP/2 协议中引入的一种特殊的头部字段。伪头字段以 &quot;:&quot; 开头，用于传输与请求或响应本身相关的元数据信息。HTTP/2 规范定义了一些特定的伪头字段，包括：</p><ul><li>:method - 请求方法</li><li>:scheme - 协议方案（如 &quot;http&quot; 或 &quot;https&quot;）</li><li>:authority - 请求的主机名和端口号</li><li>:path - 请求的路径和查询字符串</li></ul><p>这些伪头字段不像普通的 HTTP 头部字段一样在请求或响应的消息体中出现，而是作为帧头的一部分在 HTTP/2 连接中传输。这种设计可以减少请求和响应的头部信息的大小和传输延迟，提高传输效率和性能。</p><p>伪头字段在 HTTP/2 中有重要作用，例如可以帮助服务器快速地解析和处理请求，同时也可以帮助客户端构造有效的请求。但需要注意的是，伪头字段只在 HTTP/2 协议中存在，在 HTTP/1.x 协议中并没有这些概念。</p><p>图解伪头在整个帧中的位置</p><p>下图展示了 HTTP/2 协议中帧（Frame）的结构，伪头字段出现在了帧头（Frame Header）中：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">+-----------------------------------------------+</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">                 Frame Header                  </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#89DDFF;">+-----------------------------------------------+</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">                Header Block Fragment          </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#89DDFF;">+-----------------------------------------------+</span></span>
<span class="line"><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">                    Padding                    </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#89DDFF;">+-----------------------------------------------+</span></span></code></pre></div><p>帧头由 9 个字节组成，包括以下字段：</p><ul><li>Length：占 24 位，表示整个帧的长度（不包括帧头）。因为 HTTP/2 采用二进制协议，所以长度以字节为单位。</li><li>Type：占 8 位，表示帧的类型。HTTP/2 定义了 10 种不同类型的帧，例如数据帧（DATA）、头部帧（HEADERS）、优先级帧（PRIORITY）等。</li><li>Flags：占 8 位，表示帧的标志位。标志位可以用来传输一些附加信息，例如数据帧的 END_STREAM 标志表示该帧是最后一个数据帧。</li><li>Stream Identifier：占 31 位，表示帧所属的流的标识符。HTTP/2 中的所有帧都必须与一个流相关联，流可以看作是一组相互关联的帧的序列。流标识符可以用于将帧路由到正确的流中。</li></ul><p>在头部帧（HEADERS）中，伪头字段（例如 :method、:scheme、:path、:authority）会出现在帧头的 Payload 部分中，其他 HTTP 头部字段则出现在帧头后的 Header Block Fragment 和 Padding 中。由于伪头字段具有特殊的作用和语法规则，因此它们需要出现在帧头的 Payload 中，并且需要严格按照规范进行编码和解码。</p><h2 id="给出头部帧-数据帧-帧头-头部帧的payload-的层级关系" tabindex="-1">给出头部帧，数据帧，帧头，头部帧的Payload 的层级关系 <a class="header-anchor" href="#给出头部帧-数据帧-帧头-头部帧的payload-的层级关系" aria-label="Permalink to &quot;给出头部帧，数据帧，帧头，头部帧的Payload 的层级关系&quot;">​</a></h2><p>在 HTTP/2 协议中，数据传输的基本单位是帧（frame）。帧分为头部帧和数据帧两种类型。</p><ul><li>帧头（Frame Header）：帧头包含了帧的基本信息，如帧类型、帧长度、标志等。</li><li>头部帧（Headers Frame）：头部帧用于传输 HTTP 头部信息。 <ul><li>头部帧的 Payload（Header Payload）：头部帧的 Payload 是 HTTP 头部信息的二进制表示。</li></ul></li><li>数据帧（Data Frame）：数据帧用于传输请求体和响应体的实际数据。</li></ul><p>下面是头部帧、数据帧、帧头和 Payload 的层级关系：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">在 HTTP</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> 中，头部帧和数据帧共同组成了完整的 HTTP 报文。客户端和服务器通过多个流（Stream）来交换 HTTP 报文，每个流都有一个唯一的标识符，并且可以包含多个头部帧和数据帧。HTTP</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> 协议中定义了多种类型的帧，例如优先级帧（PRIORITY Frame）、重置帧（RST_STREAM Frame）等，它们都是为了支持更高效的数据传输而设计的。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">+-----------------------------------------------+</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">               Headers Frame 头部帧             </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">+---------------+---------------+---------------+</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">    Length </span><span style="color:#F78C6C;">24</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">Type</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">Flags</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)   </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">+---------------+---------------+---------------+</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">                Stream </span><span style="color:#82AAFF;">Identifier</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">31</span><span style="color:#A6ACCD;">)         </span><span style="color:#89DDFF;">|</span><span style="color:#676E95;font-style:italic;">//帧头（Frame Header）是 HTTP/2 协议中定义的一种固定长度的帧头部分，由 9 个字节组成，包含了一些关键信息，如帧长度、帧类型、标志位和所属的流标识符等。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">+---------------+-------------------------------+</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">                 Header Payload                </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//HTTP 头部的二进制表示, 每个头部帧都包含了 HTTP 报文头部的全部信息</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">+---------------+-------------------------------+</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;"> Header </span><span style="color:#FFCB6B;">Payload</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">	头部数据（Header Block Fragment）：在 HTTP</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;"> 中，头部信息可以被分成多个片段（Fragment），每个片段都有自己的长度和标志位。头部数据可能包含 HTTP 报文的普通头部字段、伪头字段和其他自定义的头部字段。</span></span>
<span class="line"><span style="color:#A6ACCD;">	填充数据（Padding）：是可选的，可以用来填充帧的 Payload 部分，以使帧达到指定的长度。填充数据的长度由帧头的 Padding Length 字段指定。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">+-----------------------------------------------+</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">                 Data Frame 数据帧              </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">+---------------+---------------+---------------+</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">    Length </span><span style="color:#F78C6C;">24</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">Type</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">Flags</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">8</span><span style="color:#A6ACCD;">)   </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">+---------------+---------------+---------------+</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">                Stream </span><span style="color:#82AAFF;">Identifier</span><span style="color:#A6ACCD;"> (</span><span style="color:#F78C6C;">31</span><span style="color:#A6ACCD;">)         </span><span style="color:#89DDFF;">|</span><span style="color:#676E95;font-style:italic;">//帧头（Frame Header）是 HTTP/2 协议中定义的一种固定长度的帧头部分，由 9 个字节组成，包含了一些关键信息，如帧长度、帧类型、标志位和所属的流标识符等。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">+---------------+-------------------------------+</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">                   Data Payload                </span><span style="color:#89DDFF;">|</span><span style="color:#676E95;font-style:italic;">//请求体或响应体的实际数据</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">+-----------------------------------------------+</span></span></code></pre></div><p>从上面的结构可以看出，HTTP/2 帧由帧头和帧负载两部分组成，其中帧头又包含了长度、类型、标志和流标识等信息。头部帧的负载是 HTTP 头部的二进制表示，数据帧的负载则是请求体或响应体的实际数据。在 HTTP/2 中，头部帧和数据帧的长度是动态计算的，不再像 HTTP/1.x 那样有固定的大小限制。</p><h2 id="帧头frame-header" tabindex="-1">帧头Frame Header <a class="header-anchor" href="#帧头frame-header" aria-label="Permalink to &quot;帧头Frame Header&quot;">​</a></h2><p>帧头（Frame Header）是 HTTP/2 协议中定义的一种固定长度的帧头部分，由 9 个字节组成。帧头部分包含了以下信息：</p><ul><li>长度（Length）：占用 24 位，指定了帧的长度，不包括帧头的 9 个字节。</li><li>类型（Type）：占用 8 位，指定了帧的类型，如 HEADERS Frame、DATA Frame 等。</li><li>标志位（Flags）：占用 8 位，指定了帧的一些特殊标志，例如是否带有填充数据、是否需要压缩等。</li><li>流标识符（Stream Identifier）：占用 31 位，指定了帧所属的流的标识符。</li></ul>`,31),e=[o];function t(r,c,D,y,F,A){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{i as __pageData,d as default};
