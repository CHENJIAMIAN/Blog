import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const p="/assets/BE41B18D0661494485F87CC73E6EF4C6.cabd1ad8.png",o="/assets/172D5C1D0BD348F29C16E8CA8D41E22C.e8e99bfd.png",e="/assets/033C64D04F80490783A33B99FDD1F989.3ba3895e.png",f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"【网络】WS TCP IP HTTP POST GET.md","filePath":"【网络】WS TCP IP HTTP POST GET.md"}'),t={name:"【网络】WS TCP IP HTTP POST GET.md"},c=l('<p><img src="'+p+`" alt=""></p><hr><blockquote><p>长链接历史</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">WebSocket</span><span style="color:#A6ACCD;"> (双向连接)和 </span><span style="color:#82AAFF;">EventSource</span><span style="color:#A6ACCD;"> (单向连接)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//EventSource 接口用于接收服务器发送的事件。它通过HTTP连接到一个服务器，以text/event-stream 格式接收事件, 不关闭连接。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#FFCB6B;">历史</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">轮询 -&gt; Comet -&gt;  WebSocket -&gt; SSE</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">Comet</span><span style="color:#A6ACCD;">(一种利用长连接的规范</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">后端响应时写死循环): Ajax Push，HTTP Streaming和HTTP Server Push 实现了它</span></span>
<span class="line"><span style="color:#A6ACCD;">        WebSocket借鉴了Comet</span></span>
<span class="line"><span style="color:#A6ACCD;">        Server</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Sent </span><span style="color:#82AAFF;">Events</span><span style="color:#A6ACCD;"> (服务端事件)使用流信息向浏览器推送信息。它基于 HTTP 协议</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">EventSource</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">服务器地址</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> )</span></span>
<span class="line"><span style="color:#A6ACCD;">            content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> text</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">stream</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">http 长连接和 websocket 的长连接区别</span></span>
<span class="line"><span style="color:#A6ACCD;">    HTTP1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">1</span><span style="color:#FFCB6B;">通过使用Connection</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">keep</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">alive进行长连接，HTTP 1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">1默认进行持久连接。在一次 TCP 连接中可以完成多个 HTTP 请求</span></span>
<span class="line"><span style="color:#A6ACCD;">         发送多次请求头</span></span>
<span class="line"><span style="color:#A6ACCD;">        Keep</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Alive保持有限时间 </span><span style="color:#676E95;font-style:italic;">//可以在不同的服务器软件（如Apache）中设定这个时间。</span></span>
<span class="line"><span style="color:#A6ACCD;">        keep</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">alive双方并没有建立真正的连接会话，服务端可以在任何一次请求完成后关闭。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">websocket是一个真正的全双工</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">        发送1次请求头</span></span>
<span class="line"><span style="color:#A6ACCD;">        WebSocket 它本身就规定了是真正的双工的长连接，两边都必须要维持住连接的状态。</span></span></code></pre></div><hr><blockquote><p>WS</p></blockquote><p><img src="`+o+`" alt=""></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">WebSocket协议 </span><span style="color:#676E95;font-style:italic;">//ws://example.com:80/some/path        </span></span>
<span class="line"><span style="color:#A6ACCD;">    建立在 TCP 之上</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">通过 HTTP 的 </span><span style="color:#F78C6C;">101</span><span style="color:#A6ACCD;"> 状态码建立连接</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 默认端口也是80和443</span></span>
<span class="line"><span style="color:#A6ACCD;">    支持文本</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">二进制数据</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">没有同源限制</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">握手过程</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">请求</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">101</span><span style="color:#A6ACCD;"> 状态码 </span><span style="color:#676E95;font-style:italic;">//设置协议/版本/标识</span></span>
<span class="line"><span style="color:#A6ACCD;">        Sec</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">WebSocket</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Protocol</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">jsonrpc</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">protocol2 </span></span>
<span class="line"><span style="color:#A6ACCD;">        Sec</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">WebSocket</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Version</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">13</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Upgrade</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">websocket </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">响应</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Connection</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">Upgrade  </span><span style="color:#676E95;font-style:italic;">//多出链接建立标识</span></span>
<span class="line"><span style="color:#A6ACCD;">        Sec</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">WebSocket</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Accept</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">lWc5qBYvZLWjFVzUOegIyRDnSG0</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">        Sec</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Websocket</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Protocol</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">jsonrpc </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Upgrade</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">websocket</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//用法</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> ws </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">WebSocket</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">wss://echo.websocket.org</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> arg2是子协议)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//执行上面语句之后，客户端就会与服务器进行连接。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onopen</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">evt</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//用于指定连接成功后的回调函数。</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Connection open ...</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello WebSockets!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//发送 Blob 对象的例子。</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">file</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">input[type=&quot;file&quot;]</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">files</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">file</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">//发送 ArrayBuffer 对象的例子。</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">img</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">canvas_context</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getImageData</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">400</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">320</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">binary</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Uint8Array</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">img</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">img</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">length</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">binary</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">img</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">binary</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;">           </span></span>
<span class="line"><span style="color:#A6ACCD;">    ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">open</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//如果要指定多个回调函数，可以使用addEventListener方法。</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello Server!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">    ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//指定收到服务器数据后的回调函数。</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">( </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Received Message: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">              </span><span style="color:#676E95;font-style:italic;">//注意，服务器数据可能是文本，也可能是二进制数据（blob对象或Arraybuffer对象）。</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">typeof</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">String</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Received data string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">instanceof</span><span style="color:#F07178;"> </span><span style="color:#FFCB6B;">ArrayBuffer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">buffer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Received arraybuffer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onclose</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;">//指定连接关闭后的回调函数。</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reason</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">reason</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#C792EA;">var</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">wasClean</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">wasClean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">              </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Connection closed.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">};</span><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#A6ACCD;">   </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//四、API</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">4.2</span><span style="color:#A6ACCD;"> webSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState</span></span>
<span class="line"><span style="color:#A6ACCD;">    readyState属性返回实例对象的当前状态，共有四种。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">switch</span><span style="color:#A6ACCD;"> (ws</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">readyState) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> WebSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CONNECTING</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> WebSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">OPEN</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> WebSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CLOSING</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;font-style:italic;">case</span><span style="color:#A6ACCD;"> WebSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">CLOSED</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//除了动态判断收到的数据类型，也可以使用binaryType属性，显式指定收到的二进制数据类型。</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 收到的是 blob 数据</span></span>
<span class="line"><span style="color:#A6ACCD;">        ws</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">binaryType </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">blob</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//ws.binaryType = &quot;arraybuffer&quot;;</span></span>
<span class="line"><span style="color:#A6ACCD;">        ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onmessage</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">e</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">          </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">size</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//e.data.byteLength</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">4.7</span><span style="color:#A6ACCD;"> webSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bufferedAmount</span></span>
<span class="line"><span style="color:#A6ACCD;">    实例对象的bufferedAmount属性，表示还有多少字节的二进制数据没有发送出去。它可以用来判断发送是否结束。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ArrayBuffer</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">10000000</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        socket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(data)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (socket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">bufferedAmount </span><span style="color:#89DDFF;">===</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 发送完毕</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// 发送还没结束</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F78C6C;">4.8</span><span style="color:#A6ACCD;"> webSocket</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">onerror</span></span>
<span class="line"><span style="color:#A6ACCD;">    实例对象的onerror属性，用于指定报错时的回调函数。</span></span>
<span class="line"><span style="color:#A6ACCD;">    socket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onerror</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// handle error event};</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">socket</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// handle error event});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//推荐一款非常特别的 WebSocket 服务器：Websocketd。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//它的最大特点，就是后台脚本不限语言，标准输入（stdin）就是 WebSocket 的输入，标准输出（stdout）就是 WebSocket 的输出。</span></span></code></pre></div><hr><blockquote><p>层级</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">OSI</span><span style="color:#A6ACCD;">(Open System Interconnect 开放式系统互联)</span><span style="color:#FFCB6B;">参考模型</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">重点 tcp ip 分别是什么层</span><span style="color:#89DDFF;">/</span></span></code></pre></div><p><img src="`+e+`" alt=""></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">路由器工作于 网络层，     根据MAC地址</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">用来隔离广播域（子网），连接的设备分属不同子网，工作范围是多个子网之间，负责网络与网络之间通信。 </span><span style="color:#676E95;font-style:italic;">//交换机能做的，路由都能做</span></span>
<span class="line"><span style="color:#A6ACCD;">交换机工作于 数据链路层， 根据IP地址</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 用来隔离冲突域，连接的所有设备同属于一个广播域（子网），负责子网内部通信。</span></span></code></pre></div><hr><blockquote><p>TCP/IP</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">TCP三次握手（连接）</span><span style="color:#676E95;font-style:italic;">//TCP传输控制协议  UDP用户数据报协议 //SYN：同步序列编号（Synchronize Sequence Numbers）    //ACK：确认字符(Acknowledgement）</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">记住SASA傻傻</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">    第1次握手：</span><span style="color:#89DDFF;">------&gt;</span><span style="color:#A6ACCD;">SYN（syn</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">随机数A）        客户端状态变为 [SYN_SENT]</span></span>
<span class="line"><span style="color:#A6ACCD;">    第2次握手：</span><span style="color:#89DDFF;">&lt;-----</span><span style="color:#A6ACCD;"> ACK（ack</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">随机数A</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">） </span></span>
<span class="line"><span style="color:#A6ACCD;">              </span><span style="color:#89DDFF;">&lt;-----</span><span style="color:#A6ACCD;"> SYN（ack</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">随机数B）       服务端状态变为  [SYN_RECV]</span></span>
<span class="line"><span style="color:#A6ACCD;">    第3次握手：</span><span style="color:#89DDFF;">------&gt;</span><span style="color:#82AAFF;">ACK</span><span style="color:#A6ACCD;">(ack</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">随机数B</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">）       双方的状态变为 [STABLISHED]</span></span>
<span class="line"><span style="color:#A6ACCD;">相当于</span></span>
<span class="line"><span style="color:#A6ACCD;">    你能收到吗？我收到了，你呢？我也收到了</span></span>
<span class="line"><span style="color:#A6ACCD;">为什么不是两次握手？</span></span>
<span class="line"><span style="color:#A6ACCD;">    两次握手就变成：你能收到吗？我收到了，你呢？（B不知道A收没收到）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">TCP四次挥手（断开）</span></span>
<span class="line"><span style="color:#A6ACCD;">    FIN：结束标志</span></span>
<span class="line"><span style="color:#A6ACCD;">    （</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">） TCP客户端发送一个FIN，用来关闭客户到服务器的数据传送。</span></span>
<span class="line"><span style="color:#A6ACCD;">    （</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">） 服务器收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。</span></span>
<span class="line"><span style="color:#A6ACCD;">    （</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">） 服务器关闭客户端的连接，发送一个FIN给客户端。</span></span>
<span class="line"><span style="color:#A6ACCD;">    （</span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">） 客户端发回ACK报文确认，并将确认序号设置为收到序号加1。</span></span>
<span class="line"><span style="color:#A6ACCD;">相当于</span></span>
<span class="line"><span style="color:#A6ACCD;">    A:“我要断了。”A</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">FIN_WAIT1</span></span>
<span class="line"><span style="color:#A6ACCD;">    B:“好</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">我也要断了</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">”B</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">CLOSE_WAIT </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> A</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">FIN_WAIT2</span></span>
<span class="line"><span style="color:#A6ACCD;">    B:”好</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">我已经断了</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">你断吧”B</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">LAST_ACK</span></span>
<span class="line"><span style="color:#A6ACCD;">    A:”好的”A</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">TIME_WAIT </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> B</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">CLOSED  ，A等待2MSL</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">保证B收到了消息</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">否则重说一次”我知道了”</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">CLOSED</span></span></code></pre></div><hr><blockquote><p>HTTP POST GET</p></blockquote><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">四种POST方法上传数据到服务器</span><span style="color:#A6ACCD;">(Content</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Type):</span></span>
<span class="line"><span style="color:#A6ACCD;">    1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">application</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">x</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">www</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">form</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">urlencoded </span></span>
<span class="line"><span style="color:#A6ACCD;">        title</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">test</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">sub</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">5B</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">5D</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">sub</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">5B</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">5D</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">&amp;</span><span style="color:#A6ACCD;">sub</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">5B</span><span style="color:#89DDFF;">%</span><span style="color:#A6ACCD;">5D</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">multipart</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">form</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">data </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;">WebKitFormBoundaryrGKCBY7qhFd3TrwA （请求头的Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">multipart</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">form</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> boundary</span><span style="color:#89DDFF;">=----</span><span style="color:#A6ACCD;">8d602a57d78bace</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">Boundary属性，4个“</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">”）</span></span>
<span class="line"><span style="color:#A6ACCD;">        （有boundary分隔符隔离，采用了键值对的方式，当上传的字段是文件时，会有Content</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Type来表名文件类型；content</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">disposition，用来说明字段的一些信息；）</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;">8d602a57d78bace（开始分隔符，6个“</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">”）</span></span>
<span class="line"><span style="color:#A6ACCD;">                Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Disposition</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> form</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fileName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> filename</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ApplicationLog.dll</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">（没有分号）</span></span>
<span class="line"><span style="color:#A6ACCD;">                Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> application</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">octet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">stream</span></span>
<span class="line"><span style="color:#A6ACCD;">                （空一行不然会出错  \\r\\n)</span></span>
<span class="line"><span style="color:#A6ACCD;">                要post的内容1</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;">8d602a57d78bace（开始分隔符，6个“</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">”）</span></span>
<span class="line"><span style="color:#A6ACCD;">                Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Disposition</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> form</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">fileName</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> filename</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ApplicationLog.dll</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">                Content</span><span style="color:#89DDFF;">-</span><span style="color:#FFCB6B;">Type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> application</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">octet</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">stream</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span></span>
<span class="line"><span style="color:#A6ACCD;">                要post的内容2</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">----</span><span style="color:#A6ACCD;">8d602a57d78bace</span><span style="color:#89DDFF;">--</span><span style="color:#A6ACCD;">（结束分隔符</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">前面6个“</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">”，后面2个“</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">”）</span></span>
<span class="line"><span style="color:#A6ACCD;">    3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">application</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">json </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">title</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sub</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">:[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">text</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">xml </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">i4</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">41</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">i4</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">value</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">localhost 是一个域名，通过回送网络接口访问主机上运行的网络服务</span></span>
<span class="line"><span style="color:#A6ACCD;">    IPv4回送地址 </span><span style="color:#F78C6C;">127.0</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">0</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">1</span><span style="color:#FFCB6B;">和IPv6回送地址</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">: </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">//127.0.0.1 这个地址通常分配给loopback(虚拟网卡)</span></span>
<span class="line"><span style="color:#A6ACCD;">localhost不经过网络层（网卡），只在本机内部回送</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">http的底层是在应用层里的一个特殊处理的socket</span></span>
<span class="line"><span style="color:#A6ACCD;">    socket是用来管理端口的抽象概念</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(url能看到参数 2kb) </span><span style="color:#676E95;font-style:italic;">//http://host/path?键=值</span></span>
<span class="line"><span style="color:#82AAFF;">post</span><span style="color:#A6ACCD;">(提交的信息封装在请求体</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">安全 2GB)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">REST Representational State Transfer 客户端通过四个HTTP动词，对服务器端资源进行操作，实现</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">表现层状态转换</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    每一个URI代表一种资源；看Url就知道要什么</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 看http method就知道干什么</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">看http status code就知道结果如何</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">常用状态码（14个最常用) (</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">重点</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    1xx信息（正在处理）</span></span>
<span class="line"><span style="color:#A6ACCD;">    2xx成功</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">201</span><span style="color:#A6ACCD;">        Created 在HTTP协议中，</span><span style="color:#F78C6C;">201</span><span style="color:#A6ACCD;"> Created 是一个代表成功的应答状态码，表示请求已经被成功处理，并且创建了新的资源</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">204</span><span style="color:#A6ACCD;">	没内容</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">206</span><span style="color:#A6ACCD;">	局部内容</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 包含  Content</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">Range 首部</span></span>
<span class="line"><span style="color:#A6ACCD;">    3xx重定向（资源已被分配了新的 URL）</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">301</span><span style="color:#A6ACCD;">	   </span><span style="color:#82AAFF;">url已永久更新浏览器会记住</span><span style="color:#A6ACCD;">(有缓存)  </span><span style="color:#676E95;font-style:italic;">//换域名时用(SEO友好)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">302</span><span style="color:#A6ACCD;">	   </span><span style="color:#82AAFF;">url已临时更新</span><span style="color:#A6ACCD;">(无缓存)             </span><span style="color:#676E95;font-style:italic;">//做活动时用(237中303|307细化了302,但基本不用)  </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">304</span><span style="color:#A6ACCD;">    未修改，访问缓存资源</span></span>
<span class="line"><span style="color:#A6ACCD;">    4xx客户端错误</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">400</span><span style="color:#A6ACCD;">   报文有错误</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">401</span><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">未授权</span><span style="color:#A6ACCD;">(登录)禁止访问</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//402 未付款 </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">403</span><span style="color:#A6ACCD;">   禁止该用户访问  </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">405</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">,</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">方法不允许</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//409   Conflict 表示请求与服务器端目标资源的当前状态相冲突。如已经登录了</span></span>
<span class="line"><span style="color:#A6ACCD;">    5xx服务器错误</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">//501    Not Implemented</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">502</span><span style="color:#A6ACCD;">    错误网关</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">503</span><span style="color:#A6ACCD;">    服务器不可用</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F78C6C;">504</span><span style="color:#A6ACCD;">    网关超时</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">报文结构</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">    报文头</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">空行</span><span style="color:#A6ACCD;">(CL</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">RF) </span><span style="color:#82AAFF;">回车换行</span><span style="color:#A6ACCD;">(\\r \\n)</span></span>
<span class="line"><span style="color:#A6ACCD;">    报文主体</span></span></code></pre></div>`,19),r=[c];function D(y,F,C,A,i,u){return n(),a("div",null,r)}const E=s(t,[["render",D]]);export{f as __pageData,E as default};
