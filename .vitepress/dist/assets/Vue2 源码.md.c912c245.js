import{_ as s,o as n,c as a,O as l}from"./chunks/framework.4afe7240.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"Vue2 源码.md","filePath":"Vue2 源码.md"}'),p={name:"Vue2 源码.md"},o=l(`<div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">调试vue3</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dev</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nodescripts/dev.js--sourcemap</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">加载渲染过程</span></span>
<span class="line"><span style="color:#A6ACCD;">    父beforeCreate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">父created</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">父beforeMount</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">            子beforeCreate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">子created</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">子beforeMount</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">子mounted    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">父mounted</span></span>
<span class="line"><span style="color:#A6ACCD;">更新过程</span></span>
<span class="line"><span style="color:#A6ACCD;">    父beforeUpdate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">            子beforeUpdate</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">子updated    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">父updated</span></span>
<span class="line"><span style="color:#A6ACCD;">销毁过程</span></span>
<span class="line"><span style="color:#A6ACCD;">    父beforeDestroy</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#A6ACCD;">            子beforeDestroy</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">子destroyed    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">父destroyed</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">vue用es5写不用es6写,因为es5很容易在原型上挂载方法,更容易分散在各个文件去挂载,更方便维护</span><span style="color:#89DDFF;">/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">初始化方法们</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">方便后续调用</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#82AAFF;">initMixin</span><span style="color:#A6ACCD;">(Vue)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Vue.prototype</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">_init</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (options)</span></span>
<span class="line"><span style="color:#82AAFF;">stateMixin</span><span style="color:#A6ACCD;">(Vue)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Vue.prototype</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$delete</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">del</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$set</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> ( expOrFn</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cb</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options )</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#82AAFF;">eventsMixin</span><span style="color:#A6ACCD;">(Vue)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Vue.prototype</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$emit</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (event)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//当执行 vm.$emit(event) 的时候，根据事件名 event 找到所有的回调函数 let cbs = vm._events[event]，然后遍历执行所有的回调函数。</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$off</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (event</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fn)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$on</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (event</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fn) </span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//把所有的事件用 vm._events 存储起来，</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//当执行 vm.$on(event,fn) 的时候，按事件的名称 event 把回调函数 fn 存储起来 vm._events[event].push(fn)。</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$once</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (event</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fn)</span></span>
<span class="line"><span style="color:#82AAFF;">lifecycleMixin</span><span style="color:#A6ACCD;">(Vue)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Vue.prototype</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$delete</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">del</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$destroy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> ()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">$forceUpdate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> ()</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#FFCB6B;">_update</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (vnode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> hydrating)</span></span>
<span class="line"><span style="color:#82AAFF;">renderMixin</span><span style="color:#A6ACCD;">(Vue)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//Vue.prototype   </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">installRenderHelpers</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype)</span><span style="color:#676E95;font-style:italic;">//将这些渲染方法以缩写名称的方式加入到Vue的原型中</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_b</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">bindObjectProps</span><span style="color:#A6ACCD;">( data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> tag</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> asProp</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> isSync )</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_d</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">bindDynamicKeys</span><span style="color:#A6ACCD;">(baseObj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> values)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">createEmptyVNode</span><span style="color:#A6ACCD;">(text) </span><span style="color:#676E95;font-style:italic;">//this._e() 生成一个注释节点</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_f</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">resolveFilter</span><span style="color:#A6ACCD;">(id)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_g</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">bindObjectListeners</span><span style="color:#A6ACCD;">(data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_i</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">looseIndexOf</span><span style="color:#A6ACCD;">(arr</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_k</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">checkKeyCodes</span><span style="color:#A6ACCD;">( eventKeyCode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> builtInKeyCode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> eventKeyName</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> builtInKeyName )</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_l</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">renderList</span><span style="color:#A6ACCD;">( val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> render )</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_m</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">renderStatic</span><span style="color:#A6ACCD;">( index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> isInFor )</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_n</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">toNumber</span><span style="color:#A6ACCD;">(val)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_o</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">markOnce</span><span style="color:#A6ACCD;">( tree</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> index</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key )</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_p</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">prependModifier</span><span style="color:#A6ACCD;">(value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> symbol)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_q</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">looseEqual</span><span style="color:#A6ACCD;">(a</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> b)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_s</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">toString</span><span style="color:#A6ACCD;">(val)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_t</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">renderSlot</span><span style="color:#A6ACCD;">( name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fallback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> props</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> bindObject )</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#FFCB6B;">_u</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ </span><span style="color:#82AAFF;">resolveScopedSlots</span><span style="color:#A6ACCD;">( fns</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// see flow/vnode res, // the following are added in 2.6 hasDynamicKeys, contentHashKey )</span></span>
<span class="line"><span style="color:#A6ACCD;">            _v: ƒ </span><span style="color:#82AAFF;">createTextVNode</span><span style="color:#A6ACCD;">(val)</span></span>
<span class="line"><span style="color:#A6ACCD;">     $nextTick: </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (fn)</span></span>
<span class="line"><span style="color:#A6ACCD;">    _render: </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> ()</span></span>
<span class="line"><span style="color:#82AAFF;">initGlobalAPI</span><span style="color:#A6ACCD;">(Vue);</span><span style="color:#676E95;font-style:italic;">//给Vue的实例对象添加属性 Vue全局API  </span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//初始话完成后console.dir(Vue), 将函数以普通对象的形式输出到控制台里,Vue多出以下方法:</span></span>
<span class="line"><span style="color:#A6ACCD;">    ƒ </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(options)</span></span>
<span class="line"><span style="color:#A6ACCD;">        cid: </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        component: </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> ( id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> definition )</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;">: ƒ </span><span style="color:#82AAFF;">del</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key)</span></span>
<span class="line"><span style="color:#A6ACCD;">        directive: </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> ( id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> definition )</span></span>
<span class="line"><span style="color:#A6ACCD;">        extend: </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (extendOptions)</span></span>
<span class="line"><span style="color:#A6ACCD;">        filter: </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> ( id</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> definition )</span></span>
<span class="line"><span style="color:#A6ACCD;">        mixin: </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (mixin)</span></span>
<span class="line"><span style="color:#A6ACCD;">        nextTick: ƒ </span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;">(cb</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ctx)   </span><span style="color:#676E95;font-style:italic;">//Vue.nextTick</span></span>
<span class="line"><span style="color:#A6ACCD;">        observable: </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (obj)</span></span>
<span class="line"><span style="color:#A6ACCD;">        options: </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">…</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">directives</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">…</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">filters</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">…</span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">_base</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        set: </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val)</span></span>
<span class="line"><span style="color:#A6ACCD;">        use: </span><span style="color:#82AAFF;">ƒ</span><span style="color:#A6ACCD;"> (plugin)</span></span>
<span class="line"><span style="color:#A6ACCD;">        util: </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">warn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">extend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">mergeOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">defineReactive</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ƒ</span><span style="color:#676E95;font-style:italic;">/*定义了响应式getter/setters*/</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype$isServer</span></span>
<span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototype$ssrContext</span></span>
<span class="line"><span style="color:#A6ACCD;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">prototypeFunctionalRenderContext</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">初始化完成</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">我们new </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">()时:    </span></span>
<span class="line"><span style="color:#A6ACCD;">    ƒ </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;"> (options) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">if</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">true</span><span style="color:#A6ACCD;"> &amp;&amp;!(</span><span style="color:#89DDFF;font-style:italic;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">instanceof</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">Vue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">warn</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Vue is a constructor and should be called with the \`new\` keyword</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#A6ACCD;">      this._init(options);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">_init</span><span style="color:#A6ACCD;">(options):</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">整合父子组间的options</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//vm.$options = mergeOptions(..)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">initLifecycle</span><span style="color:#A6ACCD;">(vm);</span><span style="color:#676E95;font-style:italic;">//添加一些下面会用到的变量</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">initEvents</span><span style="color:#A6ACCD;">(vm);</span><span style="color:#676E95;font-style:italic;">//--&gt;updateComponentListeners--&gt;updateListeners(add,remove)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//为Vue的实例方法添加了几个属性值$slots，最后定义了 $attrs 和 $listeners 的监听方法。</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//自定义事件和原生 DOM 事件处理的差异就在事件add,remove的实现上</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//add </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">initRender</span><span style="color:#A6ACCD;">(vm);</span><span style="color:#676E95;font-style:italic;">//ractive化了?</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">callHook</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforeCreate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">);</span><span style="color:#676E95;font-style:italic;">//里面进行vuexInit(this.$store=的赋值操作)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">initInjections</span><span style="color:#A6ACCD;">(vm); </span><span style="color:#676E95;font-style:italic;">// resolve injections before data/props</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">initState</span><span style="color:#A6ACCD;">(vm);</span><span style="color:#676E95;font-style:italic;">//初始化状态InitState调用顺序：    </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">initProps</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">defineReactive</span><span style="color:#A6ACCD;"> ()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">proxy</span><span style="color:#A6ACCD;"> ()</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">initData</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">proxy</span><span style="color:#A6ACCD;"> ()</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">observe</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#82AAFF;">Observer</span><span style="color:#A6ACCD;">():</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//附加到每个被观察对象的Observer类。 一旦附加，Observer用defineProperty将目标对象的属性键转换为收集依赖项和派发更新的 getter/setter。</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#82AAFF;">defineReactive</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">                        </span><span style="color:#82AAFF;">dep</span><span style="color:#A6ACCD;">():</span><span style="color:#89DDFF;">new</span></span>
<span class="line"><span style="color:#A6ACCD;">                        Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">get</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">set</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">computed如何实现</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    先获得deps</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">在让deps下的watcher</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">关注它</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">        props </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> methods </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;"> computed </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">  watch </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">initProvide</span><span style="color:#A6ACCD;">(vm); </span><span style="color:#676E95;font-style:italic;">// resolve provide after data/props</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">callHook</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">created</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">);</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">模板编译 template-&gt;render函数</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">    (重点)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//先调用compiler 版本的 $mount 处理&lt;template&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//编译入口: compileToFunctions--&gt;createCompiler--&gt;createCompilerCreator(编译模板 template，编译配置 options ,Vue 实例 vm)</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">//编译过程：</span></span>
<span class="line"><span style="color:#A6ACCD;">            解析:const ast </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">parse</span><span style="color:#A6ACCD;">(template</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">trim</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span><span style="color:#676E95;font-style:italic;">//解析模板字符串生成 AST,转换bind等attrs       </span></span>
<span class="line"><span style="color:#A6ACCD;">            优化:</span><span style="color:#82AAFF;">optimize</span><span style="color:#A6ACCD;">(ast</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span><span style="color:#676E95;font-style:italic;">//优化语法树   </span></span>
<span class="line"><span style="color:#A6ACCD;">            生成:const code </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">generate</span><span style="color:#A6ACCD;">(ast</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span><span style="color:#676E95;font-style:italic;">//生成代码</span></span>
<span class="line"><span style="color:#A6ACCD;">                                genElement</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">genData</span><span style="color:#89DDFF;">-&gt;</span><span style="color:#A6ACCD;">处理v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">model等</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">重要转换</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">            v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">for比v</span><span style="color:#89DDFF;">-</span><span style="color:#82AAFF;">if优先</span><span style="color:#A6ACCD;">(放同一个标签时)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 不让每次都判断很傻</span></span>
<span class="line"><span style="color:#A6ACCD;">            v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">if </span><span style="color:#676E95;font-style:italic;">//添加标记, 生成vdom时忽略它  //会调用addIfCondition方法，生成vnode的时候会忽略对应节点，render的时候就不会渲染； </span></span>
<span class="line"><span style="color:#A6ACCD;">            v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">show </span><span style="color:#676E95;font-style:italic;">//只是修改style的display  //会生成vnode，render的时候也会渲染成真实节点，只是在render过程中会在节点的属性中修改show属性值，也就是常说的display；</span></span>
<span class="line"><span style="color:#A6ACCD;">            v</span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">html </span><span style="color:#676E95;font-style:italic;">//先所有子节点，再设置 innerHTML 为v-html的值</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span></span>
<span class="line"><span style="color:#A6ACCD;">    dep代表一个响应式值</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">可以在多个地方显示或用到即多个wathcer</span></span>
<span class="line"><span style="color:#A6ACCD;">    wathcer是视图</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">它想要自己的变量有变化时被通知</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> dep会通知它的</span></span>
<span class="line"><span style="color:#A6ACCD;">    observer维护defineProperty</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> 并通过set依赖收集来的dep去通知有订阅它的watcher</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//再调用原型上的$mount方法(递归子组件)</span></span>
<span class="line"><span style="color:#A6ACCD;">    vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#A6ACCD;">(vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">el)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#F07178;">mountComponent</span><span style="color:#89DDFF;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">双向绑定 1 Component 对应 1 render Watcher</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//2.Observer会用defineProperty对data (包括computed wathcer) 进行转换, 添加 getter 和 setter 属性</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//3.render 时, data 的getter被调用(依赖收集)(收集wathcer), getter 中通过 dep.depend(dep.target.addDep)即wathcer.addDep(传入dep实例本身), 绑定了dep和watcher    </span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//4.修改数据时, data 的setter被调用(派发更新), setter时消息传递员会notify所有的subs 即Watcher即对应依赖于此 data 的组件去刷新</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#82AAFF;">消息传递员</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">Dep</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">与data中所有属性一一对应</span><span style="color:#89DDFF;">,</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">读者Watcher订阅了它,成为subs</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#FFCB6B;">依赖收集的过程</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;">    </span><span style="color:#676E95;font-style:italic;">//html模板里的一个表达式对应一个watcher</span></span>
<span class="line"><span style="color:#F07178;">                    1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">存Watcher</span><span style="color:#676E95;font-style:italic;">//new Watcher时, 先会把Dep.target设为当前这个wathcer(后面被用来给wathcer添加subs)</span></span>
<span class="line"><span style="color:#F07178;">                    2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">绑定Watcher到消息传递员</span></span>
<span class="line"><span style="color:#89DDFF;">                        </span><span style="color:#676E95;font-style:italic;">//也就是watcher订阅了dep,成为dep的subs: Watcher.addDep --&gt; Dep(dep.addSub(this) --&gt; this.subs.push(sub)添加了订阅者) </span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#FFCB6B;">派发更新的过程</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#A6ACCD;">修改数据对象</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">触发setter时消息传递员会notify所有的subs即Watcher即对应组件去刷新</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">                    </span></span>
<span class="line"><span style="color:#F07178;">                    </span><span style="color:#82AAFF;">根部的createComponent</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">installComponentHooks</span><span style="color:#F07178;">)</span><span style="color:#A6ACCD;">是属于render函数的</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">即在</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue被转换成render函数时调用</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">⽬</span><span style="color:#A6ACCD;">的是尝试创建</span><span style="color:#F07178;">⼦</span><span style="color:#A6ACCD;">组件返回vnode</span></span>
<span class="line"><span style="color:#F07178;">                    </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#F78C6C;">1.</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">callHook</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforeMount</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-&gt;</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#F78C6C;">2.</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Watcher</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">//构造函数里执行了其里的get里的pushTarget里将Dep.target设为当前watcher</span></span>
<span class="line"><span style="color:#F07178;">                            ( </span><span style="color:#676E95;font-style:italic;">// Watcher有5个构造参数 </span></span>
<span class="line"><span style="color:#F07178;">                             </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;">   </span></span>
<span class="line"><span style="color:#F07178;">                             </span><span style="color:#82AAFF;">updateComponent</span><span style="color:#89DDFF;">=()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">//watcher.get的回调</span></span>
<span class="line"><span style="color:#F07178;">                                     </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">vdom渲染, _update ⽅法的作⽤是把 VNode 渲染成真实的 DOM</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#F07178;">                                      </span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_update</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_render</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">...</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">//createComponent后返回的是组件vnode ，它也⼀样⾛到 vm._update ⽅法，进⽽执⾏了 子组件的patch 函数</span></span>
<span class="line"><span style="color:#89DDFF;">                                      </span><span style="color:#676E95;font-style:italic;">//先vm._render 的作用，返回vdom(vnode)</span></span>
<span class="line"><span style="color:#89DDFF;">                                          </span><span style="color:#676E95;font-style:italic;">//仅创建时调用 ,创建vdom</span></span>
<span class="line"><span style="color:#F07178;">                                           </span><span style="color:#F78C6C;">1</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">$createElement</span><span style="color:#F07178;">(</span><span style="color:#676E95;font-style:italic;">/*context: Component,*/</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">children</span><span style="color:#F07178;">)                                                                                                                                </span></span>
<span class="line"><span style="color:#89DDFF;">                                      </span><span style="color:#676E95;font-style:italic;">//后vm._update 方法，根据虚拟Dom 去创建或更新真实Dom</span></span>
<span class="line"><span style="color:#89DDFF;">                                          </span><span style="color:#676E95;font-style:italic;">//创建和更新时都]调用</span></span>
<span class="line"><span style="color:#F07178;">                                           </span><span style="color:#F78C6C;">2</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">()</span><span style="color:#676E95;font-style:italic;">// : 将差异应用到真实DOM树 显示上从{{value}} 变为 实际值6</span></span>
<span class="line"><span style="color:#89DDFF;">                                              </span><span style="color:#676E95;font-style:italic;">//patch = createPatchFunction(){</span></span>
<span class="line"><span style="color:#89DDFF;">                                              </span><span style="color:#676E95;font-style:italic;">//                   updateDOMListeners  //注册元素的事件: 事件在编译阶段就搞到vnode.data.on里面了，updateDOMListeners在vnode.data.on里面取事件去添加事件监听</span></span>
<span class="line"><span style="color:#F07178;">                                                                 </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">patch</span><span style="color:#F07178;">(1</span><span style="color:#82AAFF;">createElm</span><span style="color:#F07178;">(2</span><span style="color:#82AAFF;">createComponent</span><span style="color:#F07178;">(3</span><span style="color:#A6ACCD;">调用了installComponentHooks里的init钩子</span></span>
<span class="line"><span style="color:#F07178;">                                                                                     (4</span><span style="color:#A6ACCD;">child</span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;">createComponentInstanceForVnode</span><span style="color:#F07178;">(5</span><span style="color:#A6ACCD;">执行Vue构造器</span><span style="color:#F07178;">)</span><span style="color:#F78C6C;">5</span><span style="color:#F07178;">、</span><span style="color:#A6ACCD;">执行child</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">$mount</span><span style="color:#F07178;">)</span><span style="color:#F78C6C;">4</span><span style="color:#F07178;"> )</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;"> )</span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#F07178;">                                                                                、</span><span style="color:#82AAFF;">registerRef</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">                                                                                、</span><span style="color:#82AAFF;">patchVnode</span><span style="color:#F07178;">()</span><span style="color:#676E95;font-style:italic;">//diff算法,更新时才被调用对比新旧两个虚拟树的区别，收集差异  </span></span>
<span class="line"><span style="color:#F07178;">                                                                                )</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">                 </span></span>
<span class="line"><span style="color:#89DDFF;">                                              </span><span style="color:#676E95;font-style:italic;">//                             }</span></span>
<span class="line"><span style="color:#89DDFF;">                                              </span><span style="color:#676E95;font-style:italic;">//1createElm的作⽤是通过虚拟节点创建真实的 DOM 并插⼊到它的⽗节点中。2createComponent返回是普通元素还是是普通vnode,是vnode执行钩子递归遍历子组件并且插入到dom</span></span>
<span class="line"><span style="color:#F07178;">                                                          </span></span>
<span class="line"><span style="color:#F07178;">                                               </span></span>
<span class="line"><span style="color:#F07178;">                                                     </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">                             </span><span style="color:#A6ACCD;">noop</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">                             </span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">before</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">before</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">                                                         </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_isMounted</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">!</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">_isDestroyed</span><span style="color:#F07178;">)  </span><span style="color:#82AAFF;">callHook</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforeUpdate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">                                                         </span><span style="color:#676E95;font-style:italic;">//定义&#39;beforeUpdate&#39;,并没有调用,所以第一次实例化组件不会被调用}}, </span></span>
<span class="line"><span style="color:#F07178;">                             </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">/* isRenderWatcher */</span></span>
<span class="line"><span style="color:#F07178;">                             )                                                  </span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#F78C6C;">3.</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">callHook</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">mounted</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#F07178;">         </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> Vue时不会执行</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;">但更新渲染时会执行</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">    wathcer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">callHook</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">updated</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#F78C6C;">1.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforeUpdate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">和 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">updated</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">在第一次实例化时都不会被调用</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">他们都由事件触发</span></span>
<span class="line"><span style="color:#F78C6C;">2.</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">beforeUpdate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">和 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">updated</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">之间还有 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">activated</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;">/*keep-alive 组件激活时调用*/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">deactivated</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">派发更新, vue从data改变到页面渲染的过程</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> vueValue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setter </span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">//触发setter时dep会notify所有的subs(wathcer)</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">--&gt;</span><span style="color:#A6ACCD;"> wathcer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">             </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">computed</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">             </span><span style="color:#89DDFF;font-style:italic;">else</span></span>
<span class="line"><span style="color:#F07178;">             </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">--&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">queueWatcher</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                         </span><span style="color:#A6ACCD;">has</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//用于判断重复watcher的数量</span></span>
<span class="line"><span style="color:#F07178;">                         </span><span style="color:#A6ACCD;">queue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">watcher</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">                         </span><span style="color:#676E95;font-style:italic;">//用nextTick排队, 下一个的事件循环“tick” ,在下一个事件循环执行watcher,更新ui</span></span>
<span class="line"><span style="color:#F07178;">                         </span><span style="color:#82AAFF;">nextTick</span><span style="color:#F07178;">(【</span><span style="color:#A6ACCD;">flushSchedulerQueue方法</span><span style="color:#F07178;">】)</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">                                                         </span></span>
<span class="line"><span style="color:#F07178;">                                         </span><span style="color:#A6ACCD;">callbacks</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(【</span><span style="color:#A6ACCD;">flushSchedulerQueue方法</span><span style="color:#F07178;">】) </span><span style="color:#676E95;font-style:italic;">//callbacks推入一个个【flushSchedulerQueue方法】, 去被flushCallbacks拿出来执行                                                         </span></span>
<span class="line"><span style="color:#89DDFF;">                                         </span><span style="color:#676E95;font-style:italic;">//没有pending的话: </span></span>
<span class="line"><span style="color:#F07178;">                                         </span><span style="color:#82AAFF;">timerFunc</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">                                                </span><span style="color:#676E95;font-style:italic;">//timerFunc的最常用的一种实现:</span></span>
<span class="line"><span style="color:#F07178;">                                                </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">flushCallbacks</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#89DDFF;">                                                                             </span><span style="color:#676E95;font-style:italic;">//遍历callbacks，执行所有callback即【flushSchedulerQueue方法】                                                                             </span></span>
<span class="line"><span style="color:#F07178;">                                                                               执行 【flushSchedulerQueue方法】() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                                                                                         </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">对频繁重复的事件进行合并或去重,并运行watcher</span><span style="color:#89DDFF;">/</span><span style="color:#F07178;"> </span></span>
<span class="line"><span style="color:#F07178;">                                                                                         </span><span style="color:#A6ACCD;">watcher</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">queue</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">index</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">                                                                                         </span><span style="color:#A6ACCD;">watcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">before</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">///调用到一开始定义的&#39;beforeUpdate&#39;</span></span>
<span class="line"><span style="color:#F07178;">                                                                                         </span><span style="color:#A6ACCD;">has</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">id</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">null;</span><span style="color:#676E95;font-style:italic;">//用于判断重复watcher的数量</span></span>
<span class="line"><span style="color:#F07178;">                                                                                         </span><span style="color:#A6ACCD;">watcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                                                                                             </span><span style="color:#A6ACCD;">watcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">updateComponent</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//具体流程看上面  }</span></span>
<span class="line"><span style="color:#F07178;">                                                                                         </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">                                                                                        </span><span style="color:#676E95;font-style:italic;">// has[id] != null的话, 增加重复的watcher的数量标记,超过限定值可能是在watch里修改了了它自己,自己又触发了更新自己,就要报错</span></span>
<span class="line"><span style="color:#F07178;">                                                                                 </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                                                                                 </span><span style="color:#82AAFF;">callHook</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">updated</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">//先调用&#39;activated&#39;/&#39;deactivated&#39;</span></span>
<span class="line"><span style="color:#F07178;">                                                                             </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">                                                                        )</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Vue</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">render</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">h</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">context</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(App)</span><span style="color:#89DDFF;">,}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">span</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">staticClass</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">jb-breadcrumb-back</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">on</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">click</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{this.</span><span style="color:#82AAFF;">$emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">on-last</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;},},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$attrs</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">attrs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">tippy-tips</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">返回上一级</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,},</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;">cursor</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pointer</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,},</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">..内容</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">h</span><span style="color:#A6ACCD;">(</span><span style="color:#676E95;font-style:italic;">/*可以是另一个h函数*/</span><span style="color:#A6ACCD;">)])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">computed </span><span style="color:#676E95;font-style:italic;">//本质是lazy watcher</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//1一次 定义,调用new Vue时</span></span>
<span class="line"><span style="color:#A6ACCD;">        vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$createElement</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">3515</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">3374</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">_createElement</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">3455</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">createComponent</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">3203</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">extend</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">5186</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">initComputed$1</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">5227</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">defineComputed</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4823</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">createComputedGetter</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4847</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//lazy为true,决定初始化时先不求值(在渲染时求值), 初始化dirty也被设true(用来作为只执行一次的flag,缓存computed结果用)</span></span>
<span class="line"><span style="color:#A6ACCD;">            Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> computedGetter)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//1一次 定义,_调用App.vue时,isComponent: true</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">initState</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4659</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">initComputed</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4790</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">Watcher</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4457</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//定义了wathcer.getter是computed定义的回调函数, new Watcher(vm, expOrFn = ƒ bbb(), cb = ƒ noop, options:{lazy: true});</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//2多次 渲染时求值,依赖收集</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;"> (App</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">7c02</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">代理的get</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">2081</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">computedGetter</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4851</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//computedGetter里执行评估</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">evaluate</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4597</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//computedGetter里dirty为true时会执行watcher.evaluate(),evaluate中执行了get,然后dirty被设false,如此只执行了一次计算值,之后从缓存里拿</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4511</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//调用了wathcer.getter即computed定义的回调函数</span></span>
<span class="line"><span style="color:#89DDFF;">     </span><span style="color:#676E95;font-style:italic;">//3多次 defineProperty的setter,派发更新</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">reactiveSetter</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1055</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">notify</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">730</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">update</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4560</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">queueWatcher</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4418</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1999</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">timerFunc</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1942</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;"> (async)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">flushCallbacks</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1915</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        (anonymous) (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1989</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">flushSchedulerQueue</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4570</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4495</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//watcher.getter是updateComponent </span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">updateComponent</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4081</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_render</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">3569</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">            </span><span style="color:#676E95;font-style:italic;">//触发2渲染时求值</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">render</span><span style="color:#A6ACCD;"> (App</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">vue</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">7c02</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">代理的get</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">2081</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">computedGetter</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4851</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">evaluate</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4597</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4511</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">watcher</span><span style="color:#676E95;font-style:italic;">//本质是user watcher</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//1定义,_调用App.vue时,isComponent: true</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">initState</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4661</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">initWatch</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4903</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">createWatcher</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4921</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        Vue</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4961</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">Watcher</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4457</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">//定义了wathcer.cb是watch定义的回调函数, new Watcher(vm, expOrFn:&quot;aaa&quot;, cb: ƒ aaa(), options:{user: true});</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">//2defineProperty的setter,派发更新</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">reactiveSetter</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1055</span><span style="color:#A6ACCD;">) </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">notify</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">730</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">update</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4560</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">queueWatcher</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4418</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">nextTick</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1999</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">timerFunc</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1942</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;"> (async)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">flushCallbacks</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1915</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        (anonymous) (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">1989</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">flushSchedulerQueue</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4570</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4511</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//watcher.getter = parsePath(expOrFn);是访问xxx.xx的每一个值的方法</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">if</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">user) </span><span style="color:#82AAFF;">invokeWithErrorHandling</span><span style="color:#A6ACCD;">(watcher</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">cb</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldValue]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> info);</span><span style="color:#676E95;font-style:italic;">////调用了wathcer.cb即watch定义的回调函数</span></span></code></pre></div><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight has-diff"><code><span class="line"><span style="color:#A6ACCD;">Diff算法</span><span style="color:#676E95;font-style:italic;">//假设是最常见的收尾插入或排序</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">为什么要diff</span><span style="color:#89DDFF;">?</span></span>
<span class="line"><span style="color:#A6ACCD;">    一个组件对应一个watcher</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">无法知道确切变化</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">所以需要diff算法找出变化</span></span>
<span class="line"><span style="color:#A6ACCD;">特点    </span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">深度优先,同层比较</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#82AAFF;">patch</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">6526</span><span style="color:#A6ACCD;">) 重点</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">被递归的patchVnode</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">6363</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//diff算法所在</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 1获取两个节点的孩子节点数组</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 2无脑属性更新 vue3的主要优化在这</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">prepatch</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">3144</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//有钩子的话执行prepatch钩子,这钩子占位符vnode才有</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#82AAFF;">updateChildComponent</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">4172</span><span style="color:#A6ACCD;">)   </span></span>
<span class="line"><span style="color:#A6ACCD;">   </span><span style="color:#676E95;font-style:italic;">// 3内部比较,新节点没文本，有孩子     </span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">updateChildren</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">6260</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">对子元素同样递归patchVnode</span><span style="color:#89DDFF;">/</span></span>
<span class="line"><span style="color:#A6ACCD;">            新旧vnode首尾4个游标</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 游标调整(4个重点)</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 1.两个开头比较</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 2.两个结尾</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 3.旧开头和新结尾</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 4.旧结尾和新开头</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 头尾比较没有找到相同的, 则从新的开头拿一个，然后去老数组中一个一个查找</span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 在老中没找到，就创建</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#82AAFF;">createElm</span><span style="color:#A6ACCD;"> (vue</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">runtime</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">esm</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">js</span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;">2b0e</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;">5999</span><span style="color:#A6ACCD;">)</span><span style="color:#676E95;font-style:italic;">//情况1  </span></span>
<span class="line"><span style="color:#89DDFF;">                    </span><span style="color:#676E95;font-style:italic;">// 在老中找到了, 先patch, 再移动到队首                </span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 新的多孩子, 就批量新增</span></span>
<span class="line"><span style="color:#89DDFF;">                </span><span style="color:#676E95;font-style:italic;">// 老的多孩子，批量删除</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// 4文本节点更新</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//文本和children是互斥的,如果有文本说明是文本节点,一定没孩子</span></span>
<span class="line"><span style="color:#A6ACCD;">不用key的话</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">会判断为sameVnode</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">会增加没必要的更新</span></span></code></pre></div>`,6),e=[o];function t(c,r,y,D,F,A){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{i as __pageData,u as default};
